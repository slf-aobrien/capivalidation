// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BillGroupRuleDTO BillGroupRuleDTO
//
// swagger:model BillGroupRuleDTO
type BillGroupRuleDTO struct {

	// account number
	AccountNumber string `json:"accountNumber,omitempty"`

	// address
	Address *AddressDTO `json:"address,omitempty"`

	// auto recon
	AutoRecon bool `json:"autoRecon,omitempty"`

	// bill group rule reference key
	BillGroupRuleReferenceKey string `json:"billGroupRuleReferenceKey,omitempty"`

	// bill lead time
	BillLeadTime int32 `json:"billLeadTime,omitempty"`

	// company
	Company string `json:"company,omitempty"`

	// contact
	Contact *PersonDTO `json:"contact,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// email
	Email *EmailDTO `json:"email,omitempty"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// extension date
	ExtensionDate string `json:"extensionDate,omitempty"`

	// fax
	Fax *PhoneDTO `json:"fax,omitempty"`

	// grace period
	GracePeriod string `json:"gracePeriod,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// lapse status
	LapseStatus string `json:"lapseStatus,omitempty"`

	// paid to date
	PaidToDate string `json:"paidToDate,omitempty"`

	// payee name
	PayeeName string `json:"payeeName,omitempty"`

	// phone
	Phone *PhoneDTO `json:"phone,omitempty"`

	// resolution amount
	ResolutionAmount string `json:"resolutionAmount,omitempty"`

	// tpa
	Tpa string `json:"tpa,omitempty"`

	// transaction scheduler
	TransactionScheduler *TransactionSchedulerDTO `json:"transactionScheduler,omitempty"`
}

// Validate validates this bill group rule d t o
func (m *BillGroupRuleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionScheduler(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillGroupRuleDTO) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) validateFax(formats strfmt.Registry) error {
	if swag.IsZero(m.Fax) { // not required
		return nil
	}

	if m.Fax != nil {
		if err := m.Fax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fax")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if m.Phone != nil {
		if err := m.Phone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) validateTransactionScheduler(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionScheduler) { // not required
		return nil
	}

	if m.TransactionScheduler != nil {
		if err := m.TransactionScheduler.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transactionScheduler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transactionScheduler")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bill group rule d t o based on the context it is used
func (m *BillGroupRuleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionScheduler(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BillGroupRuleDTO) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {

		if swag.IsZero(m.Contact) { // not required
			return nil
		}

		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if swag.IsZero(m.Email) { // not required
			return nil
		}

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) contextValidateFax(ctx context.Context, formats strfmt.Registry) error {

	if m.Fax != nil {

		if swag.IsZero(m.Fax) { // not required
			return nil
		}

		if err := m.Fax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fax")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) contextValidatePhone(ctx context.Context, formats strfmt.Registry) error {

	if m.Phone != nil {

		if swag.IsZero(m.Phone) { // not required
			return nil
		}

		if err := m.Phone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

func (m *BillGroupRuleDTO) contextValidateTransactionScheduler(ctx context.Context, formats strfmt.Registry) error {

	if m.TransactionScheduler != nil {

		if swag.IsZero(m.TransactionScheduler) { // not required
			return nil
		}

		if err := m.TransactionScheduler.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transactionScheduler")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transactionScheduler")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BillGroupRuleDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BillGroupRuleDTO) UnmarshalBinary(b []byte) error {
	var res BillGroupRuleDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
