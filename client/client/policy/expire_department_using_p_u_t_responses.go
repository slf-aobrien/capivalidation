// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ExpireDepartmentUsingPUTReader is a Reader for the ExpireDepartmentUsingPUT structure.
type ExpireDepartmentUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExpireDepartmentUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExpireDepartmentUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewExpireDepartmentUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewExpireDepartmentUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewExpireDepartmentUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewExpireDepartmentUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewExpireDepartmentUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewExpireDepartmentUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/departmentExpire] expireDepartmentUsingPUT", response, response.Code())
	}
}

// NewExpireDepartmentUsingPUTOK creates a ExpireDepartmentUsingPUTOK with default headers values
func NewExpireDepartmentUsingPUTOK() *ExpireDepartmentUsingPUTOK {
	return &ExpireDepartmentUsingPUTOK{}
}

/*
ExpireDepartmentUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type ExpireDepartmentUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this expire department using p u t o k response has a 2xx status code
func (o *ExpireDepartmentUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this expire department using p u t o k response has a 3xx status code
func (o *ExpireDepartmentUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t o k response has a 4xx status code
func (o *ExpireDepartmentUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this expire department using p u t o k response has a 5xx status code
func (o *ExpireDepartmentUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this expire department using p u t o k response a status code equal to that given
func (o *ExpireDepartmentUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the expire department using p u t o k response
func (o *ExpireDepartmentUsingPUTOK) Code() int {
	return 200
}

func (o *ExpireDepartmentUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTOK %s", 200, payload)
}

func (o *ExpireDepartmentUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTOK %s", 200, payload)
}

func (o *ExpireDepartmentUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *ExpireDepartmentUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewExpireDepartmentUsingPUTCreated creates a ExpireDepartmentUsingPUTCreated with default headers values
func NewExpireDepartmentUsingPUTCreated() *ExpireDepartmentUsingPUTCreated {
	return &ExpireDepartmentUsingPUTCreated{}
}

/*
ExpireDepartmentUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type ExpireDepartmentUsingPUTCreated struct {
}

// IsSuccess returns true when this expire department using p u t created response has a 2xx status code
func (o *ExpireDepartmentUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this expire department using p u t created response has a 3xx status code
func (o *ExpireDepartmentUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t created response has a 4xx status code
func (o *ExpireDepartmentUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this expire department using p u t created response has a 5xx status code
func (o *ExpireDepartmentUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this expire department using p u t created response a status code equal to that given
func (o *ExpireDepartmentUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the expire department using p u t created response
func (o *ExpireDepartmentUsingPUTCreated) Code() int {
	return 201
}

func (o *ExpireDepartmentUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTCreated", 201)
}

func (o *ExpireDepartmentUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTCreated", 201)
}

func (o *ExpireDepartmentUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpireDepartmentUsingPUTBadRequest creates a ExpireDepartmentUsingPUTBadRequest with default headers values
func NewExpireDepartmentUsingPUTBadRequest() *ExpireDepartmentUsingPUTBadRequest {
	return &ExpireDepartmentUsingPUTBadRequest{}
}

/*
ExpireDepartmentUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ExpireDepartmentUsingPUTBadRequest struct {
}

// IsSuccess returns true when this expire department using p u t bad request response has a 2xx status code
func (o *ExpireDepartmentUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this expire department using p u t bad request response has a 3xx status code
func (o *ExpireDepartmentUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t bad request response has a 4xx status code
func (o *ExpireDepartmentUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this expire department using p u t bad request response has a 5xx status code
func (o *ExpireDepartmentUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this expire department using p u t bad request response a status code equal to that given
func (o *ExpireDepartmentUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the expire department using p u t bad request response
func (o *ExpireDepartmentUsingPUTBadRequest) Code() int {
	return 400
}

func (o *ExpireDepartmentUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTBadRequest", 400)
}

func (o *ExpireDepartmentUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTBadRequest", 400)
}

func (o *ExpireDepartmentUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpireDepartmentUsingPUTUnauthorized creates a ExpireDepartmentUsingPUTUnauthorized with default headers values
func NewExpireDepartmentUsingPUTUnauthorized() *ExpireDepartmentUsingPUTUnauthorized {
	return &ExpireDepartmentUsingPUTUnauthorized{}
}

/*
ExpireDepartmentUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ExpireDepartmentUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this expire department using p u t unauthorized response has a 2xx status code
func (o *ExpireDepartmentUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this expire department using p u t unauthorized response has a 3xx status code
func (o *ExpireDepartmentUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t unauthorized response has a 4xx status code
func (o *ExpireDepartmentUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this expire department using p u t unauthorized response has a 5xx status code
func (o *ExpireDepartmentUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this expire department using p u t unauthorized response a status code equal to that given
func (o *ExpireDepartmentUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the expire department using p u t unauthorized response
func (o *ExpireDepartmentUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *ExpireDepartmentUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTUnauthorized", 401)
}

func (o *ExpireDepartmentUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTUnauthorized", 401)
}

func (o *ExpireDepartmentUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpireDepartmentUsingPUTForbidden creates a ExpireDepartmentUsingPUTForbidden with default headers values
func NewExpireDepartmentUsingPUTForbidden() *ExpireDepartmentUsingPUTForbidden {
	return &ExpireDepartmentUsingPUTForbidden{}
}

/*
ExpireDepartmentUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ExpireDepartmentUsingPUTForbidden struct {
}

// IsSuccess returns true when this expire department using p u t forbidden response has a 2xx status code
func (o *ExpireDepartmentUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this expire department using p u t forbidden response has a 3xx status code
func (o *ExpireDepartmentUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t forbidden response has a 4xx status code
func (o *ExpireDepartmentUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this expire department using p u t forbidden response has a 5xx status code
func (o *ExpireDepartmentUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this expire department using p u t forbidden response a status code equal to that given
func (o *ExpireDepartmentUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the expire department using p u t forbidden response
func (o *ExpireDepartmentUsingPUTForbidden) Code() int {
	return 403
}

func (o *ExpireDepartmentUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTForbidden", 403)
}

func (o *ExpireDepartmentUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTForbidden", 403)
}

func (o *ExpireDepartmentUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpireDepartmentUsingPUTNotFound creates a ExpireDepartmentUsingPUTNotFound with default headers values
func NewExpireDepartmentUsingPUTNotFound() *ExpireDepartmentUsingPUTNotFound {
	return &ExpireDepartmentUsingPUTNotFound{}
}

/*
ExpireDepartmentUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ExpireDepartmentUsingPUTNotFound struct {
}

// IsSuccess returns true when this expire department using p u t not found response has a 2xx status code
func (o *ExpireDepartmentUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this expire department using p u t not found response has a 3xx status code
func (o *ExpireDepartmentUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t not found response has a 4xx status code
func (o *ExpireDepartmentUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this expire department using p u t not found response has a 5xx status code
func (o *ExpireDepartmentUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this expire department using p u t not found response a status code equal to that given
func (o *ExpireDepartmentUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the expire department using p u t not found response
func (o *ExpireDepartmentUsingPUTNotFound) Code() int {
	return 404
}

func (o *ExpireDepartmentUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTNotFound", 404)
}

func (o *ExpireDepartmentUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTNotFound", 404)
}

func (o *ExpireDepartmentUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewExpireDepartmentUsingPUTInternalServerError creates a ExpireDepartmentUsingPUTInternalServerError with default headers values
func NewExpireDepartmentUsingPUTInternalServerError() *ExpireDepartmentUsingPUTInternalServerError {
	return &ExpireDepartmentUsingPUTInternalServerError{}
}

/*
ExpireDepartmentUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ExpireDepartmentUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this expire department using p u t internal server error response has a 2xx status code
func (o *ExpireDepartmentUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this expire department using p u t internal server error response has a 3xx status code
func (o *ExpireDepartmentUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this expire department using p u t internal server error response has a 4xx status code
func (o *ExpireDepartmentUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this expire department using p u t internal server error response has a 5xx status code
func (o *ExpireDepartmentUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this expire department using p u t internal server error response a status code equal to that given
func (o *ExpireDepartmentUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the expire department using p u t internal server error response
func (o *ExpireDepartmentUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *ExpireDepartmentUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTInternalServerError", 500)
}

func (o *ExpireDepartmentUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/departmentExpire][%d] expireDepartmentUsingPUTInternalServerError", 500)
}

func (o *ExpireDepartmentUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
