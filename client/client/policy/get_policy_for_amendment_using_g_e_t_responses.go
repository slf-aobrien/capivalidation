// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetPolicyForAmendmentUsingGETReader is a Reader for the GetPolicyForAmendmentUsingGET structure.
type GetPolicyForAmendmentUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPolicyForAmendmentUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPolicyForAmendmentUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPolicyForAmendmentUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPolicyForAmendmentUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPolicyForAmendmentUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPolicyForAmendmentUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPolicyForAmendmentUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/policyInfoForAmendment] getPolicyForAmendmentUsingGET", response, response.Code())
	}
}

// NewGetPolicyForAmendmentUsingGETOK creates a GetPolicyForAmendmentUsingGETOK with default headers values
func NewGetPolicyForAmendmentUsingGETOK() *GetPolicyForAmendmentUsingGETOK {
	return &GetPolicyForAmendmentUsingGETOK{}
}

/*
GetPolicyForAmendmentUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetPolicyForAmendmentUsingGETOK struct {
	Payload *models.ResponseWrapperPolicyDTO
}

// IsSuccess returns true when this get policy for amendment using g e t o k response has a 2xx status code
func (o *GetPolicyForAmendmentUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get policy for amendment using g e t o k response has a 3xx status code
func (o *GetPolicyForAmendmentUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy for amendment using g e t o k response has a 4xx status code
func (o *GetPolicyForAmendmentUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policy for amendment using g e t o k response has a 5xx status code
func (o *GetPolicyForAmendmentUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy for amendment using g e t o k response a status code equal to that given
func (o *GetPolicyForAmendmentUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get policy for amendment using g e t o k response
func (o *GetPolicyForAmendmentUsingGETOK) Code() int {
	return 200
}

func (o *GetPolicyForAmendmentUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETOK %s", 200, payload)
}

func (o *GetPolicyForAmendmentUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETOK %s", 200, payload)
}

func (o *GetPolicyForAmendmentUsingGETOK) GetPayload() *models.ResponseWrapperPolicyDTO {
	return o.Payload
}

func (o *GetPolicyForAmendmentUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperPolicyDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyForAmendmentUsingGETBadRequest creates a GetPolicyForAmendmentUsingGETBadRequest with default headers values
func NewGetPolicyForAmendmentUsingGETBadRequest() *GetPolicyForAmendmentUsingGETBadRequest {
	return &GetPolicyForAmendmentUsingGETBadRequest{}
}

/*
GetPolicyForAmendmentUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPolicyForAmendmentUsingGETBadRequest struct {
}

// IsSuccess returns true when this get policy for amendment using g e t bad request response has a 2xx status code
func (o *GetPolicyForAmendmentUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy for amendment using g e t bad request response has a 3xx status code
func (o *GetPolicyForAmendmentUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy for amendment using g e t bad request response has a 4xx status code
func (o *GetPolicyForAmendmentUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy for amendment using g e t bad request response has a 5xx status code
func (o *GetPolicyForAmendmentUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy for amendment using g e t bad request response a status code equal to that given
func (o *GetPolicyForAmendmentUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get policy for amendment using g e t bad request response
func (o *GetPolicyForAmendmentUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetPolicyForAmendmentUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETBadRequest", 400)
}

func (o *GetPolicyForAmendmentUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETBadRequest", 400)
}

func (o *GetPolicyForAmendmentUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyForAmendmentUsingGETUnauthorized creates a GetPolicyForAmendmentUsingGETUnauthorized with default headers values
func NewGetPolicyForAmendmentUsingGETUnauthorized() *GetPolicyForAmendmentUsingGETUnauthorized {
	return &GetPolicyForAmendmentUsingGETUnauthorized{}
}

/*
GetPolicyForAmendmentUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPolicyForAmendmentUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get policy for amendment using g e t unauthorized response has a 2xx status code
func (o *GetPolicyForAmendmentUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy for amendment using g e t unauthorized response has a 3xx status code
func (o *GetPolicyForAmendmentUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy for amendment using g e t unauthorized response has a 4xx status code
func (o *GetPolicyForAmendmentUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy for amendment using g e t unauthorized response has a 5xx status code
func (o *GetPolicyForAmendmentUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy for amendment using g e t unauthorized response a status code equal to that given
func (o *GetPolicyForAmendmentUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get policy for amendment using g e t unauthorized response
func (o *GetPolicyForAmendmentUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetPolicyForAmendmentUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETUnauthorized", 401)
}

func (o *GetPolicyForAmendmentUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETUnauthorized", 401)
}

func (o *GetPolicyForAmendmentUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyForAmendmentUsingGETForbidden creates a GetPolicyForAmendmentUsingGETForbidden with default headers values
func NewGetPolicyForAmendmentUsingGETForbidden() *GetPolicyForAmendmentUsingGETForbidden {
	return &GetPolicyForAmendmentUsingGETForbidden{}
}

/*
GetPolicyForAmendmentUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPolicyForAmendmentUsingGETForbidden struct {
}

// IsSuccess returns true when this get policy for amendment using g e t forbidden response has a 2xx status code
func (o *GetPolicyForAmendmentUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy for amendment using g e t forbidden response has a 3xx status code
func (o *GetPolicyForAmendmentUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy for amendment using g e t forbidden response has a 4xx status code
func (o *GetPolicyForAmendmentUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy for amendment using g e t forbidden response has a 5xx status code
func (o *GetPolicyForAmendmentUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy for amendment using g e t forbidden response a status code equal to that given
func (o *GetPolicyForAmendmentUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get policy for amendment using g e t forbidden response
func (o *GetPolicyForAmendmentUsingGETForbidden) Code() int {
	return 403
}

func (o *GetPolicyForAmendmentUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETForbidden", 403)
}

func (o *GetPolicyForAmendmentUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETForbidden", 403)
}

func (o *GetPolicyForAmendmentUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyForAmendmentUsingGETNotFound creates a GetPolicyForAmendmentUsingGETNotFound with default headers values
func NewGetPolicyForAmendmentUsingGETNotFound() *GetPolicyForAmendmentUsingGETNotFound {
	return &GetPolicyForAmendmentUsingGETNotFound{}
}

/*
GetPolicyForAmendmentUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPolicyForAmendmentUsingGETNotFound struct {
}

// IsSuccess returns true when this get policy for amendment using g e t not found response has a 2xx status code
func (o *GetPolicyForAmendmentUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy for amendment using g e t not found response has a 3xx status code
func (o *GetPolicyForAmendmentUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy for amendment using g e t not found response has a 4xx status code
func (o *GetPolicyForAmendmentUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy for amendment using g e t not found response has a 5xx status code
func (o *GetPolicyForAmendmentUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy for amendment using g e t not found response a status code equal to that given
func (o *GetPolicyForAmendmentUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get policy for amendment using g e t not found response
func (o *GetPolicyForAmendmentUsingGETNotFound) Code() int {
	return 404
}

func (o *GetPolicyForAmendmentUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETNotFound", 404)
}

func (o *GetPolicyForAmendmentUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETNotFound", 404)
}

func (o *GetPolicyForAmendmentUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyForAmendmentUsingGETInternalServerError creates a GetPolicyForAmendmentUsingGETInternalServerError with default headers values
func NewGetPolicyForAmendmentUsingGETInternalServerError() *GetPolicyForAmendmentUsingGETInternalServerError {
	return &GetPolicyForAmendmentUsingGETInternalServerError{}
}

/*
GetPolicyForAmendmentUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetPolicyForAmendmentUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get policy for amendment using g e t internal server error response has a 2xx status code
func (o *GetPolicyForAmendmentUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy for amendment using g e t internal server error response has a 3xx status code
func (o *GetPolicyForAmendmentUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy for amendment using g e t internal server error response has a 4xx status code
func (o *GetPolicyForAmendmentUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policy for amendment using g e t internal server error response has a 5xx status code
func (o *GetPolicyForAmendmentUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get policy for amendment using g e t internal server error response a status code equal to that given
func (o *GetPolicyForAmendmentUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get policy for amendment using g e t internal server error response
func (o *GetPolicyForAmendmentUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetPolicyForAmendmentUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETInternalServerError", 500)
}

func (o *GetPolicyForAmendmentUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyInfoForAmendment][%d] getPolicyForAmendmentUsingGETInternalServerError", 500)
}

func (o *GetPolicyForAmendmentUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
