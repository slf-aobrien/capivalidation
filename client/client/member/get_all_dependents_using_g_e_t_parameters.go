// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllDependentsUsingGETParams creates a new GetAllDependentsUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllDependentsUsingGETParams() *GetAllDependentsUsingGETParams {
	return &GetAllDependentsUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllDependentsUsingGETParamsWithTimeout creates a new GetAllDependentsUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetAllDependentsUsingGETParamsWithTimeout(timeout time.Duration) *GetAllDependentsUsingGETParams {
	return &GetAllDependentsUsingGETParams{
		timeout: timeout,
	}
}

// NewGetAllDependentsUsingGETParamsWithContext creates a new GetAllDependentsUsingGETParams object
// with the ability to set a context for a request.
func NewGetAllDependentsUsingGETParamsWithContext(ctx context.Context) *GetAllDependentsUsingGETParams {
	return &GetAllDependentsUsingGETParams{
		Context: ctx,
	}
}

// NewGetAllDependentsUsingGETParamsWithHTTPClient creates a new GetAllDependentsUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllDependentsUsingGETParamsWithHTTPClient(client *http.Client) *GetAllDependentsUsingGETParams {
	return &GetAllDependentsUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetAllDependentsUsingGETParams contains all the parameters to send to the API endpoint

	for the get all dependents using g e t operation.

	Typically these are written to a http.Request.
*/
type GetAllDependentsUsingGETParams struct {

	/* EffectiveDate.

	   Effective Date. If not provided then it would be system date. MM/dd/YYYY format
	*/
	EffectiveDate *string

	/* MemberClientID.

	   Client ID of Member
	*/
	MemberClientID string

	/* PolicyNumber.

	   Policy Number
	*/
	PolicyNumber string

	/* RequestApplication.

	   Requested Application
	*/
	RequestApplication string

	/* RequestUser.

	   Requested User
	*/
	RequestUser string

	/* ReturnBenefitOptions.

	   Returns benefit options of dependents
	*/
	ReturnBenefitOptions *bool

	/* ReturnDoctors.

	   Return Doctor/facility information
	*/
	ReturnDoctors *bool

	/* ReturnUnderwritingData.

	   Returns smoker status of dependents
	*/
	ReturnUnderwritingData *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all dependents using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllDependentsUsingGETParams) WithDefaults() *GetAllDependentsUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all dependents using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllDependentsUsingGETParams) SetDefaults() {
	var (
		returnBenefitOptionsDefault = bool(false)

		returnDoctorsDefault = bool(false)

		returnUnderwritingDataDefault = bool(false)
	)

	val := GetAllDependentsUsingGETParams{
		ReturnBenefitOptions:   &returnBenefitOptionsDefault,
		ReturnDoctors:          &returnDoctorsDefault,
		ReturnUnderwritingData: &returnUnderwritingDataDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithTimeout(timeout time.Duration) *GetAllDependentsUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithContext(ctx context.Context) *GetAllDependentsUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithHTTPClient(client *http.Client) *GetAllDependentsUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffectiveDate adds the effectiveDate to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithEffectiveDate(effectiveDate *string) *GetAllDependentsUsingGETParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithMemberClientID adds the memberClientID to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithMemberClientID(memberClientID string) *GetAllDependentsUsingGETParams {
	o.SetMemberClientID(memberClientID)
	return o
}

// SetMemberClientID adds the memberClientId to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetMemberClientID(memberClientID string) {
	o.MemberClientID = memberClientID
}

// WithPolicyNumber adds the policyNumber to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithPolicyNumber(policyNumber string) *GetAllDependentsUsingGETParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetPolicyNumber(policyNumber string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithRequestApplication(requestApplication string) *GetAllDependentsUsingGETParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithRequestUser(requestUser string) *GetAllDependentsUsingGETParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WithReturnBenefitOptions adds the returnBenefitOptions to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithReturnBenefitOptions(returnBenefitOptions *bool) *GetAllDependentsUsingGETParams {
	o.SetReturnBenefitOptions(returnBenefitOptions)
	return o
}

// SetReturnBenefitOptions adds the returnBenefitOptions to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetReturnBenefitOptions(returnBenefitOptions *bool) {
	o.ReturnBenefitOptions = returnBenefitOptions
}

// WithReturnDoctors adds the returnDoctors to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithReturnDoctors(returnDoctors *bool) *GetAllDependentsUsingGETParams {
	o.SetReturnDoctors(returnDoctors)
	return o
}

// SetReturnDoctors adds the returnDoctors to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetReturnDoctors(returnDoctors *bool) {
	o.ReturnDoctors = returnDoctors
}

// WithReturnUnderwritingData adds the returnUnderwritingData to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) WithReturnUnderwritingData(returnUnderwritingData *bool) *GetAllDependentsUsingGETParams {
	o.SetReturnUnderwritingData(returnUnderwritingData)
	return o
}

// SetReturnUnderwritingData adds the returnUnderwritingData to the get all dependents using g e t params
func (o *GetAllDependentsUsingGETParams) SetReturnUnderwritingData(returnUnderwritingData *bool) {
	o.ReturnUnderwritingData = returnUnderwritingData
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllDependentsUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	// query param memberClientID
	qrMemberClientID := o.MemberClientID
	qMemberClientID := qrMemberClientID
	if qMemberClientID != "" {

		if err := r.SetQueryParam("memberClientID", qMemberClientID); err != nil {
			return err
		}
	}

	// query param policyNumber
	qrPolicyNumber := o.PolicyNumber
	qPolicyNumber := qrPolicyNumber
	if qPolicyNumber != "" {

		if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if o.ReturnBenefitOptions != nil {

		// query param returnBenefitOptions
		var qrReturnBenefitOptions bool

		if o.ReturnBenefitOptions != nil {
			qrReturnBenefitOptions = *o.ReturnBenefitOptions
		}
		qReturnBenefitOptions := swag.FormatBool(qrReturnBenefitOptions)
		if qReturnBenefitOptions != "" {

			if err := r.SetQueryParam("returnBenefitOptions", qReturnBenefitOptions); err != nil {
				return err
			}
		}
	}

	if o.ReturnDoctors != nil {

		// query param returnDoctors
		var qrReturnDoctors bool

		if o.ReturnDoctors != nil {
			qrReturnDoctors = *o.ReturnDoctors
		}
		qReturnDoctors := swag.FormatBool(qrReturnDoctors)
		if qReturnDoctors != "" {

			if err := r.SetQueryParam("returnDoctors", qReturnDoctors); err != nil {
				return err
			}
		}
	}

	if o.ReturnUnderwritingData != nil {

		// query param returnUnderwritingData
		var qrReturnUnderwritingData bool

		if o.ReturnUnderwritingData != nil {
			qrReturnUnderwritingData = *o.ReturnUnderwritingData
		}
		qReturnUnderwritingData := swag.FormatBool(qrReturnUnderwritingData)
		if qReturnUnderwritingData != "" {

			if err := r.SetQueryParam("returnUnderwritingData", qReturnUnderwritingData); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
