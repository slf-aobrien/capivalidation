// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// FindRateUsingGETReader is a Reader for the FindRateUsingGET structure.
type FindRateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindRateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindRateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFindRateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFindRateUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindRateUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindRateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFindRateUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/system/rates] findRateUsingGET", response, response.Code())
	}
}

// NewFindRateUsingGETOK creates a FindRateUsingGETOK with default headers values
func NewFindRateUsingGETOK() *FindRateUsingGETOK {
	return &FindRateUsingGETOK{}
}

/*
FindRateUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type FindRateUsingGETOK struct {
	Payload *models.ResponseWrapperListRateScaleDTO
}

// IsSuccess returns true when this find rate using g e t o k response has a 2xx status code
func (o *FindRateUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find rate using g e t o k response has a 3xx status code
func (o *FindRateUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find rate using g e t o k response has a 4xx status code
func (o *FindRateUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find rate using g e t o k response has a 5xx status code
func (o *FindRateUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find rate using g e t o k response a status code equal to that given
func (o *FindRateUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the find rate using g e t o k response
func (o *FindRateUsingGETOK) Code() int {
	return 200
}

func (o *FindRateUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETOK %s", 200, payload)
}

func (o *FindRateUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETOK %s", 200, payload)
}

func (o *FindRateUsingGETOK) GetPayload() *models.ResponseWrapperListRateScaleDTO {
	return o.Payload
}

func (o *FindRateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListRateScaleDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindRateUsingGETBadRequest creates a FindRateUsingGETBadRequest with default headers values
func NewFindRateUsingGETBadRequest() *FindRateUsingGETBadRequest {
	return &FindRateUsingGETBadRequest{}
}

/*
FindRateUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FindRateUsingGETBadRequest struct {
}

// IsSuccess returns true when this find rate using g e t bad request response has a 2xx status code
func (o *FindRateUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find rate using g e t bad request response has a 3xx status code
func (o *FindRateUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find rate using g e t bad request response has a 4xx status code
func (o *FindRateUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this find rate using g e t bad request response has a 5xx status code
func (o *FindRateUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this find rate using g e t bad request response a status code equal to that given
func (o *FindRateUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the find rate using g e t bad request response
func (o *FindRateUsingGETBadRequest) Code() int {
	return 400
}

func (o *FindRateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETBadRequest", 400)
}

func (o *FindRateUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETBadRequest", 400)
}

func (o *FindRateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindRateUsingGETUnauthorized creates a FindRateUsingGETUnauthorized with default headers values
func NewFindRateUsingGETUnauthorized() *FindRateUsingGETUnauthorized {
	return &FindRateUsingGETUnauthorized{}
}

/*
FindRateUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FindRateUsingGETUnauthorized struct {
}

// IsSuccess returns true when this find rate using g e t unauthorized response has a 2xx status code
func (o *FindRateUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find rate using g e t unauthorized response has a 3xx status code
func (o *FindRateUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find rate using g e t unauthorized response has a 4xx status code
func (o *FindRateUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this find rate using g e t unauthorized response has a 5xx status code
func (o *FindRateUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this find rate using g e t unauthorized response a status code equal to that given
func (o *FindRateUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the find rate using g e t unauthorized response
func (o *FindRateUsingGETUnauthorized) Code() int {
	return 401
}

func (o *FindRateUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETUnauthorized", 401)
}

func (o *FindRateUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETUnauthorized", 401)
}

func (o *FindRateUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindRateUsingGETForbidden creates a FindRateUsingGETForbidden with default headers values
func NewFindRateUsingGETForbidden() *FindRateUsingGETForbidden {
	return &FindRateUsingGETForbidden{}
}

/*
FindRateUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FindRateUsingGETForbidden struct {
}

// IsSuccess returns true when this find rate using g e t forbidden response has a 2xx status code
func (o *FindRateUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find rate using g e t forbidden response has a 3xx status code
func (o *FindRateUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find rate using g e t forbidden response has a 4xx status code
func (o *FindRateUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this find rate using g e t forbidden response has a 5xx status code
func (o *FindRateUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this find rate using g e t forbidden response a status code equal to that given
func (o *FindRateUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the find rate using g e t forbidden response
func (o *FindRateUsingGETForbidden) Code() int {
	return 403
}

func (o *FindRateUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETForbidden", 403)
}

func (o *FindRateUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETForbidden", 403)
}

func (o *FindRateUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindRateUsingGETNotFound creates a FindRateUsingGETNotFound with default headers values
func NewFindRateUsingGETNotFound() *FindRateUsingGETNotFound {
	return &FindRateUsingGETNotFound{}
}

/*
FindRateUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FindRateUsingGETNotFound struct {
}

// IsSuccess returns true when this find rate using g e t not found response has a 2xx status code
func (o *FindRateUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find rate using g e t not found response has a 3xx status code
func (o *FindRateUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find rate using g e t not found response has a 4xx status code
func (o *FindRateUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this find rate using g e t not found response has a 5xx status code
func (o *FindRateUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this find rate using g e t not found response a status code equal to that given
func (o *FindRateUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the find rate using g e t not found response
func (o *FindRateUsingGETNotFound) Code() int {
	return 404
}

func (o *FindRateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETNotFound", 404)
}

func (o *FindRateUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETNotFound", 404)
}

func (o *FindRateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindRateUsingGETInternalServerError creates a FindRateUsingGETInternalServerError with default headers values
func NewFindRateUsingGETInternalServerError() *FindRateUsingGETInternalServerError {
	return &FindRateUsingGETInternalServerError{}
}

/*
FindRateUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type FindRateUsingGETInternalServerError struct {
}

// IsSuccess returns true when this find rate using g e t internal server error response has a 2xx status code
func (o *FindRateUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find rate using g e t internal server error response has a 3xx status code
func (o *FindRateUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find rate using g e t internal server error response has a 4xx status code
func (o *FindRateUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this find rate using g e t internal server error response has a 5xx status code
func (o *FindRateUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this find rate using g e t internal server error response a status code equal to that given
func (o *FindRateUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the find rate using g e t internal server error response
func (o *FindRateUsingGETInternalServerError) Code() int {
	return 500
}

func (o *FindRateUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETInternalServerError", 500)
}

func (o *FindRateUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/rates][%d] findRateUsingGETInternalServerError", 500)
}

func (o *FindRateUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
