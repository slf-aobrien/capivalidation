// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RateScaleTranchDTO RateScaleTranchDTO
//
// swagger:model RateScaleTranchDTO
type RateScaleTranchDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// next guarantee date
	NextGuaranteeDate string `json:"nextGuaranteeDate,omitempty"`

	// rate scale detail list
	RateScaleDetailList []*RateScaleDetailDTO `json:"rateScaleDetailList"`

	// rate scale option list
	RateScaleOptionList []*RateScaleOptionDTO `json:"rateScaleOptionList"`
}

// Validate validates this rate scale tranch d t o
func (m *RateScaleTranchDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRateScaleDetailList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateScaleOptionList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateScaleTranchDTO) validateRateScaleDetailList(formats strfmt.Registry) error {
	if swag.IsZero(m.RateScaleDetailList) { // not required
		return nil
	}

	for i := 0; i < len(m.RateScaleDetailList); i++ {
		if swag.IsZero(m.RateScaleDetailList[i]) { // not required
			continue
		}

		if m.RateScaleDetailList[i] != nil {
			if err := m.RateScaleDetailList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RateScaleTranchDTO) validateRateScaleOptionList(formats strfmt.Registry) error {
	if swag.IsZero(m.RateScaleOptionList) { // not required
		return nil
	}

	for i := 0; i < len(m.RateScaleOptionList); i++ {
		if swag.IsZero(m.RateScaleOptionList[i]) { // not required
			continue
		}

		if m.RateScaleOptionList[i] != nil {
			if err := m.RateScaleOptionList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleOptionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleOptionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this rate scale tranch d t o based on the context it is used
func (m *RateScaleTranchDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRateScaleDetailList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateScaleOptionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateScaleTranchDTO) contextValidateRateScaleDetailList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RateScaleDetailList); i++ {

		if m.RateScaleDetailList[i] != nil {

			if swag.IsZero(m.RateScaleDetailList[i]) { // not required
				return nil
			}

			if err := m.RateScaleDetailList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RateScaleTranchDTO) contextValidateRateScaleOptionList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RateScaleOptionList); i++ {

		if m.RateScaleOptionList[i] != nil {

			if swag.IsZero(m.RateScaleOptionList[i]) { // not required
				return nil
			}

			if err := m.RateScaleOptionList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleOptionList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleOptionList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RateScaleTranchDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateScaleTranchDTO) UnmarshalBinary(b []byte) error {
	var res RateScaleTranchDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
