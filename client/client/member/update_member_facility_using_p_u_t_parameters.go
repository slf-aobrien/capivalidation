// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUpdateMemberFacilityUsingPUTParams creates a new UpdateMemberFacilityUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateMemberFacilityUsingPUTParams() *UpdateMemberFacilityUsingPUTParams {
	return &UpdateMemberFacilityUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateMemberFacilityUsingPUTParamsWithTimeout creates a new UpdateMemberFacilityUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateMemberFacilityUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateMemberFacilityUsingPUTParams {
	return &UpdateMemberFacilityUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateMemberFacilityUsingPUTParamsWithContext creates a new UpdateMemberFacilityUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateMemberFacilityUsingPUTParamsWithContext(ctx context.Context) *UpdateMemberFacilityUsingPUTParams {
	return &UpdateMemberFacilityUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateMemberFacilityUsingPUTParamsWithHTTPClient creates a new UpdateMemberFacilityUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateMemberFacilityUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateMemberFacilityUsingPUTParams {
	return &UpdateMemberFacilityUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateMemberFacilityUsingPUTParams contains all the parameters to send to the API endpoint

	for the update member facility using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateMemberFacilityUsingPUTParams struct {

	/* BenefitKey.

	   benefitKey
	*/
	BenefitKey *string

	/* BirthDate.

	   birthDate
	*/
	BirthDate *string

	/* CaseMemberKey.

	   caseMemberKey
	*/
	CaseMemberKey *string

	/* ClientID.

	   clientId
	*/
	ClientID *string

	/* ContractState.

	   contractState
	*/
	ContractState *string

	/* EffectiveMonth.

	   effectiveMonth
	*/
	EffectiveMonth *string

	/* EffectiveYear.

	   effectiveYear
	*/
	EffectiveYear *string

	/* FacilityID.

	   facilityId
	*/
	FacilityID *string

	/* PerformReallocation.

	   performReallocation
	*/
	PerformReallocation *bool

	/* PlanCode.

	   planCode
	*/
	PlanCode *string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* SeriesCode.

	   seriesCode
	*/
	SeriesCode *string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat *string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update member facility using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateMemberFacilityUsingPUTParams) WithDefaults() *UpdateMemberFacilityUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update member facility using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateMemberFacilityUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateMemberFacilityUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithContext(ctx context.Context) *UpdateMemberFacilityUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateMemberFacilityUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBenefitKey adds the benefitKey to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithBenefitKey(benefitKey *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetBenefitKey(benefitKey)
	return o
}

// SetBenefitKey adds the benefitKey to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetBenefitKey(benefitKey *string) {
	o.BenefitKey = benefitKey
}

// WithBirthDate adds the birthDate to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithBirthDate(birthDate *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetBirthDate(birthDate)
	return o
}

// SetBirthDate adds the birthDate to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetBirthDate(birthDate *string) {
	o.BirthDate = birthDate
}

// WithCaseMemberKey adds the caseMemberKey to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithCaseMemberKey(caseMemberKey *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetCaseMemberKey(caseMemberKey)
	return o
}

// SetCaseMemberKey adds the caseMemberKey to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetCaseMemberKey(caseMemberKey *string) {
	o.CaseMemberKey = caseMemberKey
}

// WithClientID adds the clientID to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithClientID(clientID *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithContractState adds the contractState to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithContractState(contractState *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetContractState(contractState)
	return o
}

// SetContractState adds the contractState to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetContractState(contractState *string) {
	o.ContractState = contractState
}

// WithEffectiveMonth adds the effectiveMonth to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithEffectiveMonth(effectiveMonth *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetEffectiveMonth(effectiveMonth)
	return o
}

// SetEffectiveMonth adds the effectiveMonth to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetEffectiveMonth(effectiveMonth *string) {
	o.EffectiveMonth = effectiveMonth
}

// WithEffectiveYear adds the effectiveYear to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithEffectiveYear(effectiveYear *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetEffectiveYear(effectiveYear)
	return o
}

// SetEffectiveYear adds the effectiveYear to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetEffectiveYear(effectiveYear *string) {
	o.EffectiveYear = effectiveYear
}

// WithFacilityID adds the facilityID to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithFacilityID(facilityID *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetFacilityID(facilityID)
	return o
}

// SetFacilityID adds the facilityId to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetFacilityID(facilityID *string) {
	o.FacilityID = facilityID
}

// WithPerformReallocation adds the performReallocation to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithPerformReallocation(performReallocation *bool) *UpdateMemberFacilityUsingPUTParams {
	o.SetPerformReallocation(performReallocation)
	return o
}

// SetPerformReallocation adds the performReallocation to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetPerformReallocation(performReallocation *bool) {
	o.PerformReallocation = performReallocation
}

// WithPlanCode adds the planCode to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithPlanCode(planCode *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetPlanCode(planCode)
	return o
}

// SetPlanCode adds the planCode to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetPlanCode(planCode *string) {
	o.PlanCode = planCode
}

// WithPolicyNumber adds the policyNumber to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithPolicyNumber(policyNumber *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetPolicyNumber(policyNumber *string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithRequestApplication(requestApplication *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithRequestUser(requestUser *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithSeriesCode adds the seriesCode to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithSeriesCode(seriesCode *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetSeriesCode(seriesCode)
	return o
}

// SetSeriesCode adds the seriesCode to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetSeriesCode(seriesCode *string) {
	o.SeriesCode = seriesCode
}

// WithVarianceFormat adds the varianceFormat to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithVarianceFormat(varianceFormat *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetVarianceFormat(varianceFormat *string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) WithVarianceLevel(varianceLevel *string) *UpdateMemberFacilityUsingPUTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the update member facility using p u t params
func (o *UpdateMemberFacilityUsingPUTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateMemberFacilityUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BenefitKey != nil {

		// query param benefitKey
		var qrBenefitKey string

		if o.BenefitKey != nil {
			qrBenefitKey = *o.BenefitKey
		}
		qBenefitKey := qrBenefitKey
		if qBenefitKey != "" {

			if err := r.SetQueryParam("benefitKey", qBenefitKey); err != nil {
				return err
			}
		}
	}

	if o.BirthDate != nil {

		// query param birthDate
		var qrBirthDate string

		if o.BirthDate != nil {
			qrBirthDate = *o.BirthDate
		}
		qBirthDate := qrBirthDate
		if qBirthDate != "" {

			if err := r.SetQueryParam("birthDate", qBirthDate); err != nil {
				return err
			}
		}
	}

	if o.CaseMemberKey != nil {

		// query param caseMemberKey
		var qrCaseMemberKey string

		if o.CaseMemberKey != nil {
			qrCaseMemberKey = *o.CaseMemberKey
		}
		qCaseMemberKey := qrCaseMemberKey
		if qCaseMemberKey != "" {

			if err := r.SetQueryParam("caseMemberKey", qCaseMemberKey); err != nil {
				return err
			}
		}
	}

	if o.ClientID != nil {

		// query param clientId
		var qrClientID string

		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {

			if err := r.SetQueryParam("clientId", qClientID); err != nil {
				return err
			}
		}
	}

	if o.ContractState != nil {

		// query param contractState
		var qrContractState string

		if o.ContractState != nil {
			qrContractState = *o.ContractState
		}
		qContractState := qrContractState
		if qContractState != "" {

			if err := r.SetQueryParam("contractState", qContractState); err != nil {
				return err
			}
		}
	}

	if o.EffectiveMonth != nil {

		// query param effectiveMonth
		var qrEffectiveMonth string

		if o.EffectiveMonth != nil {
			qrEffectiveMonth = *o.EffectiveMonth
		}
		qEffectiveMonth := qrEffectiveMonth
		if qEffectiveMonth != "" {

			if err := r.SetQueryParam("effectiveMonth", qEffectiveMonth); err != nil {
				return err
			}
		}
	}

	if o.EffectiveYear != nil {

		// query param effectiveYear
		var qrEffectiveYear string

		if o.EffectiveYear != nil {
			qrEffectiveYear = *o.EffectiveYear
		}
		qEffectiveYear := qrEffectiveYear
		if qEffectiveYear != "" {

			if err := r.SetQueryParam("effectiveYear", qEffectiveYear); err != nil {
				return err
			}
		}
	}

	if o.FacilityID != nil {

		// query param facilityId
		var qrFacilityID string

		if o.FacilityID != nil {
			qrFacilityID = *o.FacilityID
		}
		qFacilityID := qrFacilityID
		if qFacilityID != "" {

			if err := r.SetQueryParam("facilityId", qFacilityID); err != nil {
				return err
			}
		}
	}

	if o.PerformReallocation != nil {

		// query param performReallocation
		var qrPerformReallocation bool

		if o.PerformReallocation != nil {
			qrPerformReallocation = *o.PerformReallocation
		}
		qPerformReallocation := swag.FormatBool(qrPerformReallocation)
		if qPerformReallocation != "" {

			if err := r.SetQueryParam("performReallocation", qPerformReallocation); err != nil {
				return err
			}
		}
	}

	if o.PlanCode != nil {

		// query param planCode
		var qrPlanCode string

		if o.PlanCode != nil {
			qrPlanCode = *o.PlanCode
		}
		qPlanCode := qrPlanCode
		if qPlanCode != "" {

			if err := r.SetQueryParam("planCode", qPlanCode); err != nil {
				return err
			}
		}
	}

	if o.PolicyNumber != nil {

		// query param policyNumber
		var qrPolicyNumber string

		if o.PolicyNumber != nil {
			qrPolicyNumber = *o.PolicyNumber
		}
		qPolicyNumber := qrPolicyNumber
		if qPolicyNumber != "" {

			if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}

	if o.SeriesCode != nil {

		// query param seriesCode
		var qrSeriesCode string

		if o.SeriesCode != nil {
			qrSeriesCode = *o.SeriesCode
		}
		qSeriesCode := qrSeriesCode
		if qSeriesCode != "" {

			if err := r.SetQueryParam("seriesCode", qSeriesCode); err != nil {
				return err
			}
		}
	}

	if o.VarianceFormat != nil {

		// query param varianceFormat
		var qrVarianceFormat string

		if o.VarianceFormat != nil {
			qrVarianceFormat = *o.VarianceFormat
		}
		qVarianceFormat := qrVarianceFormat
		if qVarianceFormat != "" {

			if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
				return err
			}
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
