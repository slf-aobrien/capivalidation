// Code generated by go-swagger; DO NOT EDIT.

package agency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateAccreditationUsingPUTReader is a Reader for the UpdateAccreditationUsingPUT structure.
type UpdateAccreditationUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAccreditationUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAccreditationUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateAccreditationUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAccreditationUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAccreditationUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAccreditationUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAccreditationUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAccreditationUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/agency/accreditation] updateAccreditationUsingPUT", response, response.Code())
	}
}

// NewUpdateAccreditationUsingPUTOK creates a UpdateAccreditationUsingPUTOK with default headers values
func NewUpdateAccreditationUsingPUTOK() *UpdateAccreditationUsingPUTOK {
	return &UpdateAccreditationUsingPUTOK{}
}

/*
UpdateAccreditationUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateAccreditationUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update accreditation using p u t o k response has a 2xx status code
func (o *UpdateAccreditationUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update accreditation using p u t o k response has a 3xx status code
func (o *UpdateAccreditationUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t o k response has a 4xx status code
func (o *UpdateAccreditationUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update accreditation using p u t o k response has a 5xx status code
func (o *UpdateAccreditationUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update accreditation using p u t o k response a status code equal to that given
func (o *UpdateAccreditationUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update accreditation using p u t o k response
func (o *UpdateAccreditationUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateAccreditationUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTOK %s", 200, payload)
}

func (o *UpdateAccreditationUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTOK %s", 200, payload)
}

func (o *UpdateAccreditationUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateAccreditationUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAccreditationUsingPUTCreated creates a UpdateAccreditationUsingPUTCreated with default headers values
func NewUpdateAccreditationUsingPUTCreated() *UpdateAccreditationUsingPUTCreated {
	return &UpdateAccreditationUsingPUTCreated{}
}

/*
UpdateAccreditationUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateAccreditationUsingPUTCreated struct {
}

// IsSuccess returns true when this update accreditation using p u t created response has a 2xx status code
func (o *UpdateAccreditationUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update accreditation using p u t created response has a 3xx status code
func (o *UpdateAccreditationUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t created response has a 4xx status code
func (o *UpdateAccreditationUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update accreditation using p u t created response has a 5xx status code
func (o *UpdateAccreditationUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update accreditation using p u t created response a status code equal to that given
func (o *UpdateAccreditationUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update accreditation using p u t created response
func (o *UpdateAccreditationUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateAccreditationUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTCreated", 201)
}

func (o *UpdateAccreditationUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTCreated", 201)
}

func (o *UpdateAccreditationUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAccreditationUsingPUTBadRequest creates a UpdateAccreditationUsingPUTBadRequest with default headers values
func NewUpdateAccreditationUsingPUTBadRequest() *UpdateAccreditationUsingPUTBadRequest {
	return &UpdateAccreditationUsingPUTBadRequest{}
}

/*
UpdateAccreditationUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAccreditationUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update accreditation using p u t bad request response has a 2xx status code
func (o *UpdateAccreditationUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update accreditation using p u t bad request response has a 3xx status code
func (o *UpdateAccreditationUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t bad request response has a 4xx status code
func (o *UpdateAccreditationUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update accreditation using p u t bad request response has a 5xx status code
func (o *UpdateAccreditationUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update accreditation using p u t bad request response a status code equal to that given
func (o *UpdateAccreditationUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update accreditation using p u t bad request response
func (o *UpdateAccreditationUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateAccreditationUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTBadRequest", 400)
}

func (o *UpdateAccreditationUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTBadRequest", 400)
}

func (o *UpdateAccreditationUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAccreditationUsingPUTUnauthorized creates a UpdateAccreditationUsingPUTUnauthorized with default headers values
func NewUpdateAccreditationUsingPUTUnauthorized() *UpdateAccreditationUsingPUTUnauthorized {
	return &UpdateAccreditationUsingPUTUnauthorized{}
}

/*
UpdateAccreditationUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAccreditationUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update accreditation using p u t unauthorized response has a 2xx status code
func (o *UpdateAccreditationUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update accreditation using p u t unauthorized response has a 3xx status code
func (o *UpdateAccreditationUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t unauthorized response has a 4xx status code
func (o *UpdateAccreditationUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update accreditation using p u t unauthorized response has a 5xx status code
func (o *UpdateAccreditationUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update accreditation using p u t unauthorized response a status code equal to that given
func (o *UpdateAccreditationUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update accreditation using p u t unauthorized response
func (o *UpdateAccreditationUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateAccreditationUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTUnauthorized", 401)
}

func (o *UpdateAccreditationUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTUnauthorized", 401)
}

func (o *UpdateAccreditationUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAccreditationUsingPUTForbidden creates a UpdateAccreditationUsingPUTForbidden with default headers values
func NewUpdateAccreditationUsingPUTForbidden() *UpdateAccreditationUsingPUTForbidden {
	return &UpdateAccreditationUsingPUTForbidden{}
}

/*
UpdateAccreditationUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAccreditationUsingPUTForbidden struct {
}

// IsSuccess returns true when this update accreditation using p u t forbidden response has a 2xx status code
func (o *UpdateAccreditationUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update accreditation using p u t forbidden response has a 3xx status code
func (o *UpdateAccreditationUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t forbidden response has a 4xx status code
func (o *UpdateAccreditationUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update accreditation using p u t forbidden response has a 5xx status code
func (o *UpdateAccreditationUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update accreditation using p u t forbidden response a status code equal to that given
func (o *UpdateAccreditationUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update accreditation using p u t forbidden response
func (o *UpdateAccreditationUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateAccreditationUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTForbidden", 403)
}

func (o *UpdateAccreditationUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTForbidden", 403)
}

func (o *UpdateAccreditationUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAccreditationUsingPUTNotFound creates a UpdateAccreditationUsingPUTNotFound with default headers values
func NewUpdateAccreditationUsingPUTNotFound() *UpdateAccreditationUsingPUTNotFound {
	return &UpdateAccreditationUsingPUTNotFound{}
}

/*
UpdateAccreditationUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAccreditationUsingPUTNotFound struct {
}

// IsSuccess returns true when this update accreditation using p u t not found response has a 2xx status code
func (o *UpdateAccreditationUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update accreditation using p u t not found response has a 3xx status code
func (o *UpdateAccreditationUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t not found response has a 4xx status code
func (o *UpdateAccreditationUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update accreditation using p u t not found response has a 5xx status code
func (o *UpdateAccreditationUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update accreditation using p u t not found response a status code equal to that given
func (o *UpdateAccreditationUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update accreditation using p u t not found response
func (o *UpdateAccreditationUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateAccreditationUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTNotFound", 404)
}

func (o *UpdateAccreditationUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTNotFound", 404)
}

func (o *UpdateAccreditationUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAccreditationUsingPUTInternalServerError creates a UpdateAccreditationUsingPUTInternalServerError with default headers values
func NewUpdateAccreditationUsingPUTInternalServerError() *UpdateAccreditationUsingPUTInternalServerError {
	return &UpdateAccreditationUsingPUTInternalServerError{}
}

/*
UpdateAccreditationUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateAccreditationUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update accreditation using p u t internal server error response has a 2xx status code
func (o *UpdateAccreditationUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update accreditation using p u t internal server error response has a 3xx status code
func (o *UpdateAccreditationUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update accreditation using p u t internal server error response has a 4xx status code
func (o *UpdateAccreditationUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update accreditation using p u t internal server error response has a 5xx status code
func (o *UpdateAccreditationUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update accreditation using p u t internal server error response a status code equal to that given
func (o *UpdateAccreditationUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update accreditation using p u t internal server error response
func (o *UpdateAccreditationUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateAccreditationUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTInternalServerError", 500)
}

func (o *UpdateAccreditationUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/agency/accreditation][%d] updateAccreditationUsingPUTInternalServerError", 500)
}

func (o *UpdateAccreditationUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
