// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RiskEnhancedEligibilityTranchDTO RiskEnhancedEligibilityTranchDTO
//
// swagger:model RiskEnhancedEligibilityTranchDTO
type RiskEnhancedEligibilityTranchDTO struct {

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// effective date rule
	EffectiveDateRule string `json:"effectiveDateRule,omitempty"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// grandfather code
	GrandfatherCode string `json:"grandfatherCode,omitempty"`

	// issue type
	IssueType string `json:"issueType,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// maximum entrant age
	MaximumEntrantAge string `json:"maximumEntrantAge,omitempty"`

	// minimum entrant age
	MinimumEntrantAge string `json:"minimumEntrantAge,omitempty"`

	// minimum service period
	MinimumServicePeriod string `json:"minimumServicePeriod,omitempty"`

	// recalculation code
	RecalculationCode string `json:"recalculationCode,omitempty"`

	// relationship type
	RelationshipType string `json:"relationshipType,omitempty"`

	// service definition
	ServiceDefinition string `json:"serviceDefinition,omitempty"`
}

// Validate validates this risk enhanced eligibility tranch d t o
func (m *RiskEnhancedEligibilityTranchDTO) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this risk enhanced eligibility tranch d t o based on context it is used
func (m *RiskEnhancedEligibilityTranchDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RiskEnhancedEligibilityTranchDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskEnhancedEligibilityTranchDTO) UnmarshalBinary(b []byte) error {
	var res RiskEnhancedEligibilityTranchDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
