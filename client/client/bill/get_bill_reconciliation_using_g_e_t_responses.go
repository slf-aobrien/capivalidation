// Code generated by go-swagger; DO NOT EDIT.

package bill

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetBillReconciliationUsingGETReader is a Reader for the GetBillReconciliationUsingGET structure.
type GetBillReconciliationUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBillReconciliationUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBillReconciliationUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBillReconciliationUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBillReconciliationUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBillReconciliationUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBillReconciliationUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBillReconciliationUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/bill/reconciliation] getBillReconciliationUsingGET", response, response.Code())
	}
}

// NewGetBillReconciliationUsingGETOK creates a GetBillReconciliationUsingGETOK with default headers values
func NewGetBillReconciliationUsingGETOK() *GetBillReconciliationUsingGETOK {
	return &GetBillReconciliationUsingGETOK{}
}

/*
GetBillReconciliationUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetBillReconciliationUsingGETOK struct {
	Payload *models.ResponseWrapperListBillReconciliationDTO
}

// IsSuccess returns true when this get bill reconciliation using g e t o k response has a 2xx status code
func (o *GetBillReconciliationUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get bill reconciliation using g e t o k response has a 3xx status code
func (o *GetBillReconciliationUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bill reconciliation using g e t o k response has a 4xx status code
func (o *GetBillReconciliationUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bill reconciliation using g e t o k response has a 5xx status code
func (o *GetBillReconciliationUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get bill reconciliation using g e t o k response a status code equal to that given
func (o *GetBillReconciliationUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get bill reconciliation using g e t o k response
func (o *GetBillReconciliationUsingGETOK) Code() int {
	return 200
}

func (o *GetBillReconciliationUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETOK %s", 200, payload)
}

func (o *GetBillReconciliationUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETOK %s", 200, payload)
}

func (o *GetBillReconciliationUsingGETOK) GetPayload() *models.ResponseWrapperListBillReconciliationDTO {
	return o.Payload
}

func (o *GetBillReconciliationUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListBillReconciliationDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBillReconciliationUsingGETBadRequest creates a GetBillReconciliationUsingGETBadRequest with default headers values
func NewGetBillReconciliationUsingGETBadRequest() *GetBillReconciliationUsingGETBadRequest {
	return &GetBillReconciliationUsingGETBadRequest{}
}

/*
GetBillReconciliationUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetBillReconciliationUsingGETBadRequest struct {
}

// IsSuccess returns true when this get bill reconciliation using g e t bad request response has a 2xx status code
func (o *GetBillReconciliationUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bill reconciliation using g e t bad request response has a 3xx status code
func (o *GetBillReconciliationUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bill reconciliation using g e t bad request response has a 4xx status code
func (o *GetBillReconciliationUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bill reconciliation using g e t bad request response has a 5xx status code
func (o *GetBillReconciliationUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get bill reconciliation using g e t bad request response a status code equal to that given
func (o *GetBillReconciliationUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get bill reconciliation using g e t bad request response
func (o *GetBillReconciliationUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetBillReconciliationUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETBadRequest", 400)
}

func (o *GetBillReconciliationUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETBadRequest", 400)
}

func (o *GetBillReconciliationUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBillReconciliationUsingGETUnauthorized creates a GetBillReconciliationUsingGETUnauthorized with default headers values
func NewGetBillReconciliationUsingGETUnauthorized() *GetBillReconciliationUsingGETUnauthorized {
	return &GetBillReconciliationUsingGETUnauthorized{}
}

/*
GetBillReconciliationUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBillReconciliationUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get bill reconciliation using g e t unauthorized response has a 2xx status code
func (o *GetBillReconciliationUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bill reconciliation using g e t unauthorized response has a 3xx status code
func (o *GetBillReconciliationUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bill reconciliation using g e t unauthorized response has a 4xx status code
func (o *GetBillReconciliationUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bill reconciliation using g e t unauthorized response has a 5xx status code
func (o *GetBillReconciliationUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get bill reconciliation using g e t unauthorized response a status code equal to that given
func (o *GetBillReconciliationUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get bill reconciliation using g e t unauthorized response
func (o *GetBillReconciliationUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetBillReconciliationUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETUnauthorized", 401)
}

func (o *GetBillReconciliationUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETUnauthorized", 401)
}

func (o *GetBillReconciliationUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBillReconciliationUsingGETForbidden creates a GetBillReconciliationUsingGETForbidden with default headers values
func NewGetBillReconciliationUsingGETForbidden() *GetBillReconciliationUsingGETForbidden {
	return &GetBillReconciliationUsingGETForbidden{}
}

/*
GetBillReconciliationUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBillReconciliationUsingGETForbidden struct {
}

// IsSuccess returns true when this get bill reconciliation using g e t forbidden response has a 2xx status code
func (o *GetBillReconciliationUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bill reconciliation using g e t forbidden response has a 3xx status code
func (o *GetBillReconciliationUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bill reconciliation using g e t forbidden response has a 4xx status code
func (o *GetBillReconciliationUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bill reconciliation using g e t forbidden response has a 5xx status code
func (o *GetBillReconciliationUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get bill reconciliation using g e t forbidden response a status code equal to that given
func (o *GetBillReconciliationUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get bill reconciliation using g e t forbidden response
func (o *GetBillReconciliationUsingGETForbidden) Code() int {
	return 403
}

func (o *GetBillReconciliationUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETForbidden", 403)
}

func (o *GetBillReconciliationUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETForbidden", 403)
}

func (o *GetBillReconciliationUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBillReconciliationUsingGETNotFound creates a GetBillReconciliationUsingGETNotFound with default headers values
func NewGetBillReconciliationUsingGETNotFound() *GetBillReconciliationUsingGETNotFound {
	return &GetBillReconciliationUsingGETNotFound{}
}

/*
GetBillReconciliationUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetBillReconciliationUsingGETNotFound struct {
}

// IsSuccess returns true when this get bill reconciliation using g e t not found response has a 2xx status code
func (o *GetBillReconciliationUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bill reconciliation using g e t not found response has a 3xx status code
func (o *GetBillReconciliationUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bill reconciliation using g e t not found response has a 4xx status code
func (o *GetBillReconciliationUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get bill reconciliation using g e t not found response has a 5xx status code
func (o *GetBillReconciliationUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get bill reconciliation using g e t not found response a status code equal to that given
func (o *GetBillReconciliationUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get bill reconciliation using g e t not found response
func (o *GetBillReconciliationUsingGETNotFound) Code() int {
	return 404
}

func (o *GetBillReconciliationUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETNotFound", 404)
}

func (o *GetBillReconciliationUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETNotFound", 404)
}

func (o *GetBillReconciliationUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBillReconciliationUsingGETInternalServerError creates a GetBillReconciliationUsingGETInternalServerError with default headers values
func NewGetBillReconciliationUsingGETInternalServerError() *GetBillReconciliationUsingGETInternalServerError {
	return &GetBillReconciliationUsingGETInternalServerError{}
}

/*
GetBillReconciliationUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetBillReconciliationUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get bill reconciliation using g e t internal server error response has a 2xx status code
func (o *GetBillReconciliationUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get bill reconciliation using g e t internal server error response has a 3xx status code
func (o *GetBillReconciliationUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get bill reconciliation using g e t internal server error response has a 4xx status code
func (o *GetBillReconciliationUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get bill reconciliation using g e t internal server error response has a 5xx status code
func (o *GetBillReconciliationUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get bill reconciliation using g e t internal server error response a status code equal to that given
func (o *GetBillReconciliationUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get bill reconciliation using g e t internal server error response
func (o *GetBillReconciliationUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetBillReconciliationUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETInternalServerError", 500)
}

func (o *GetBillReconciliationUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/reconciliation][%d] getBillReconciliationUsingGETInternalServerError", 500)
}

func (o *GetBillReconciliationUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
