// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchPolicyUsingGETParams creates a new SearchPolicyUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchPolicyUsingGETParams() *SearchPolicyUsingGETParams {
	return &SearchPolicyUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchPolicyUsingGETParamsWithTimeout creates a new SearchPolicyUsingGETParams object
// with the ability to set a timeout on a request.
func NewSearchPolicyUsingGETParamsWithTimeout(timeout time.Duration) *SearchPolicyUsingGETParams {
	return &SearchPolicyUsingGETParams{
		timeout: timeout,
	}
}

// NewSearchPolicyUsingGETParamsWithContext creates a new SearchPolicyUsingGETParams object
// with the ability to set a context for a request.
func NewSearchPolicyUsingGETParamsWithContext(ctx context.Context) *SearchPolicyUsingGETParams {
	return &SearchPolicyUsingGETParams{
		Context: ctx,
	}
}

// NewSearchPolicyUsingGETParamsWithHTTPClient creates a new SearchPolicyUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchPolicyUsingGETParamsWithHTTPClient(client *http.Client) *SearchPolicyUsingGETParams {
	return &SearchPolicyUsingGETParams{
		HTTPClient: client,
	}
}

/*
SearchPolicyUsingGETParams contains all the parameters to send to the API endpoint

	for the search policy using g e t operation.

	Typically these are written to a http.Request.
*/
type SearchPolicyUsingGETParams struct {

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	/* Flag.

	   flag
	*/
	Flag *string

	/* SearchString.

	   searchString
	*/
	SearchString *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search policy using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPolicyUsingGETParams) WithDefaults() *SearchPolicyUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search policy using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPolicyUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) WithTimeout(timeout time.Duration) *SearchPolicyUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) WithContext(ctx context.Context) *SearchPolicyUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) WithHTTPClient(client *http.Client) *SearchPolicyUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffectiveDate adds the effectiveDate to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) WithEffectiveDate(effectiveDate *string) *SearchPolicyUsingGETParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithFlag adds the flag to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) WithFlag(flag *string) *SearchPolicyUsingGETParams {
	o.SetFlag(flag)
	return o
}

// SetFlag adds the flag to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) SetFlag(flag *string) {
	o.Flag = flag
}

// WithSearchString adds the searchString to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) WithSearchString(searchString *string) *SearchPolicyUsingGETParams {
	o.SetSearchString(searchString)
	return o
}

// SetSearchString adds the searchString to the search policy using g e t params
func (o *SearchPolicyUsingGETParams) SetSearchString(searchString *string) {
	o.SearchString = searchString
}

// WriteToRequest writes these params to a swagger request
func (o *SearchPolicyUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.Flag != nil {

		// query param flag
		var qrFlag string

		if o.Flag != nil {
			qrFlag = *o.Flag
		}
		qFlag := qrFlag
		if qFlag != "" {

			if err := r.SetQueryParam("flag", qFlag); err != nil {
				return err
			}
		}
	}

	if o.SearchString != nil {

		// query param searchString
		var qrSearchString string

		if o.SearchString != nil {
			qrSearchString = *o.SearchString
		}
		qSearchString := qrSearchString
		if qSearchString != "" {

			if err := r.SetQueryParam("searchString", qSearchString); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
