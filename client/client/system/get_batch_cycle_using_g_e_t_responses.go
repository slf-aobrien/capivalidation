// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetBatchCycleUsingGETReader is a Reader for the GetBatchCycleUsingGET structure.
type GetBatchCycleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBatchCycleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBatchCycleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetBatchCycleUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetBatchCycleUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetBatchCycleUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetBatchCycleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBatchCycleUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/system/batchCycle] getBatchCycleUsingGET", response, response.Code())
	}
}

// NewGetBatchCycleUsingGETOK creates a GetBatchCycleUsingGETOK with default headers values
func NewGetBatchCycleUsingGETOK() *GetBatchCycleUsingGETOK {
	return &GetBatchCycleUsingGETOK{}
}

/*
GetBatchCycleUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetBatchCycleUsingGETOK struct {
	Payload *models.ResponseWrapperBatchCycleDTO
}

// IsSuccess returns true when this get batch cycle using g e t o k response has a 2xx status code
func (o *GetBatchCycleUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get batch cycle using g e t o k response has a 3xx status code
func (o *GetBatchCycleUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch cycle using g e t o k response has a 4xx status code
func (o *GetBatchCycleUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get batch cycle using g e t o k response has a 5xx status code
func (o *GetBatchCycleUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch cycle using g e t o k response a status code equal to that given
func (o *GetBatchCycleUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get batch cycle using g e t o k response
func (o *GetBatchCycleUsingGETOK) Code() int {
	return 200
}

func (o *GetBatchCycleUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETOK %s", 200, payload)
}

func (o *GetBatchCycleUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETOK %s", 200, payload)
}

func (o *GetBatchCycleUsingGETOK) GetPayload() *models.ResponseWrapperBatchCycleDTO {
	return o.Payload
}

func (o *GetBatchCycleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBatchCycleDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchCycleUsingGETBadRequest creates a GetBatchCycleUsingGETBadRequest with default headers values
func NewGetBatchCycleUsingGETBadRequest() *GetBatchCycleUsingGETBadRequest {
	return &GetBatchCycleUsingGETBadRequest{}
}

/*
GetBatchCycleUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetBatchCycleUsingGETBadRequest struct {
}

// IsSuccess returns true when this get batch cycle using g e t bad request response has a 2xx status code
func (o *GetBatchCycleUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch cycle using g e t bad request response has a 3xx status code
func (o *GetBatchCycleUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch cycle using g e t bad request response has a 4xx status code
func (o *GetBatchCycleUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batch cycle using g e t bad request response has a 5xx status code
func (o *GetBatchCycleUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch cycle using g e t bad request response a status code equal to that given
func (o *GetBatchCycleUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get batch cycle using g e t bad request response
func (o *GetBatchCycleUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetBatchCycleUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETBadRequest", 400)
}

func (o *GetBatchCycleUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETBadRequest", 400)
}

func (o *GetBatchCycleUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBatchCycleUsingGETUnauthorized creates a GetBatchCycleUsingGETUnauthorized with default headers values
func NewGetBatchCycleUsingGETUnauthorized() *GetBatchCycleUsingGETUnauthorized {
	return &GetBatchCycleUsingGETUnauthorized{}
}

/*
GetBatchCycleUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetBatchCycleUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get batch cycle using g e t unauthorized response has a 2xx status code
func (o *GetBatchCycleUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch cycle using g e t unauthorized response has a 3xx status code
func (o *GetBatchCycleUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch cycle using g e t unauthorized response has a 4xx status code
func (o *GetBatchCycleUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batch cycle using g e t unauthorized response has a 5xx status code
func (o *GetBatchCycleUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch cycle using g e t unauthorized response a status code equal to that given
func (o *GetBatchCycleUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get batch cycle using g e t unauthorized response
func (o *GetBatchCycleUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetBatchCycleUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETUnauthorized", 401)
}

func (o *GetBatchCycleUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETUnauthorized", 401)
}

func (o *GetBatchCycleUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBatchCycleUsingGETForbidden creates a GetBatchCycleUsingGETForbidden with default headers values
func NewGetBatchCycleUsingGETForbidden() *GetBatchCycleUsingGETForbidden {
	return &GetBatchCycleUsingGETForbidden{}
}

/*
GetBatchCycleUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetBatchCycleUsingGETForbidden struct {
}

// IsSuccess returns true when this get batch cycle using g e t forbidden response has a 2xx status code
func (o *GetBatchCycleUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch cycle using g e t forbidden response has a 3xx status code
func (o *GetBatchCycleUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch cycle using g e t forbidden response has a 4xx status code
func (o *GetBatchCycleUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batch cycle using g e t forbidden response has a 5xx status code
func (o *GetBatchCycleUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch cycle using g e t forbidden response a status code equal to that given
func (o *GetBatchCycleUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get batch cycle using g e t forbidden response
func (o *GetBatchCycleUsingGETForbidden) Code() int {
	return 403
}

func (o *GetBatchCycleUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETForbidden", 403)
}

func (o *GetBatchCycleUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETForbidden", 403)
}

func (o *GetBatchCycleUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBatchCycleUsingGETNotFound creates a GetBatchCycleUsingGETNotFound with default headers values
func NewGetBatchCycleUsingGETNotFound() *GetBatchCycleUsingGETNotFound {
	return &GetBatchCycleUsingGETNotFound{}
}

/*
GetBatchCycleUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetBatchCycleUsingGETNotFound struct {
}

// IsSuccess returns true when this get batch cycle using g e t not found response has a 2xx status code
func (o *GetBatchCycleUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch cycle using g e t not found response has a 3xx status code
func (o *GetBatchCycleUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch cycle using g e t not found response has a 4xx status code
func (o *GetBatchCycleUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get batch cycle using g e t not found response has a 5xx status code
func (o *GetBatchCycleUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get batch cycle using g e t not found response a status code equal to that given
func (o *GetBatchCycleUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get batch cycle using g e t not found response
func (o *GetBatchCycleUsingGETNotFound) Code() int {
	return 404
}

func (o *GetBatchCycleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETNotFound", 404)
}

func (o *GetBatchCycleUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETNotFound", 404)
}

func (o *GetBatchCycleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetBatchCycleUsingGETInternalServerError creates a GetBatchCycleUsingGETInternalServerError with default headers values
func NewGetBatchCycleUsingGETInternalServerError() *GetBatchCycleUsingGETInternalServerError {
	return &GetBatchCycleUsingGETInternalServerError{}
}

/*
GetBatchCycleUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetBatchCycleUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get batch cycle using g e t internal server error response has a 2xx status code
func (o *GetBatchCycleUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get batch cycle using g e t internal server error response has a 3xx status code
func (o *GetBatchCycleUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get batch cycle using g e t internal server error response has a 4xx status code
func (o *GetBatchCycleUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get batch cycle using g e t internal server error response has a 5xx status code
func (o *GetBatchCycleUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get batch cycle using g e t internal server error response a status code equal to that given
func (o *GetBatchCycleUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get batch cycle using g e t internal server error response
func (o *GetBatchCycleUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetBatchCycleUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETInternalServerError", 500)
}

func (o *GetBatchCycleUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/batchCycle][%d] getBatchCycleUsingGETInternalServerError", 500)
}

func (o *GetBatchCycleUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
