// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// InsertPayrollAliasUsingGETReader is a Reader for the InsertPayrollAliasUsingGET structure.
type InsertPayrollAliasUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPayrollAliasUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPayrollAliasUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPayrollAliasUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPayrollAliasUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInsertPayrollAliasUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertPayrollAliasUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInsertPayrollAliasUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/insertPayrollAlias] insertPayrollAliasUsingGET", response, response.Code())
	}
}

// NewInsertPayrollAliasUsingGETOK creates a InsertPayrollAliasUsingGETOK with default headers values
func NewInsertPayrollAliasUsingGETOK() *InsertPayrollAliasUsingGETOK {
	return &InsertPayrollAliasUsingGETOK{}
}

/*
InsertPayrollAliasUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type InsertPayrollAliasUsingGETOK struct {
	Payload *models.ResponseWrapperVoid
}

// IsSuccess returns true when this insert payroll alias using g e t o k response has a 2xx status code
func (o *InsertPayrollAliasUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert payroll alias using g e t o k response has a 3xx status code
func (o *InsertPayrollAliasUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert payroll alias using g e t o k response has a 4xx status code
func (o *InsertPayrollAliasUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert payroll alias using g e t o k response has a 5xx status code
func (o *InsertPayrollAliasUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert payroll alias using g e t o k response a status code equal to that given
func (o *InsertPayrollAliasUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert payroll alias using g e t o k response
func (o *InsertPayrollAliasUsingGETOK) Code() int {
	return 200
}

func (o *InsertPayrollAliasUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETOK %s", 200, payload)
}

func (o *InsertPayrollAliasUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETOK %s", 200, payload)
}

func (o *InsertPayrollAliasUsingGETOK) GetPayload() *models.ResponseWrapperVoid {
	return o.Payload
}

func (o *InsertPayrollAliasUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPayrollAliasUsingGETBadRequest creates a InsertPayrollAliasUsingGETBadRequest with default headers values
func NewInsertPayrollAliasUsingGETBadRequest() *InsertPayrollAliasUsingGETBadRequest {
	return &InsertPayrollAliasUsingGETBadRequest{}
}

/*
InsertPayrollAliasUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InsertPayrollAliasUsingGETBadRequest struct {
}

// IsSuccess returns true when this insert payroll alias using g e t bad request response has a 2xx status code
func (o *InsertPayrollAliasUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert payroll alias using g e t bad request response has a 3xx status code
func (o *InsertPayrollAliasUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert payroll alias using g e t bad request response has a 4xx status code
func (o *InsertPayrollAliasUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert payroll alias using g e t bad request response has a 5xx status code
func (o *InsertPayrollAliasUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert payroll alias using g e t bad request response a status code equal to that given
func (o *InsertPayrollAliasUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert payroll alias using g e t bad request response
func (o *InsertPayrollAliasUsingGETBadRequest) Code() int {
	return 400
}

func (o *InsertPayrollAliasUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETBadRequest", 400)
}

func (o *InsertPayrollAliasUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETBadRequest", 400)
}

func (o *InsertPayrollAliasUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPayrollAliasUsingGETUnauthorized creates a InsertPayrollAliasUsingGETUnauthorized with default headers values
func NewInsertPayrollAliasUsingGETUnauthorized() *InsertPayrollAliasUsingGETUnauthorized {
	return &InsertPayrollAliasUsingGETUnauthorized{}
}

/*
InsertPayrollAliasUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InsertPayrollAliasUsingGETUnauthorized struct {
}

// IsSuccess returns true when this insert payroll alias using g e t unauthorized response has a 2xx status code
func (o *InsertPayrollAliasUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert payroll alias using g e t unauthorized response has a 3xx status code
func (o *InsertPayrollAliasUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert payroll alias using g e t unauthorized response has a 4xx status code
func (o *InsertPayrollAliasUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert payroll alias using g e t unauthorized response has a 5xx status code
func (o *InsertPayrollAliasUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert payroll alias using g e t unauthorized response a status code equal to that given
func (o *InsertPayrollAliasUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert payroll alias using g e t unauthorized response
func (o *InsertPayrollAliasUsingGETUnauthorized) Code() int {
	return 401
}

func (o *InsertPayrollAliasUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETUnauthorized", 401)
}

func (o *InsertPayrollAliasUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETUnauthorized", 401)
}

func (o *InsertPayrollAliasUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPayrollAliasUsingGETForbidden creates a InsertPayrollAliasUsingGETForbidden with default headers values
func NewInsertPayrollAliasUsingGETForbidden() *InsertPayrollAliasUsingGETForbidden {
	return &InsertPayrollAliasUsingGETForbidden{}
}

/*
InsertPayrollAliasUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InsertPayrollAliasUsingGETForbidden struct {
}

// IsSuccess returns true when this insert payroll alias using g e t forbidden response has a 2xx status code
func (o *InsertPayrollAliasUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert payroll alias using g e t forbidden response has a 3xx status code
func (o *InsertPayrollAliasUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert payroll alias using g e t forbidden response has a 4xx status code
func (o *InsertPayrollAliasUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert payroll alias using g e t forbidden response has a 5xx status code
func (o *InsertPayrollAliasUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this insert payroll alias using g e t forbidden response a status code equal to that given
func (o *InsertPayrollAliasUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the insert payroll alias using g e t forbidden response
func (o *InsertPayrollAliasUsingGETForbidden) Code() int {
	return 403
}

func (o *InsertPayrollAliasUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETForbidden", 403)
}

func (o *InsertPayrollAliasUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETForbidden", 403)
}

func (o *InsertPayrollAliasUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPayrollAliasUsingGETNotFound creates a InsertPayrollAliasUsingGETNotFound with default headers values
func NewInsertPayrollAliasUsingGETNotFound() *InsertPayrollAliasUsingGETNotFound {
	return &InsertPayrollAliasUsingGETNotFound{}
}

/*
InsertPayrollAliasUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type InsertPayrollAliasUsingGETNotFound struct {
}

// IsSuccess returns true when this insert payroll alias using g e t not found response has a 2xx status code
func (o *InsertPayrollAliasUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert payroll alias using g e t not found response has a 3xx status code
func (o *InsertPayrollAliasUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert payroll alias using g e t not found response has a 4xx status code
func (o *InsertPayrollAliasUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert payroll alias using g e t not found response has a 5xx status code
func (o *InsertPayrollAliasUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert payroll alias using g e t not found response a status code equal to that given
func (o *InsertPayrollAliasUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert payroll alias using g e t not found response
func (o *InsertPayrollAliasUsingGETNotFound) Code() int {
	return 404
}

func (o *InsertPayrollAliasUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETNotFound", 404)
}

func (o *InsertPayrollAliasUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETNotFound", 404)
}

func (o *InsertPayrollAliasUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPayrollAliasUsingGETInternalServerError creates a InsertPayrollAliasUsingGETInternalServerError with default headers values
func NewInsertPayrollAliasUsingGETInternalServerError() *InsertPayrollAliasUsingGETInternalServerError {
	return &InsertPayrollAliasUsingGETInternalServerError{}
}

/*
InsertPayrollAliasUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type InsertPayrollAliasUsingGETInternalServerError struct {
}

// IsSuccess returns true when this insert payroll alias using g e t internal server error response has a 2xx status code
func (o *InsertPayrollAliasUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert payroll alias using g e t internal server error response has a 3xx status code
func (o *InsertPayrollAliasUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert payroll alias using g e t internal server error response has a 4xx status code
func (o *InsertPayrollAliasUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert payroll alias using g e t internal server error response has a 5xx status code
func (o *InsertPayrollAliasUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this insert payroll alias using g e t internal server error response a status code equal to that given
func (o *InsertPayrollAliasUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the insert payroll alias using g e t internal server error response
func (o *InsertPayrollAliasUsingGETInternalServerError) Code() int {
	return 500
}

func (o *InsertPayrollAliasUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETInternalServerError", 500)
}

func (o *InsertPayrollAliasUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/insertPayrollAlias][%d] insertPayrollAliasUsingGETInternalServerError", 500)
}

func (o *InsertPayrollAliasUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
