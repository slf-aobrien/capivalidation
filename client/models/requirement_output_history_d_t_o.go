// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RequirementOutputHistoryDTO RequirementOutputHistoryDTO
//
// swagger:model RequirementOutputHistoryDTO
type RequirementOutputHistoryDTO struct {

	// address
	Address *AddressDTO `json:"address,omitempty"`

	// original requester
	OriginalRequester string `json:"originalRequester,omitempty"`

	// received date
	ReceivedDate string `json:"receivedDate,omitempty"`

	// request date
	RequestDate string `json:"requestDate,omitempty"`

	// requirement number
	RequirementNumber string `json:"requirementNumber,omitempty"`

	// rqmt def description
	RqmtDefDescription string `json:"rqmtDefDescription,omitempty"`

	// rqmt def type code
	RqmtDefTypeCode string `json:"rqmtDefTypeCode,omitempty"`

	// rqmt def type description
	RqmtDefTypeDescription string `json:"rqmtDefTypeDescription,omitempty"`

	// rqmt def undw type code
	RqmtDefUndwTypeCode string `json:"rqmtDefUndwTypeCode,omitempty"`

	// rqmt def undw type description
	RqmtDefUndwTypeDescription string `json:"rqmtDefUndwTypeDescription,omitempty"`

	// status code
	StatusCode string `json:"statusCode,omitempty"`

	// status description
	StatusDescription string `json:"statusDescription,omitempty"`
}

// Validate validates this requirement output history d t o
func (m *RequirementOutputHistoryDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequirementOutputHistoryDTO) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this requirement output history d t o based on the context it is used
func (m *RequirementOutputHistoryDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RequirementOutputHistoryDTO) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RequirementOutputHistoryDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RequirementOutputHistoryDTO) UnmarshalBinary(b []byte) error {
	var res RequirementOutputHistoryDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
