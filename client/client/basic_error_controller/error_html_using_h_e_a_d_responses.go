// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ErrorHTMLUsingHEADReader is a Reader for the ErrorHTMLUsingHEAD structure.
type ErrorHTMLUsingHEADReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorHTMLUsingHEADReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewErrorHTMLUsingHEADOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewErrorHTMLUsingHEADNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewErrorHTMLUsingHEADUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewErrorHTMLUsingHEADForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[HEAD /compassintegrationapp/error] errorHtmlUsingHEAD", response, response.Code())
	}
}

// NewErrorHTMLUsingHEADOK creates a ErrorHTMLUsingHEADOK with default headers values
func NewErrorHTMLUsingHEADOK() *ErrorHTMLUsingHEADOK {
	return &ErrorHTMLUsingHEADOK{}
}

/*
ErrorHTMLUsingHEADOK describes a response with status code 200, with default header values.

OK
*/
type ErrorHTMLUsingHEADOK struct {
	Payload *models.ModelAndView
}

// IsSuccess returns true when this error Html using h e a d o k response has a 2xx status code
func (o *ErrorHTMLUsingHEADOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this error Html using h e a d o k response has a 3xx status code
func (o *ErrorHTMLUsingHEADOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using h e a d o k response has a 4xx status code
func (o *ErrorHTMLUsingHEADOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this error Html using h e a d o k response has a 5xx status code
func (o *ErrorHTMLUsingHEADOK) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using h e a d o k response a status code equal to that given
func (o *ErrorHTMLUsingHEADOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the error Html using h e a d o k response
func (o *ErrorHTMLUsingHEADOK) Code() int {
	return 200
}

func (o *ErrorHTMLUsingHEADOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADOK %s", 200, payload)
}

func (o *ErrorHTMLUsingHEADOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADOK %s", 200, payload)
}

func (o *ErrorHTMLUsingHEADOK) GetPayload() *models.ModelAndView {
	return o.Payload
}

func (o *ErrorHTMLUsingHEADOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelAndView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorHTMLUsingHEADNoContent creates a ErrorHTMLUsingHEADNoContent with default headers values
func NewErrorHTMLUsingHEADNoContent() *ErrorHTMLUsingHEADNoContent {
	return &ErrorHTMLUsingHEADNoContent{}
}

/*
ErrorHTMLUsingHEADNoContent describes a response with status code 204, with default header values.

No Content
*/
type ErrorHTMLUsingHEADNoContent struct {
}

// IsSuccess returns true when this error Html using h e a d no content response has a 2xx status code
func (o *ErrorHTMLUsingHEADNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this error Html using h e a d no content response has a 3xx status code
func (o *ErrorHTMLUsingHEADNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using h e a d no content response has a 4xx status code
func (o *ErrorHTMLUsingHEADNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this error Html using h e a d no content response has a 5xx status code
func (o *ErrorHTMLUsingHEADNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using h e a d no content response a status code equal to that given
func (o *ErrorHTMLUsingHEADNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the error Html using h e a d no content response
func (o *ErrorHTMLUsingHEADNoContent) Code() int {
	return 204
}

func (o *ErrorHTMLUsingHEADNoContent) Error() string {
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADNoContent", 204)
}

func (o *ErrorHTMLUsingHEADNoContent) String() string {
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADNoContent", 204)
}

func (o *ErrorHTMLUsingHEADNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingHEADUnauthorized creates a ErrorHTMLUsingHEADUnauthorized with default headers values
func NewErrorHTMLUsingHEADUnauthorized() *ErrorHTMLUsingHEADUnauthorized {
	return &ErrorHTMLUsingHEADUnauthorized{}
}

/*
ErrorHTMLUsingHEADUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ErrorHTMLUsingHEADUnauthorized struct {
}

// IsSuccess returns true when this error Html using h e a d unauthorized response has a 2xx status code
func (o *ErrorHTMLUsingHEADUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this error Html using h e a d unauthorized response has a 3xx status code
func (o *ErrorHTMLUsingHEADUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using h e a d unauthorized response has a 4xx status code
func (o *ErrorHTMLUsingHEADUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this error Html using h e a d unauthorized response has a 5xx status code
func (o *ErrorHTMLUsingHEADUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using h e a d unauthorized response a status code equal to that given
func (o *ErrorHTMLUsingHEADUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the error Html using h e a d unauthorized response
func (o *ErrorHTMLUsingHEADUnauthorized) Code() int {
	return 401
}

func (o *ErrorHTMLUsingHEADUnauthorized) Error() string {
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADUnauthorized", 401)
}

func (o *ErrorHTMLUsingHEADUnauthorized) String() string {
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADUnauthorized", 401)
}

func (o *ErrorHTMLUsingHEADUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingHEADForbidden creates a ErrorHTMLUsingHEADForbidden with default headers values
func NewErrorHTMLUsingHEADForbidden() *ErrorHTMLUsingHEADForbidden {
	return &ErrorHTMLUsingHEADForbidden{}
}

/*
ErrorHTMLUsingHEADForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ErrorHTMLUsingHEADForbidden struct {
}

// IsSuccess returns true when this error Html using h e a d forbidden response has a 2xx status code
func (o *ErrorHTMLUsingHEADForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this error Html using h e a d forbidden response has a 3xx status code
func (o *ErrorHTMLUsingHEADForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using h e a d forbidden response has a 4xx status code
func (o *ErrorHTMLUsingHEADForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this error Html using h e a d forbidden response has a 5xx status code
func (o *ErrorHTMLUsingHEADForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using h e a d forbidden response a status code equal to that given
func (o *ErrorHTMLUsingHEADForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the error Html using h e a d forbidden response
func (o *ErrorHTMLUsingHEADForbidden) Code() int {
	return 403
}

func (o *ErrorHTMLUsingHEADForbidden) Error() string {
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADForbidden", 403)
}

func (o *ErrorHTMLUsingHEADForbidden) String() string {
	return fmt.Sprintf("[HEAD /compassintegrationapp/error][%d] errorHtmlUsingHEADForbidden", 403)
}

func (o *ErrorHTMLUsingHEADForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
