// Code generated by go-swagger; DO NOT EDIT.

package focus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateFacilityUsingPUT1Params creates a new UpdateFacilityUsingPUT1Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateFacilityUsingPUT1Params() *UpdateFacilityUsingPUT1Params {
	return &UpdateFacilityUsingPUT1Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateFacilityUsingPUT1ParamsWithTimeout creates a new UpdateFacilityUsingPUT1Params object
// with the ability to set a timeout on a request.
func NewUpdateFacilityUsingPUT1ParamsWithTimeout(timeout time.Duration) *UpdateFacilityUsingPUT1Params {
	return &UpdateFacilityUsingPUT1Params{
		timeout: timeout,
	}
}

// NewUpdateFacilityUsingPUT1ParamsWithContext creates a new UpdateFacilityUsingPUT1Params object
// with the ability to set a context for a request.
func NewUpdateFacilityUsingPUT1ParamsWithContext(ctx context.Context) *UpdateFacilityUsingPUT1Params {
	return &UpdateFacilityUsingPUT1Params{
		Context: ctx,
	}
}

// NewUpdateFacilityUsingPUT1ParamsWithHTTPClient creates a new UpdateFacilityUsingPUT1Params object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateFacilityUsingPUT1ParamsWithHTTPClient(client *http.Client) *UpdateFacilityUsingPUT1Params {
	return &UpdateFacilityUsingPUT1Params{
		HTTPClient: client,
	}
}

/*
UpdateFacilityUsingPUT1Params contains all the parameters to send to the API endpoint

	for the update facility using p u t 1 operation.

	Typically these are written to a http.Request.
*/
type UpdateFacilityUsingPUT1Params struct {

	/* AsdoStatusCode.

	   asdoStatusCode
	*/
	AsdoStatusCode string

	/* AsdoValidationResultCode.

	   asdoValidationResultCode
	*/
	AsdoValidationResultCode string

	/* BmrlTypeCode.

	   bmrlTypeCode
	*/
	BmrlTypeCode string

	/* BntpKey.

	   bntpKey
	*/
	BntpKey string

	/* CaseMemberKey.

	   caseMemberKey
	*/
	CaseMemberKey string

	/* CmrsKey.

	   cmrsKey
	*/
	CmrsKey *string

	/* DoctorKey.

	   doctorKey
	*/
	DoctorKey string

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update facility using p u t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateFacilityUsingPUT1Params) WithDefaults() *UpdateFacilityUsingPUT1Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update facility using p u t 1 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateFacilityUsingPUT1Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithTimeout(timeout time.Duration) *UpdateFacilityUsingPUT1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithContext(ctx context.Context) *UpdateFacilityUsingPUT1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithHTTPClient(client *http.Client) *UpdateFacilityUsingPUT1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsdoStatusCode adds the asdoStatusCode to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithAsdoStatusCode(asdoStatusCode string) *UpdateFacilityUsingPUT1Params {
	o.SetAsdoStatusCode(asdoStatusCode)
	return o
}

// SetAsdoStatusCode adds the asdoStatusCode to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetAsdoStatusCode(asdoStatusCode string) {
	o.AsdoStatusCode = asdoStatusCode
}

// WithAsdoValidationResultCode adds the asdoValidationResultCode to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithAsdoValidationResultCode(asdoValidationResultCode string) *UpdateFacilityUsingPUT1Params {
	o.SetAsdoValidationResultCode(asdoValidationResultCode)
	return o
}

// SetAsdoValidationResultCode adds the asdoValidationResultCode to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetAsdoValidationResultCode(asdoValidationResultCode string) {
	o.AsdoValidationResultCode = asdoValidationResultCode
}

// WithBmrlTypeCode adds the bmrlTypeCode to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithBmrlTypeCode(bmrlTypeCode string) *UpdateFacilityUsingPUT1Params {
	o.SetBmrlTypeCode(bmrlTypeCode)
	return o
}

// SetBmrlTypeCode adds the bmrlTypeCode to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetBmrlTypeCode(bmrlTypeCode string) {
	o.BmrlTypeCode = bmrlTypeCode
}

// WithBntpKey adds the bntpKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithBntpKey(bntpKey string) *UpdateFacilityUsingPUT1Params {
	o.SetBntpKey(bntpKey)
	return o
}

// SetBntpKey adds the bntpKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetBntpKey(bntpKey string) {
	o.BntpKey = bntpKey
}

// WithCaseMemberKey adds the caseMemberKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithCaseMemberKey(caseMemberKey string) *UpdateFacilityUsingPUT1Params {
	o.SetCaseMemberKey(caseMemberKey)
	return o
}

// SetCaseMemberKey adds the caseMemberKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetCaseMemberKey(caseMemberKey string) {
	o.CaseMemberKey = caseMemberKey
}

// WithCmrsKey adds the cmrsKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithCmrsKey(cmrsKey *string) *UpdateFacilityUsingPUT1Params {
	o.SetCmrsKey(cmrsKey)
	return o
}

// SetCmrsKey adds the cmrsKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetCmrsKey(cmrsKey *string) {
	o.CmrsKey = cmrsKey
}

// WithDoctorKey adds the doctorKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithDoctorKey(doctorKey string) *UpdateFacilityUsingPUT1Params {
	o.SetDoctorKey(doctorKey)
	return o
}

// SetDoctorKey adds the doctorKey to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetDoctorKey(doctorKey string) {
	o.DoctorKey = doctorKey
}

// WithEffectiveDate adds the effectiveDate to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithEffectiveDate(effectiveDate string) *UpdateFacilityUsingPUT1Params {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithRequestApplication adds the requestApplication to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithRequestApplication(requestApplication string) *UpdateFacilityUsingPUT1Params {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) WithRequestUser(requestUser string) *UpdateFacilityUsingPUT1Params {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the update facility using p u t 1 params
func (o *UpdateFacilityUsingPUT1Params) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateFacilityUsingPUT1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param asdoStatusCode
	qrAsdoStatusCode := o.AsdoStatusCode
	qAsdoStatusCode := qrAsdoStatusCode
	if qAsdoStatusCode != "" {

		if err := r.SetQueryParam("asdoStatusCode", qAsdoStatusCode); err != nil {
			return err
		}
	}

	// query param asdoValidationResultCode
	qrAsdoValidationResultCode := o.AsdoValidationResultCode
	qAsdoValidationResultCode := qrAsdoValidationResultCode
	if qAsdoValidationResultCode != "" {

		if err := r.SetQueryParam("asdoValidationResultCode", qAsdoValidationResultCode); err != nil {
			return err
		}
	}

	// query param bmrlTypeCode
	qrBmrlTypeCode := o.BmrlTypeCode
	qBmrlTypeCode := qrBmrlTypeCode
	if qBmrlTypeCode != "" {

		if err := r.SetQueryParam("bmrlTypeCode", qBmrlTypeCode); err != nil {
			return err
		}
	}

	// query param bntpKey
	qrBntpKey := o.BntpKey
	qBntpKey := qrBntpKey
	if qBntpKey != "" {

		if err := r.SetQueryParam("bntpKey", qBntpKey); err != nil {
			return err
		}
	}

	// query param caseMemberKey
	qrCaseMemberKey := o.CaseMemberKey
	qCaseMemberKey := qrCaseMemberKey
	if qCaseMemberKey != "" {

		if err := r.SetQueryParam("caseMemberKey", qCaseMemberKey); err != nil {
			return err
		}
	}

	if o.CmrsKey != nil {

		// query param cmrsKey
		var qrCmrsKey string

		if o.CmrsKey != nil {
			qrCmrsKey = *o.CmrsKey
		}
		qCmrsKey := qrCmrsKey
		if qCmrsKey != "" {

			if err := r.SetQueryParam("cmrsKey", qCmrsKey); err != nil {
				return err
			}
		}
	}

	// query param doctorKey
	qrDoctorKey := o.DoctorKey
	qDoctorKey := qrDoctorKey
	if qDoctorKey != "" {

		if err := r.SetQueryParam("doctorKey", qDoctorKey); err != nil {
			return err
		}
	}

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
