// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateAddressUsingPUTReader is a Reader for the UpdateAddressUsingPUT structure.
type UpdateAddressUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAddressUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAddressUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateAddressUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAddressUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAddressUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAddressUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAddressUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAddressUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/dependent/update/address] updateAddressUsingPUT", response, response.Code())
	}
}

// NewUpdateAddressUsingPUTOK creates a UpdateAddressUsingPUTOK with default headers values
func NewUpdateAddressUsingPUTOK() *UpdateAddressUsingPUTOK {
	return &UpdateAddressUsingPUTOK{}
}

/*
UpdateAddressUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateAddressUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update address using p u t o k response has a 2xx status code
func (o *UpdateAddressUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update address using p u t o k response has a 3xx status code
func (o *UpdateAddressUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t o k response has a 4xx status code
func (o *UpdateAddressUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update address using p u t o k response has a 5xx status code
func (o *UpdateAddressUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update address using p u t o k response a status code equal to that given
func (o *UpdateAddressUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update address using p u t o k response
func (o *UpdateAddressUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateAddressUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTOK %s", 200, payload)
}

func (o *UpdateAddressUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTOK %s", 200, payload)
}

func (o *UpdateAddressUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateAddressUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAddressUsingPUTCreated creates a UpdateAddressUsingPUTCreated with default headers values
func NewUpdateAddressUsingPUTCreated() *UpdateAddressUsingPUTCreated {
	return &UpdateAddressUsingPUTCreated{}
}

/*
UpdateAddressUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateAddressUsingPUTCreated struct {
}

// IsSuccess returns true when this update address using p u t created response has a 2xx status code
func (o *UpdateAddressUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update address using p u t created response has a 3xx status code
func (o *UpdateAddressUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t created response has a 4xx status code
func (o *UpdateAddressUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update address using p u t created response has a 5xx status code
func (o *UpdateAddressUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update address using p u t created response a status code equal to that given
func (o *UpdateAddressUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update address using p u t created response
func (o *UpdateAddressUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateAddressUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTCreated", 201)
}

func (o *UpdateAddressUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTCreated", 201)
}

func (o *UpdateAddressUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAddressUsingPUTBadRequest creates a UpdateAddressUsingPUTBadRequest with default headers values
func NewUpdateAddressUsingPUTBadRequest() *UpdateAddressUsingPUTBadRequest {
	return &UpdateAddressUsingPUTBadRequest{}
}

/*
UpdateAddressUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAddressUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update address using p u t bad request response has a 2xx status code
func (o *UpdateAddressUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update address using p u t bad request response has a 3xx status code
func (o *UpdateAddressUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t bad request response has a 4xx status code
func (o *UpdateAddressUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update address using p u t bad request response has a 5xx status code
func (o *UpdateAddressUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update address using p u t bad request response a status code equal to that given
func (o *UpdateAddressUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update address using p u t bad request response
func (o *UpdateAddressUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateAddressUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTBadRequest", 400)
}

func (o *UpdateAddressUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTBadRequest", 400)
}

func (o *UpdateAddressUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAddressUsingPUTUnauthorized creates a UpdateAddressUsingPUTUnauthorized with default headers values
func NewUpdateAddressUsingPUTUnauthorized() *UpdateAddressUsingPUTUnauthorized {
	return &UpdateAddressUsingPUTUnauthorized{}
}

/*
UpdateAddressUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAddressUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update address using p u t unauthorized response has a 2xx status code
func (o *UpdateAddressUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update address using p u t unauthorized response has a 3xx status code
func (o *UpdateAddressUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t unauthorized response has a 4xx status code
func (o *UpdateAddressUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update address using p u t unauthorized response has a 5xx status code
func (o *UpdateAddressUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update address using p u t unauthorized response a status code equal to that given
func (o *UpdateAddressUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update address using p u t unauthorized response
func (o *UpdateAddressUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateAddressUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTUnauthorized", 401)
}

func (o *UpdateAddressUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTUnauthorized", 401)
}

func (o *UpdateAddressUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAddressUsingPUTForbidden creates a UpdateAddressUsingPUTForbidden with default headers values
func NewUpdateAddressUsingPUTForbidden() *UpdateAddressUsingPUTForbidden {
	return &UpdateAddressUsingPUTForbidden{}
}

/*
UpdateAddressUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAddressUsingPUTForbidden struct {
}

// IsSuccess returns true when this update address using p u t forbidden response has a 2xx status code
func (o *UpdateAddressUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update address using p u t forbidden response has a 3xx status code
func (o *UpdateAddressUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t forbidden response has a 4xx status code
func (o *UpdateAddressUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update address using p u t forbidden response has a 5xx status code
func (o *UpdateAddressUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update address using p u t forbidden response a status code equal to that given
func (o *UpdateAddressUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update address using p u t forbidden response
func (o *UpdateAddressUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateAddressUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTForbidden", 403)
}

func (o *UpdateAddressUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTForbidden", 403)
}

func (o *UpdateAddressUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAddressUsingPUTNotFound creates a UpdateAddressUsingPUTNotFound with default headers values
func NewUpdateAddressUsingPUTNotFound() *UpdateAddressUsingPUTNotFound {
	return &UpdateAddressUsingPUTNotFound{}
}

/*
UpdateAddressUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAddressUsingPUTNotFound struct {
}

// IsSuccess returns true when this update address using p u t not found response has a 2xx status code
func (o *UpdateAddressUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update address using p u t not found response has a 3xx status code
func (o *UpdateAddressUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t not found response has a 4xx status code
func (o *UpdateAddressUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update address using p u t not found response has a 5xx status code
func (o *UpdateAddressUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update address using p u t not found response a status code equal to that given
func (o *UpdateAddressUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update address using p u t not found response
func (o *UpdateAddressUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateAddressUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTNotFound", 404)
}

func (o *UpdateAddressUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTNotFound", 404)
}

func (o *UpdateAddressUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAddressUsingPUTInternalServerError creates a UpdateAddressUsingPUTInternalServerError with default headers values
func NewUpdateAddressUsingPUTInternalServerError() *UpdateAddressUsingPUTInternalServerError {
	return &UpdateAddressUsingPUTInternalServerError{}
}

/*
UpdateAddressUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateAddressUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update address using p u t internal server error response has a 2xx status code
func (o *UpdateAddressUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update address using p u t internal server error response has a 3xx status code
func (o *UpdateAddressUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update address using p u t internal server error response has a 4xx status code
func (o *UpdateAddressUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update address using p u t internal server error response has a 5xx status code
func (o *UpdateAddressUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update address using p u t internal server error response a status code equal to that given
func (o *UpdateAddressUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update address using p u t internal server error response
func (o *UpdateAddressUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateAddressUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTInternalServerError", 500)
}

func (o *UpdateAddressUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/address][%d] updateAddressUsingPUTInternalServerError", 500)
}

func (o *UpdateAddressUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
