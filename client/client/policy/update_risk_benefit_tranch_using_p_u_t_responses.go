// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateRiskBenefitTranchUsingPUTReader is a Reader for the UpdateRiskBenefitTranchUsingPUT structure.
type UpdateRiskBenefitTranchUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRiskBenefitTranchUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRiskBenefitTranchUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateRiskBenefitTranchUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRiskBenefitTranchUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRiskBenefitTranchUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRiskBenefitTranchUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRiskBenefitTranchUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRiskBenefitTranchUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/riskBenefitTranch] updateRiskBenefitTranchUsingPUT", response, response.Code())
	}
}

// NewUpdateRiskBenefitTranchUsingPUTOK creates a UpdateRiskBenefitTranchUsingPUTOK with default headers values
func NewUpdateRiskBenefitTranchUsingPUTOK() *UpdateRiskBenefitTranchUsingPUTOK {
	return &UpdateRiskBenefitTranchUsingPUTOK{}
}

/*
UpdateRiskBenefitTranchUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateRiskBenefitTranchUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update risk benefit tranch using p u t o k response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update risk benefit tranch using p u t o k response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t o k response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update risk benefit tranch using p u t o k response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk benefit tranch using p u t o k response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update risk benefit tranch using p u t o k response
func (o *UpdateRiskBenefitTranchUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateRiskBenefitTranchUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTOK %s", 200, payload)
}

func (o *UpdateRiskBenefitTranchUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTOK %s", 200, payload)
}

func (o *UpdateRiskBenefitTranchUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateRiskBenefitTranchUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRiskBenefitTranchUsingPUTCreated creates a UpdateRiskBenefitTranchUsingPUTCreated with default headers values
func NewUpdateRiskBenefitTranchUsingPUTCreated() *UpdateRiskBenefitTranchUsingPUTCreated {
	return &UpdateRiskBenefitTranchUsingPUTCreated{}
}

/*
UpdateRiskBenefitTranchUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateRiskBenefitTranchUsingPUTCreated struct {
}

// IsSuccess returns true when this update risk benefit tranch using p u t created response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update risk benefit tranch using p u t created response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t created response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update risk benefit tranch using p u t created response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk benefit tranch using p u t created response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update risk benefit tranch using p u t created response
func (o *UpdateRiskBenefitTranchUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateRiskBenefitTranchUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTCreated", 201)
}

func (o *UpdateRiskBenefitTranchUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTCreated", 201)
}

func (o *UpdateRiskBenefitTranchUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskBenefitTranchUsingPUTBadRequest creates a UpdateRiskBenefitTranchUsingPUTBadRequest with default headers values
func NewUpdateRiskBenefitTranchUsingPUTBadRequest() *UpdateRiskBenefitTranchUsingPUTBadRequest {
	return &UpdateRiskBenefitTranchUsingPUTBadRequest{}
}

/*
UpdateRiskBenefitTranchUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRiskBenefitTranchUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update risk benefit tranch using p u t bad request response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk benefit tranch using p u t bad request response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t bad request response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk benefit tranch using p u t bad request response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk benefit tranch using p u t bad request response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update risk benefit tranch using p u t bad request response
func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTBadRequest", 400)
}

func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTBadRequest", 400)
}

func (o *UpdateRiskBenefitTranchUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskBenefitTranchUsingPUTUnauthorized creates a UpdateRiskBenefitTranchUsingPUTUnauthorized with default headers values
func NewUpdateRiskBenefitTranchUsingPUTUnauthorized() *UpdateRiskBenefitTranchUsingPUTUnauthorized {
	return &UpdateRiskBenefitTranchUsingPUTUnauthorized{}
}

/*
UpdateRiskBenefitTranchUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateRiskBenefitTranchUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update risk benefit tranch using p u t unauthorized response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk benefit tranch using p u t unauthorized response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t unauthorized response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk benefit tranch using p u t unauthorized response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk benefit tranch using p u t unauthorized response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update risk benefit tranch using p u t unauthorized response
func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTUnauthorized", 401)
}

func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTUnauthorized", 401)
}

func (o *UpdateRiskBenefitTranchUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskBenefitTranchUsingPUTForbidden creates a UpdateRiskBenefitTranchUsingPUTForbidden with default headers values
func NewUpdateRiskBenefitTranchUsingPUTForbidden() *UpdateRiskBenefitTranchUsingPUTForbidden {
	return &UpdateRiskBenefitTranchUsingPUTForbidden{}
}

/*
UpdateRiskBenefitTranchUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRiskBenefitTranchUsingPUTForbidden struct {
}

// IsSuccess returns true when this update risk benefit tranch using p u t forbidden response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk benefit tranch using p u t forbidden response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t forbidden response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk benefit tranch using p u t forbidden response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk benefit tranch using p u t forbidden response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update risk benefit tranch using p u t forbidden response
func (o *UpdateRiskBenefitTranchUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateRiskBenefitTranchUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTForbidden", 403)
}

func (o *UpdateRiskBenefitTranchUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTForbidden", 403)
}

func (o *UpdateRiskBenefitTranchUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskBenefitTranchUsingPUTNotFound creates a UpdateRiskBenefitTranchUsingPUTNotFound with default headers values
func NewUpdateRiskBenefitTranchUsingPUTNotFound() *UpdateRiskBenefitTranchUsingPUTNotFound {
	return &UpdateRiskBenefitTranchUsingPUTNotFound{}
}

/*
UpdateRiskBenefitTranchUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRiskBenefitTranchUsingPUTNotFound struct {
}

// IsSuccess returns true when this update risk benefit tranch using p u t not found response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk benefit tranch using p u t not found response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t not found response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk benefit tranch using p u t not found response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk benefit tranch using p u t not found response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update risk benefit tranch using p u t not found response
func (o *UpdateRiskBenefitTranchUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateRiskBenefitTranchUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTNotFound", 404)
}

func (o *UpdateRiskBenefitTranchUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTNotFound", 404)
}

func (o *UpdateRiskBenefitTranchUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskBenefitTranchUsingPUTInternalServerError creates a UpdateRiskBenefitTranchUsingPUTInternalServerError with default headers values
func NewUpdateRiskBenefitTranchUsingPUTInternalServerError() *UpdateRiskBenefitTranchUsingPUTInternalServerError {
	return &UpdateRiskBenefitTranchUsingPUTInternalServerError{}
}

/*
UpdateRiskBenefitTranchUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateRiskBenefitTranchUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update risk benefit tranch using p u t internal server error response has a 2xx status code
func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk benefit tranch using p u t internal server error response has a 3xx status code
func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk benefit tranch using p u t internal server error response has a 4xx status code
func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update risk benefit tranch using p u t internal server error response has a 5xx status code
func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update risk benefit tranch using p u t internal server error response a status code equal to that given
func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update risk benefit tranch using p u t internal server error response
func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTInternalServerError", 500)
}

func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskBenefitTranch][%d] updateRiskBenefitTranchUsingPUTInternalServerError", 500)
}

func (o *UpdateRiskBenefitTranchUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
