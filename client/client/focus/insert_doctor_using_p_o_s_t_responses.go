// Code generated by go-swagger; DO NOT EDIT.

package focus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// InsertDoctorUsingPOSTReader is a Reader for the InsertDoctorUsingPOST structure.
type InsertDoctorUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertDoctorUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertDoctorUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertDoctorUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertDoctorUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertDoctorUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInsertDoctorUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertDoctorUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInsertDoctorUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /compassintegrationapp/focus/doctor] insertDoctorUsingPOST", response, response.Code())
	}
}

// NewInsertDoctorUsingPOSTOK creates a InsertDoctorUsingPOSTOK with default headers values
func NewInsertDoctorUsingPOSTOK() *InsertDoctorUsingPOSTOK {
	return &InsertDoctorUsingPOSTOK{}
}

/*
InsertDoctorUsingPOSTOK describes a response with status code 200, with default header values.

Success
*/
type InsertDoctorUsingPOSTOK struct {
	Payload *models.ResponseWrapperDoctorDTO
}

// IsSuccess returns true when this insert doctor using p o s t o k response has a 2xx status code
func (o *InsertDoctorUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert doctor using p o s t o k response has a 3xx status code
func (o *InsertDoctorUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t o k response has a 4xx status code
func (o *InsertDoctorUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert doctor using p o s t o k response has a 5xx status code
func (o *InsertDoctorUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert doctor using p o s t o k response a status code equal to that given
func (o *InsertDoctorUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert doctor using p o s t o k response
func (o *InsertDoctorUsingPOSTOK) Code() int {
	return 200
}

func (o *InsertDoctorUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTOK %s", 200, payload)
}

func (o *InsertDoctorUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTOK %s", 200, payload)
}

func (o *InsertDoctorUsingPOSTOK) GetPayload() *models.ResponseWrapperDoctorDTO {
	return o.Payload
}

func (o *InsertDoctorUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperDoctorDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertDoctorUsingPOSTCreated creates a InsertDoctorUsingPOSTCreated with default headers values
func NewInsertDoctorUsingPOSTCreated() *InsertDoctorUsingPOSTCreated {
	return &InsertDoctorUsingPOSTCreated{}
}

/*
InsertDoctorUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type InsertDoctorUsingPOSTCreated struct {
}

// IsSuccess returns true when this insert doctor using p o s t created response has a 2xx status code
func (o *InsertDoctorUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert doctor using p o s t created response has a 3xx status code
func (o *InsertDoctorUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t created response has a 4xx status code
func (o *InsertDoctorUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert doctor using p o s t created response has a 5xx status code
func (o *InsertDoctorUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert doctor using p o s t created response a status code equal to that given
func (o *InsertDoctorUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert doctor using p o s t created response
func (o *InsertDoctorUsingPOSTCreated) Code() int {
	return 201
}

func (o *InsertDoctorUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTCreated", 201)
}

func (o *InsertDoctorUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTCreated", 201)
}

func (o *InsertDoctorUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertDoctorUsingPOSTBadRequest creates a InsertDoctorUsingPOSTBadRequest with default headers values
func NewInsertDoctorUsingPOSTBadRequest() *InsertDoctorUsingPOSTBadRequest {
	return &InsertDoctorUsingPOSTBadRequest{}
}

/*
InsertDoctorUsingPOSTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InsertDoctorUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this insert doctor using p o s t bad request response has a 2xx status code
func (o *InsertDoctorUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert doctor using p o s t bad request response has a 3xx status code
func (o *InsertDoctorUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t bad request response has a 4xx status code
func (o *InsertDoctorUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert doctor using p o s t bad request response has a 5xx status code
func (o *InsertDoctorUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert doctor using p o s t bad request response a status code equal to that given
func (o *InsertDoctorUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert doctor using p o s t bad request response
func (o *InsertDoctorUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *InsertDoctorUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTBadRequest", 400)
}

func (o *InsertDoctorUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTBadRequest", 400)
}

func (o *InsertDoctorUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertDoctorUsingPOSTUnauthorized creates a InsertDoctorUsingPOSTUnauthorized with default headers values
func NewInsertDoctorUsingPOSTUnauthorized() *InsertDoctorUsingPOSTUnauthorized {
	return &InsertDoctorUsingPOSTUnauthorized{}
}

/*
InsertDoctorUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InsertDoctorUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this insert doctor using p o s t unauthorized response has a 2xx status code
func (o *InsertDoctorUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert doctor using p o s t unauthorized response has a 3xx status code
func (o *InsertDoctorUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t unauthorized response has a 4xx status code
func (o *InsertDoctorUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert doctor using p o s t unauthorized response has a 5xx status code
func (o *InsertDoctorUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert doctor using p o s t unauthorized response a status code equal to that given
func (o *InsertDoctorUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert doctor using p o s t unauthorized response
func (o *InsertDoctorUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *InsertDoctorUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTUnauthorized", 401)
}

func (o *InsertDoctorUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTUnauthorized", 401)
}

func (o *InsertDoctorUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertDoctorUsingPOSTForbidden creates a InsertDoctorUsingPOSTForbidden with default headers values
func NewInsertDoctorUsingPOSTForbidden() *InsertDoctorUsingPOSTForbidden {
	return &InsertDoctorUsingPOSTForbidden{}
}

/*
InsertDoctorUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InsertDoctorUsingPOSTForbidden struct {
}

// IsSuccess returns true when this insert doctor using p o s t forbidden response has a 2xx status code
func (o *InsertDoctorUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert doctor using p o s t forbidden response has a 3xx status code
func (o *InsertDoctorUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t forbidden response has a 4xx status code
func (o *InsertDoctorUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert doctor using p o s t forbidden response has a 5xx status code
func (o *InsertDoctorUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this insert doctor using p o s t forbidden response a status code equal to that given
func (o *InsertDoctorUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the insert doctor using p o s t forbidden response
func (o *InsertDoctorUsingPOSTForbidden) Code() int {
	return 403
}

func (o *InsertDoctorUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTForbidden", 403)
}

func (o *InsertDoctorUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTForbidden", 403)
}

func (o *InsertDoctorUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertDoctorUsingPOSTNotFound creates a InsertDoctorUsingPOSTNotFound with default headers values
func NewInsertDoctorUsingPOSTNotFound() *InsertDoctorUsingPOSTNotFound {
	return &InsertDoctorUsingPOSTNotFound{}
}

/*
InsertDoctorUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type InsertDoctorUsingPOSTNotFound struct {
}

// IsSuccess returns true when this insert doctor using p o s t not found response has a 2xx status code
func (o *InsertDoctorUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert doctor using p o s t not found response has a 3xx status code
func (o *InsertDoctorUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t not found response has a 4xx status code
func (o *InsertDoctorUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert doctor using p o s t not found response has a 5xx status code
func (o *InsertDoctorUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert doctor using p o s t not found response a status code equal to that given
func (o *InsertDoctorUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert doctor using p o s t not found response
func (o *InsertDoctorUsingPOSTNotFound) Code() int {
	return 404
}

func (o *InsertDoctorUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTNotFound", 404)
}

func (o *InsertDoctorUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTNotFound", 404)
}

func (o *InsertDoctorUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertDoctorUsingPOSTInternalServerError creates a InsertDoctorUsingPOSTInternalServerError with default headers values
func NewInsertDoctorUsingPOSTInternalServerError() *InsertDoctorUsingPOSTInternalServerError {
	return &InsertDoctorUsingPOSTInternalServerError{}
}

/*
InsertDoctorUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type InsertDoctorUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this insert doctor using p o s t internal server error response has a 2xx status code
func (o *InsertDoctorUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert doctor using p o s t internal server error response has a 3xx status code
func (o *InsertDoctorUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert doctor using p o s t internal server error response has a 4xx status code
func (o *InsertDoctorUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert doctor using p o s t internal server error response has a 5xx status code
func (o *InsertDoctorUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this insert doctor using p o s t internal server error response a status code equal to that given
func (o *InsertDoctorUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the insert doctor using p o s t internal server error response
func (o *InsertDoctorUsingPOSTInternalServerError) Code() int {
	return 500
}

func (o *InsertDoctorUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTInternalServerError", 500)
}

func (o *InsertDoctorUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/focus/doctor][%d] insertDoctorUsingPOSTInternalServerError", 500)
}

func (o *InsertDoctorUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
