// Code generated by go-swagger; DO NOT EDIT.

package person

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new person API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new person API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new person API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for person API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationAebCasPersonFindDataV1JSON sets the Accept header to "application/aeb.cas.person.find.data.v1+json".
func WithAcceptApplicationAebCasPersonFindDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.person.find.data.v1+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	FindPersonUsingGET1(params *FindPersonUsingGET1Params, opts ...ClientOption) (*FindPersonUsingGET1OK, error)

	UpdateAddressUsingPUT1(params *UpdateAddressUsingPUT1Params, opts ...ClientOption) (*UpdateAddressUsingPUT1OK, *UpdateAddressUsingPUT1Created, error)

	UpdatePersonUsingPUT(params *UpdatePersonUsingPUTParams, opts ...ClientOption) (*UpdatePersonUsingPUTOK, *UpdatePersonUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindPersonUsingGET1 finds person

None
*/
func (a *Client) FindPersonUsingGET1(params *FindPersonUsingGET1Params, opts ...ClientOption) (*FindPersonUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPersonUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPersonUsingGET_1",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/person",
		ProducesMediaTypes: []string{"application/aeb.cas.person.find.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindPersonUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPersonUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPersonUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAddressUsingPUT1 updates contact details method

None
*/
func (a *Client) UpdateAddressUsingPUT1(params *UpdateAddressUsingPUT1Params, opts ...ClientOption) (*UpdateAddressUsingPUT1OK, *UpdateAddressUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAddressUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAddressUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/person/address",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAddressUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAddressUsingPUT1OK:
		return value, nil, nil
	case *UpdateAddressUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for person: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePersonUsingPUT updates person method

None
*/
func (a *Client) UpdatePersonUsingPUT(params *UpdatePersonUsingPUTParams, opts ...ClientOption) (*UpdatePersonUsingPUTOK, *UpdatePersonUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePersonUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePersonUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/person",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePersonUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePersonUsingPUTOK:
		return value, nil, nil
	case *UpdatePersonUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for person: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
