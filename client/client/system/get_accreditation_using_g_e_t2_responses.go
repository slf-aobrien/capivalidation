// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetAccreditationUsingGET2Reader is a Reader for the GetAccreditationUsingGET2 structure.
type GetAccreditationUsingGET2Reader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccreditationUsingGET2Reader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccreditationUsingGET2OK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccreditationUsingGET2BadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAccreditationUsingGET2Unauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccreditationUsingGET2Forbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAccreditationUsingGET2NotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccreditationUsingGET2InternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/system/accreditation] getAccreditationUsingGET_2", response, response.Code())
	}
}

// NewGetAccreditationUsingGET2OK creates a GetAccreditationUsingGET2OK with default headers values
func NewGetAccreditationUsingGET2OK() *GetAccreditationUsingGET2OK {
	return &GetAccreditationUsingGET2OK{}
}

/*
GetAccreditationUsingGET2OK describes a response with status code 200, with default header values.

Success
*/
type GetAccreditationUsingGET2OK struct {
	Payload *models.ResponseWrapperListAccreditationHistoryDTO
}

// IsSuccess returns true when this get accreditation using g e t2 o k response has a 2xx status code
func (o *GetAccreditationUsingGET2OK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get accreditation using g e t2 o k response has a 3xx status code
func (o *GetAccreditationUsingGET2OK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t2 o k response has a 4xx status code
func (o *GetAccreditationUsingGET2OK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get accreditation using g e t2 o k response has a 5xx status code
func (o *GetAccreditationUsingGET2OK) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t2 o k response a status code equal to that given
func (o *GetAccreditationUsingGET2OK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get accreditation using g e t2 o k response
func (o *GetAccreditationUsingGET2OK) Code() int {
	return 200
}

func (o *GetAccreditationUsingGET2OK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2OK %s", 200, payload)
}

func (o *GetAccreditationUsingGET2OK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2OK %s", 200, payload)
}

func (o *GetAccreditationUsingGET2OK) GetPayload() *models.ResponseWrapperListAccreditationHistoryDTO {
	return o.Payload
}

func (o *GetAccreditationUsingGET2OK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListAccreditationHistoryDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccreditationUsingGET2BadRequest creates a GetAccreditationUsingGET2BadRequest with default headers values
func NewGetAccreditationUsingGET2BadRequest() *GetAccreditationUsingGET2BadRequest {
	return &GetAccreditationUsingGET2BadRequest{}
}

/*
GetAccreditationUsingGET2BadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAccreditationUsingGET2BadRequest struct {
}

// IsSuccess returns true when this get accreditation using g e t2 bad request response has a 2xx status code
func (o *GetAccreditationUsingGET2BadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t2 bad request response has a 3xx status code
func (o *GetAccreditationUsingGET2BadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t2 bad request response has a 4xx status code
func (o *GetAccreditationUsingGET2BadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t2 bad request response has a 5xx status code
func (o *GetAccreditationUsingGET2BadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t2 bad request response a status code equal to that given
func (o *GetAccreditationUsingGET2BadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get accreditation using g e t2 bad request response
func (o *GetAccreditationUsingGET2BadRequest) Code() int {
	return 400
}

func (o *GetAccreditationUsingGET2BadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2BadRequest", 400)
}

func (o *GetAccreditationUsingGET2BadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2BadRequest", 400)
}

func (o *GetAccreditationUsingGET2BadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGET2Unauthorized creates a GetAccreditationUsingGET2Unauthorized with default headers values
func NewGetAccreditationUsingGET2Unauthorized() *GetAccreditationUsingGET2Unauthorized {
	return &GetAccreditationUsingGET2Unauthorized{}
}

/*
GetAccreditationUsingGET2Unauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAccreditationUsingGET2Unauthorized struct {
}

// IsSuccess returns true when this get accreditation using g e t2 unauthorized response has a 2xx status code
func (o *GetAccreditationUsingGET2Unauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t2 unauthorized response has a 3xx status code
func (o *GetAccreditationUsingGET2Unauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t2 unauthorized response has a 4xx status code
func (o *GetAccreditationUsingGET2Unauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t2 unauthorized response has a 5xx status code
func (o *GetAccreditationUsingGET2Unauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t2 unauthorized response a status code equal to that given
func (o *GetAccreditationUsingGET2Unauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get accreditation using g e t2 unauthorized response
func (o *GetAccreditationUsingGET2Unauthorized) Code() int {
	return 401
}

func (o *GetAccreditationUsingGET2Unauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2Unauthorized", 401)
}

func (o *GetAccreditationUsingGET2Unauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2Unauthorized", 401)
}

func (o *GetAccreditationUsingGET2Unauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGET2Forbidden creates a GetAccreditationUsingGET2Forbidden with default headers values
func NewGetAccreditationUsingGET2Forbidden() *GetAccreditationUsingGET2Forbidden {
	return &GetAccreditationUsingGET2Forbidden{}
}

/*
GetAccreditationUsingGET2Forbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAccreditationUsingGET2Forbidden struct {
}

// IsSuccess returns true when this get accreditation using g e t2 forbidden response has a 2xx status code
func (o *GetAccreditationUsingGET2Forbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t2 forbidden response has a 3xx status code
func (o *GetAccreditationUsingGET2Forbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t2 forbidden response has a 4xx status code
func (o *GetAccreditationUsingGET2Forbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t2 forbidden response has a 5xx status code
func (o *GetAccreditationUsingGET2Forbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t2 forbidden response a status code equal to that given
func (o *GetAccreditationUsingGET2Forbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get accreditation using g e t2 forbidden response
func (o *GetAccreditationUsingGET2Forbidden) Code() int {
	return 403
}

func (o *GetAccreditationUsingGET2Forbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2Forbidden", 403)
}

func (o *GetAccreditationUsingGET2Forbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2Forbidden", 403)
}

func (o *GetAccreditationUsingGET2Forbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGET2NotFound creates a GetAccreditationUsingGET2NotFound with default headers values
func NewGetAccreditationUsingGET2NotFound() *GetAccreditationUsingGET2NotFound {
	return &GetAccreditationUsingGET2NotFound{}
}

/*
GetAccreditationUsingGET2NotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAccreditationUsingGET2NotFound struct {
}

// IsSuccess returns true when this get accreditation using g e t2 not found response has a 2xx status code
func (o *GetAccreditationUsingGET2NotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t2 not found response has a 3xx status code
func (o *GetAccreditationUsingGET2NotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t2 not found response has a 4xx status code
func (o *GetAccreditationUsingGET2NotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t2 not found response has a 5xx status code
func (o *GetAccreditationUsingGET2NotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t2 not found response a status code equal to that given
func (o *GetAccreditationUsingGET2NotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get accreditation using g e t2 not found response
func (o *GetAccreditationUsingGET2NotFound) Code() int {
	return 404
}

func (o *GetAccreditationUsingGET2NotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2NotFound", 404)
}

func (o *GetAccreditationUsingGET2NotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2NotFound", 404)
}

func (o *GetAccreditationUsingGET2NotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGET2InternalServerError creates a GetAccreditationUsingGET2InternalServerError with default headers values
func NewGetAccreditationUsingGET2InternalServerError() *GetAccreditationUsingGET2InternalServerError {
	return &GetAccreditationUsingGET2InternalServerError{}
}

/*
GetAccreditationUsingGET2InternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetAccreditationUsingGET2InternalServerError struct {
}

// IsSuccess returns true when this get accreditation using g e t2 internal server error response has a 2xx status code
func (o *GetAccreditationUsingGET2InternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t2 internal server error response has a 3xx status code
func (o *GetAccreditationUsingGET2InternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t2 internal server error response has a 4xx status code
func (o *GetAccreditationUsingGET2InternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get accreditation using g e t2 internal server error response has a 5xx status code
func (o *GetAccreditationUsingGET2InternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get accreditation using g e t2 internal server error response a status code equal to that given
func (o *GetAccreditationUsingGET2InternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get accreditation using g e t2 internal server error response
func (o *GetAccreditationUsingGET2InternalServerError) Code() int {
	return 500
}

func (o *GetAccreditationUsingGET2InternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2InternalServerError", 500)
}

func (o *GetAccreditationUsingGET2InternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/system/accreditation][%d] getAccreditationUsingGET2InternalServerError", 500)
}

func (o *GetAccreditationUsingGET2InternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
