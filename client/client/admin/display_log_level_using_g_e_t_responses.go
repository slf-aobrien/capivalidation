// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// DisplayLogLevelUsingGETReader is a Reader for the DisplayLogLevelUsingGET structure.
type DisplayLogLevelUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DisplayLogLevelUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDisplayLogLevelUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDisplayLogLevelUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDisplayLogLevelUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDisplayLogLevelUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDisplayLogLevelUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/admin/loglevel] displayLogLevelUsingGET", response, response.Code())
	}
}

// NewDisplayLogLevelUsingGETOK creates a DisplayLogLevelUsingGETOK with default headers values
func NewDisplayLogLevelUsingGETOK() *DisplayLogLevelUsingGETOK {
	return &DisplayLogLevelUsingGETOK{}
}

/*
DisplayLogLevelUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type DisplayLogLevelUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this display log level using g e t o k response has a 2xx status code
func (o *DisplayLogLevelUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this display log level using g e t o k response has a 3xx status code
func (o *DisplayLogLevelUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this display log level using g e t o k response has a 4xx status code
func (o *DisplayLogLevelUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this display log level using g e t o k response has a 5xx status code
func (o *DisplayLogLevelUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this display log level using g e t o k response a status code equal to that given
func (o *DisplayLogLevelUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the display log level using g e t o k response
func (o *DisplayLogLevelUsingGETOK) Code() int {
	return 200
}

func (o *DisplayLogLevelUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETOK %s", 200, payload)
}

func (o *DisplayLogLevelUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETOK %s", 200, payload)
}

func (o *DisplayLogLevelUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *DisplayLogLevelUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDisplayLogLevelUsingGETUnauthorized creates a DisplayLogLevelUsingGETUnauthorized with default headers values
func NewDisplayLogLevelUsingGETUnauthorized() *DisplayLogLevelUsingGETUnauthorized {
	return &DisplayLogLevelUsingGETUnauthorized{}
}

/*
DisplayLogLevelUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DisplayLogLevelUsingGETUnauthorized struct {
}

// IsSuccess returns true when this display log level using g e t unauthorized response has a 2xx status code
func (o *DisplayLogLevelUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this display log level using g e t unauthorized response has a 3xx status code
func (o *DisplayLogLevelUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this display log level using g e t unauthorized response has a 4xx status code
func (o *DisplayLogLevelUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this display log level using g e t unauthorized response has a 5xx status code
func (o *DisplayLogLevelUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this display log level using g e t unauthorized response a status code equal to that given
func (o *DisplayLogLevelUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the display log level using g e t unauthorized response
func (o *DisplayLogLevelUsingGETUnauthorized) Code() int {
	return 401
}

func (o *DisplayLogLevelUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETUnauthorized", 401)
}

func (o *DisplayLogLevelUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETUnauthorized", 401)
}

func (o *DisplayLogLevelUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisplayLogLevelUsingGETForbidden creates a DisplayLogLevelUsingGETForbidden with default headers values
func NewDisplayLogLevelUsingGETForbidden() *DisplayLogLevelUsingGETForbidden {
	return &DisplayLogLevelUsingGETForbidden{}
}

/*
DisplayLogLevelUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DisplayLogLevelUsingGETForbidden struct {
}

// IsSuccess returns true when this display log level using g e t forbidden response has a 2xx status code
func (o *DisplayLogLevelUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this display log level using g e t forbidden response has a 3xx status code
func (o *DisplayLogLevelUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this display log level using g e t forbidden response has a 4xx status code
func (o *DisplayLogLevelUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this display log level using g e t forbidden response has a 5xx status code
func (o *DisplayLogLevelUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this display log level using g e t forbidden response a status code equal to that given
func (o *DisplayLogLevelUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the display log level using g e t forbidden response
func (o *DisplayLogLevelUsingGETForbidden) Code() int {
	return 403
}

func (o *DisplayLogLevelUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETForbidden", 403)
}

func (o *DisplayLogLevelUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETForbidden", 403)
}

func (o *DisplayLogLevelUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisplayLogLevelUsingGETNotFound creates a DisplayLogLevelUsingGETNotFound with default headers values
func NewDisplayLogLevelUsingGETNotFound() *DisplayLogLevelUsingGETNotFound {
	return &DisplayLogLevelUsingGETNotFound{}
}

/*
DisplayLogLevelUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DisplayLogLevelUsingGETNotFound struct {
}

// IsSuccess returns true when this display log level using g e t not found response has a 2xx status code
func (o *DisplayLogLevelUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this display log level using g e t not found response has a 3xx status code
func (o *DisplayLogLevelUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this display log level using g e t not found response has a 4xx status code
func (o *DisplayLogLevelUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this display log level using g e t not found response has a 5xx status code
func (o *DisplayLogLevelUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this display log level using g e t not found response a status code equal to that given
func (o *DisplayLogLevelUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the display log level using g e t not found response
func (o *DisplayLogLevelUsingGETNotFound) Code() int {
	return 404
}

func (o *DisplayLogLevelUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETNotFound", 404)
}

func (o *DisplayLogLevelUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETNotFound", 404)
}

func (o *DisplayLogLevelUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDisplayLogLevelUsingGETInternalServerError creates a DisplayLogLevelUsingGETInternalServerError with default headers values
func NewDisplayLogLevelUsingGETInternalServerError() *DisplayLogLevelUsingGETInternalServerError {
	return &DisplayLogLevelUsingGETInternalServerError{}
}

/*
DisplayLogLevelUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DisplayLogLevelUsingGETInternalServerError struct {
}

// IsSuccess returns true when this display log level using g e t internal server error response has a 2xx status code
func (o *DisplayLogLevelUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this display log level using g e t internal server error response has a 3xx status code
func (o *DisplayLogLevelUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this display log level using g e t internal server error response has a 4xx status code
func (o *DisplayLogLevelUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this display log level using g e t internal server error response has a 5xx status code
func (o *DisplayLogLevelUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this display log level using g e t internal server error response a status code equal to that given
func (o *DisplayLogLevelUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the display log level using g e t internal server error response
func (o *DisplayLogLevelUsingGETInternalServerError) Code() int {
	return 500
}

func (o *DisplayLogLevelUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETInternalServerError", 500)
}

func (o *DisplayLogLevelUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/loglevel][%d] displayLogLevelUsingGETInternalServerError", 500)
}

func (o *DisplayLogLevelUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
