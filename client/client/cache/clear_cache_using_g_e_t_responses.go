// Code generated by go-swagger; DO NOT EDIT.

package cache

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ClearCacheUsingGETReader is a Reader for the ClearCacheUsingGET structure.
type ClearCacheUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ClearCacheUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewClearCacheUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewClearCacheUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewClearCacheUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewClearCacheUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewClearCacheUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewClearCacheUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear] clearCacheUsingGET", response, response.Code())
	}
}

// NewClearCacheUsingGETOK creates a ClearCacheUsingGETOK with default headers values
func NewClearCacheUsingGETOK() *ClearCacheUsingGETOK {
	return &ClearCacheUsingGETOK{}
}

/*
ClearCacheUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type ClearCacheUsingGETOK struct {
	Payload *models.ResponseWrapperString
}

// IsSuccess returns true when this clear cache using g e t o k response has a 2xx status code
func (o *ClearCacheUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this clear cache using g e t o k response has a 3xx status code
func (o *ClearCacheUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clear cache using g e t o k response has a 4xx status code
func (o *ClearCacheUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this clear cache using g e t o k response has a 5xx status code
func (o *ClearCacheUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this clear cache using g e t o k response a status code equal to that given
func (o *ClearCacheUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the clear cache using g e t o k response
func (o *ClearCacheUsingGETOK) Code() int {
	return 200
}

func (o *ClearCacheUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETOK %s", 200, payload)
}

func (o *ClearCacheUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETOK %s", 200, payload)
}

func (o *ClearCacheUsingGETOK) GetPayload() *models.ResponseWrapperString {
	return o.Payload
}

func (o *ClearCacheUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperString)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewClearCacheUsingGETBadRequest creates a ClearCacheUsingGETBadRequest with default headers values
func NewClearCacheUsingGETBadRequest() *ClearCacheUsingGETBadRequest {
	return &ClearCacheUsingGETBadRequest{}
}

/*
ClearCacheUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ClearCacheUsingGETBadRequest struct {
}

// IsSuccess returns true when this clear cache using g e t bad request response has a 2xx status code
func (o *ClearCacheUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clear cache using g e t bad request response has a 3xx status code
func (o *ClearCacheUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clear cache using g e t bad request response has a 4xx status code
func (o *ClearCacheUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this clear cache using g e t bad request response has a 5xx status code
func (o *ClearCacheUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this clear cache using g e t bad request response a status code equal to that given
func (o *ClearCacheUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the clear cache using g e t bad request response
func (o *ClearCacheUsingGETBadRequest) Code() int {
	return 400
}

func (o *ClearCacheUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETBadRequest", 400)
}

func (o *ClearCacheUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETBadRequest", 400)
}

func (o *ClearCacheUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearCacheUsingGETUnauthorized creates a ClearCacheUsingGETUnauthorized with default headers values
func NewClearCacheUsingGETUnauthorized() *ClearCacheUsingGETUnauthorized {
	return &ClearCacheUsingGETUnauthorized{}
}

/*
ClearCacheUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ClearCacheUsingGETUnauthorized struct {
}

// IsSuccess returns true when this clear cache using g e t unauthorized response has a 2xx status code
func (o *ClearCacheUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clear cache using g e t unauthorized response has a 3xx status code
func (o *ClearCacheUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clear cache using g e t unauthorized response has a 4xx status code
func (o *ClearCacheUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this clear cache using g e t unauthorized response has a 5xx status code
func (o *ClearCacheUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this clear cache using g e t unauthorized response a status code equal to that given
func (o *ClearCacheUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the clear cache using g e t unauthorized response
func (o *ClearCacheUsingGETUnauthorized) Code() int {
	return 401
}

func (o *ClearCacheUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETUnauthorized", 401)
}

func (o *ClearCacheUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETUnauthorized", 401)
}

func (o *ClearCacheUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearCacheUsingGETForbidden creates a ClearCacheUsingGETForbidden with default headers values
func NewClearCacheUsingGETForbidden() *ClearCacheUsingGETForbidden {
	return &ClearCacheUsingGETForbidden{}
}

/*
ClearCacheUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ClearCacheUsingGETForbidden struct {
}

// IsSuccess returns true when this clear cache using g e t forbidden response has a 2xx status code
func (o *ClearCacheUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clear cache using g e t forbidden response has a 3xx status code
func (o *ClearCacheUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clear cache using g e t forbidden response has a 4xx status code
func (o *ClearCacheUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this clear cache using g e t forbidden response has a 5xx status code
func (o *ClearCacheUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this clear cache using g e t forbidden response a status code equal to that given
func (o *ClearCacheUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the clear cache using g e t forbidden response
func (o *ClearCacheUsingGETForbidden) Code() int {
	return 403
}

func (o *ClearCacheUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETForbidden", 403)
}

func (o *ClearCacheUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETForbidden", 403)
}

func (o *ClearCacheUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearCacheUsingGETNotFound creates a ClearCacheUsingGETNotFound with default headers values
func NewClearCacheUsingGETNotFound() *ClearCacheUsingGETNotFound {
	return &ClearCacheUsingGETNotFound{}
}

/*
ClearCacheUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ClearCacheUsingGETNotFound struct {
}

// IsSuccess returns true when this clear cache using g e t not found response has a 2xx status code
func (o *ClearCacheUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clear cache using g e t not found response has a 3xx status code
func (o *ClearCacheUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clear cache using g e t not found response has a 4xx status code
func (o *ClearCacheUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this clear cache using g e t not found response has a 5xx status code
func (o *ClearCacheUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this clear cache using g e t not found response a status code equal to that given
func (o *ClearCacheUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the clear cache using g e t not found response
func (o *ClearCacheUsingGETNotFound) Code() int {
	return 404
}

func (o *ClearCacheUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETNotFound", 404)
}

func (o *ClearCacheUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETNotFound", 404)
}

func (o *ClearCacheUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewClearCacheUsingGETInternalServerError creates a ClearCacheUsingGETInternalServerError with default headers values
func NewClearCacheUsingGETInternalServerError() *ClearCacheUsingGETInternalServerError {
	return &ClearCacheUsingGETInternalServerError{}
}

/*
ClearCacheUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type ClearCacheUsingGETInternalServerError struct {
}

// IsSuccess returns true when this clear cache using g e t internal server error response has a 2xx status code
func (o *ClearCacheUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this clear cache using g e t internal server error response has a 3xx status code
func (o *ClearCacheUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this clear cache using g e t internal server error response has a 4xx status code
func (o *ClearCacheUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this clear cache using g e t internal server error response has a 5xx status code
func (o *ClearCacheUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this clear cache using g e t internal server error response a status code equal to that given
func (o *ClearCacheUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the clear cache using g e t internal server error response
func (o *ClearCacheUsingGETInternalServerError) Code() int {
	return 500
}

func (o *ClearCacheUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETInternalServerError", 500)
}

func (o *ClearCacheUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}/clear][%d] clearCacheUsingGETInternalServerError", 500)
}

func (o *ClearCacheUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
