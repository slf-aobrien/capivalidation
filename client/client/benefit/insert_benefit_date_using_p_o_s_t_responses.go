// Code generated by go-swagger; DO NOT EDIT.

package benefit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// InsertBenefitDateUsingPOSTReader is a Reader for the InsertBenefitDateUsingPOST structure.
type InsertBenefitDateUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertBenefitDateUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertBenefitDateUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertBenefitDateUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertBenefitDateUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertBenefitDateUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInsertBenefitDateUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertBenefitDateUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInsertBenefitDateUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /compassintegrationapp/benefit/benefitDate] insertBenefitDateUsingPOST", response, response.Code())
	}
}

// NewInsertBenefitDateUsingPOSTOK creates a InsertBenefitDateUsingPOSTOK with default headers values
func NewInsertBenefitDateUsingPOSTOK() *InsertBenefitDateUsingPOSTOK {
	return &InsertBenefitDateUsingPOSTOK{}
}

/*
InsertBenefitDateUsingPOSTOK describes a response with status code 200, with default header values.

Success
*/
type InsertBenefitDateUsingPOSTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this insert benefit date using p o s t o k response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert benefit date using p o s t o k response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t o k response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert benefit date using p o s t o k response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert benefit date using p o s t o k response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert benefit date using p o s t o k response
func (o *InsertBenefitDateUsingPOSTOK) Code() int {
	return 200
}

func (o *InsertBenefitDateUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTOK %s", 200, payload)
}

func (o *InsertBenefitDateUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTOK %s", 200, payload)
}

func (o *InsertBenefitDateUsingPOSTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *InsertBenefitDateUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertBenefitDateUsingPOSTCreated creates a InsertBenefitDateUsingPOSTCreated with default headers values
func NewInsertBenefitDateUsingPOSTCreated() *InsertBenefitDateUsingPOSTCreated {
	return &InsertBenefitDateUsingPOSTCreated{}
}

/*
InsertBenefitDateUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type InsertBenefitDateUsingPOSTCreated struct {
}

// IsSuccess returns true when this insert benefit date using p o s t created response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert benefit date using p o s t created response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t created response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert benefit date using p o s t created response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert benefit date using p o s t created response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert benefit date using p o s t created response
func (o *InsertBenefitDateUsingPOSTCreated) Code() int {
	return 201
}

func (o *InsertBenefitDateUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTCreated", 201)
}

func (o *InsertBenefitDateUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTCreated", 201)
}

func (o *InsertBenefitDateUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertBenefitDateUsingPOSTBadRequest creates a InsertBenefitDateUsingPOSTBadRequest with default headers values
func NewInsertBenefitDateUsingPOSTBadRequest() *InsertBenefitDateUsingPOSTBadRequest {
	return &InsertBenefitDateUsingPOSTBadRequest{}
}

/*
InsertBenefitDateUsingPOSTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InsertBenefitDateUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this insert benefit date using p o s t bad request response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert benefit date using p o s t bad request response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t bad request response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert benefit date using p o s t bad request response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert benefit date using p o s t bad request response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert benefit date using p o s t bad request response
func (o *InsertBenefitDateUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *InsertBenefitDateUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTBadRequest", 400)
}

func (o *InsertBenefitDateUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTBadRequest", 400)
}

func (o *InsertBenefitDateUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertBenefitDateUsingPOSTUnauthorized creates a InsertBenefitDateUsingPOSTUnauthorized with default headers values
func NewInsertBenefitDateUsingPOSTUnauthorized() *InsertBenefitDateUsingPOSTUnauthorized {
	return &InsertBenefitDateUsingPOSTUnauthorized{}
}

/*
InsertBenefitDateUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InsertBenefitDateUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this insert benefit date using p o s t unauthorized response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert benefit date using p o s t unauthorized response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t unauthorized response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert benefit date using p o s t unauthorized response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert benefit date using p o s t unauthorized response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert benefit date using p o s t unauthorized response
func (o *InsertBenefitDateUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *InsertBenefitDateUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTUnauthorized", 401)
}

func (o *InsertBenefitDateUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTUnauthorized", 401)
}

func (o *InsertBenefitDateUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertBenefitDateUsingPOSTForbidden creates a InsertBenefitDateUsingPOSTForbidden with default headers values
func NewInsertBenefitDateUsingPOSTForbidden() *InsertBenefitDateUsingPOSTForbidden {
	return &InsertBenefitDateUsingPOSTForbidden{}
}

/*
InsertBenefitDateUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InsertBenefitDateUsingPOSTForbidden struct {
}

// IsSuccess returns true when this insert benefit date using p o s t forbidden response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert benefit date using p o s t forbidden response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t forbidden response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert benefit date using p o s t forbidden response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this insert benefit date using p o s t forbidden response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the insert benefit date using p o s t forbidden response
func (o *InsertBenefitDateUsingPOSTForbidden) Code() int {
	return 403
}

func (o *InsertBenefitDateUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTForbidden", 403)
}

func (o *InsertBenefitDateUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTForbidden", 403)
}

func (o *InsertBenefitDateUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertBenefitDateUsingPOSTNotFound creates a InsertBenefitDateUsingPOSTNotFound with default headers values
func NewInsertBenefitDateUsingPOSTNotFound() *InsertBenefitDateUsingPOSTNotFound {
	return &InsertBenefitDateUsingPOSTNotFound{}
}

/*
InsertBenefitDateUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type InsertBenefitDateUsingPOSTNotFound struct {
}

// IsSuccess returns true when this insert benefit date using p o s t not found response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert benefit date using p o s t not found response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t not found response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert benefit date using p o s t not found response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert benefit date using p o s t not found response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert benefit date using p o s t not found response
func (o *InsertBenefitDateUsingPOSTNotFound) Code() int {
	return 404
}

func (o *InsertBenefitDateUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTNotFound", 404)
}

func (o *InsertBenefitDateUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTNotFound", 404)
}

func (o *InsertBenefitDateUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertBenefitDateUsingPOSTInternalServerError creates a InsertBenefitDateUsingPOSTInternalServerError with default headers values
func NewInsertBenefitDateUsingPOSTInternalServerError() *InsertBenefitDateUsingPOSTInternalServerError {
	return &InsertBenefitDateUsingPOSTInternalServerError{}
}

/*
InsertBenefitDateUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type InsertBenefitDateUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this insert benefit date using p o s t internal server error response has a 2xx status code
func (o *InsertBenefitDateUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert benefit date using p o s t internal server error response has a 3xx status code
func (o *InsertBenefitDateUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert benefit date using p o s t internal server error response has a 4xx status code
func (o *InsertBenefitDateUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert benefit date using p o s t internal server error response has a 5xx status code
func (o *InsertBenefitDateUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this insert benefit date using p o s t internal server error response a status code equal to that given
func (o *InsertBenefitDateUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the insert benefit date using p o s t internal server error response
func (o *InsertBenefitDateUsingPOSTInternalServerError) Code() int {
	return 500
}

func (o *InsertBenefitDateUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTInternalServerError", 500)
}

func (o *InsertBenefitDateUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/benefit/benefitDate][%d] insertBenefitDateUsingPOSTInternalServerError", 500)
}

func (o *InsertBenefitDateUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
