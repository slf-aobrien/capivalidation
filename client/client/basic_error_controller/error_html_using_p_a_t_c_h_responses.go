// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ErrorHTMLUsingPATCHReader is a Reader for the ErrorHTMLUsingPATCH structure.
type ErrorHTMLUsingPATCHReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorHTMLUsingPATCHReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewErrorHTMLUsingPATCHOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewErrorHTMLUsingPATCHNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewErrorHTMLUsingPATCHUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewErrorHTMLUsingPATCHForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /compassintegrationapp/error] errorHtmlUsingPATCH", response, response.Code())
	}
}

// NewErrorHTMLUsingPATCHOK creates a ErrorHTMLUsingPATCHOK with default headers values
func NewErrorHTMLUsingPATCHOK() *ErrorHTMLUsingPATCHOK {
	return &ErrorHTMLUsingPATCHOK{}
}

/*
ErrorHTMLUsingPATCHOK describes a response with status code 200, with default header values.

OK
*/
type ErrorHTMLUsingPATCHOK struct {
	Payload *models.ModelAndView
}

// IsSuccess returns true when this error Html using p a t c h o k response has a 2xx status code
func (o *ErrorHTMLUsingPATCHOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this error Html using p a t c h o k response has a 3xx status code
func (o *ErrorHTMLUsingPATCHOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using p a t c h o k response has a 4xx status code
func (o *ErrorHTMLUsingPATCHOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this error Html using p a t c h o k response has a 5xx status code
func (o *ErrorHTMLUsingPATCHOK) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using p a t c h o k response a status code equal to that given
func (o *ErrorHTMLUsingPATCHOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the error Html using p a t c h o k response
func (o *ErrorHTMLUsingPATCHOK) Code() int {
	return 200
}

func (o *ErrorHTMLUsingPATCHOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHOK %s", 200, payload)
}

func (o *ErrorHTMLUsingPATCHOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHOK %s", 200, payload)
}

func (o *ErrorHTMLUsingPATCHOK) GetPayload() *models.ModelAndView {
	return o.Payload
}

func (o *ErrorHTMLUsingPATCHOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelAndView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorHTMLUsingPATCHNoContent creates a ErrorHTMLUsingPATCHNoContent with default headers values
func NewErrorHTMLUsingPATCHNoContent() *ErrorHTMLUsingPATCHNoContent {
	return &ErrorHTMLUsingPATCHNoContent{}
}

/*
ErrorHTMLUsingPATCHNoContent describes a response with status code 204, with default header values.

No Content
*/
type ErrorHTMLUsingPATCHNoContent struct {
}

// IsSuccess returns true when this error Html using p a t c h no content response has a 2xx status code
func (o *ErrorHTMLUsingPATCHNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this error Html using p a t c h no content response has a 3xx status code
func (o *ErrorHTMLUsingPATCHNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using p a t c h no content response has a 4xx status code
func (o *ErrorHTMLUsingPATCHNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this error Html using p a t c h no content response has a 5xx status code
func (o *ErrorHTMLUsingPATCHNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using p a t c h no content response a status code equal to that given
func (o *ErrorHTMLUsingPATCHNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the error Html using p a t c h no content response
func (o *ErrorHTMLUsingPATCHNoContent) Code() int {
	return 204
}

func (o *ErrorHTMLUsingPATCHNoContent) Error() string {
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHNoContent", 204)
}

func (o *ErrorHTMLUsingPATCHNoContent) String() string {
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHNoContent", 204)
}

func (o *ErrorHTMLUsingPATCHNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPATCHUnauthorized creates a ErrorHTMLUsingPATCHUnauthorized with default headers values
func NewErrorHTMLUsingPATCHUnauthorized() *ErrorHTMLUsingPATCHUnauthorized {
	return &ErrorHTMLUsingPATCHUnauthorized{}
}

/*
ErrorHTMLUsingPATCHUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ErrorHTMLUsingPATCHUnauthorized struct {
}

// IsSuccess returns true when this error Html using p a t c h unauthorized response has a 2xx status code
func (o *ErrorHTMLUsingPATCHUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this error Html using p a t c h unauthorized response has a 3xx status code
func (o *ErrorHTMLUsingPATCHUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using p a t c h unauthorized response has a 4xx status code
func (o *ErrorHTMLUsingPATCHUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this error Html using p a t c h unauthorized response has a 5xx status code
func (o *ErrorHTMLUsingPATCHUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using p a t c h unauthorized response a status code equal to that given
func (o *ErrorHTMLUsingPATCHUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the error Html using p a t c h unauthorized response
func (o *ErrorHTMLUsingPATCHUnauthorized) Code() int {
	return 401
}

func (o *ErrorHTMLUsingPATCHUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHUnauthorized", 401)
}

func (o *ErrorHTMLUsingPATCHUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHUnauthorized", 401)
}

func (o *ErrorHTMLUsingPATCHUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingPATCHForbidden creates a ErrorHTMLUsingPATCHForbidden with default headers values
func NewErrorHTMLUsingPATCHForbidden() *ErrorHTMLUsingPATCHForbidden {
	return &ErrorHTMLUsingPATCHForbidden{}
}

/*
ErrorHTMLUsingPATCHForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ErrorHTMLUsingPATCHForbidden struct {
}

// IsSuccess returns true when this error Html using p a t c h forbidden response has a 2xx status code
func (o *ErrorHTMLUsingPATCHForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this error Html using p a t c h forbidden response has a 3xx status code
func (o *ErrorHTMLUsingPATCHForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using p a t c h forbidden response has a 4xx status code
func (o *ErrorHTMLUsingPATCHForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this error Html using p a t c h forbidden response has a 5xx status code
func (o *ErrorHTMLUsingPATCHForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using p a t c h forbidden response a status code equal to that given
func (o *ErrorHTMLUsingPATCHForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the error Html using p a t c h forbidden response
func (o *ErrorHTMLUsingPATCHForbidden) Code() int {
	return 403
}

func (o *ErrorHTMLUsingPATCHForbidden) Error() string {
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHForbidden", 403)
}

func (o *ErrorHTMLUsingPATCHForbidden) String() string {
	return fmt.Sprintf("[PATCH /compassintegrationapp/error][%d] errorHtmlUsingPATCHForbidden", 403)
}

func (o *ErrorHTMLUsingPATCHForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
