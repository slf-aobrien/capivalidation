// Code generated by go-swagger; DO NOT EDIT.

package bill

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetTraditionalBillUsingGETReader is a Reader for the GetTraditionalBillUsingGET structure.
type GetTraditionalBillUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTraditionalBillUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTraditionalBillUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTraditionalBillUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTraditionalBillUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTraditionalBillUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTraditionalBillUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTraditionalBillUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/bill/traditional] getTraditionalBillUsingGET", response, response.Code())
	}
}

// NewGetTraditionalBillUsingGETOK creates a GetTraditionalBillUsingGETOK with default headers values
func NewGetTraditionalBillUsingGETOK() *GetTraditionalBillUsingGETOK {
	return &GetTraditionalBillUsingGETOK{}
}

/*
GetTraditionalBillUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetTraditionalBillUsingGETOK struct {
	Payload *models.ResponseWrapperTraditionalBillPageDTO
}

// IsSuccess returns true when this get traditional bill using g e t o k response has a 2xx status code
func (o *GetTraditionalBillUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get traditional bill using g e t o k response has a 3xx status code
func (o *GetTraditionalBillUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get traditional bill using g e t o k response has a 4xx status code
func (o *GetTraditionalBillUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get traditional bill using g e t o k response has a 5xx status code
func (o *GetTraditionalBillUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get traditional bill using g e t o k response a status code equal to that given
func (o *GetTraditionalBillUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get traditional bill using g e t o k response
func (o *GetTraditionalBillUsingGETOK) Code() int {
	return 200
}

func (o *GetTraditionalBillUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETOK %s", 200, payload)
}

func (o *GetTraditionalBillUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETOK %s", 200, payload)
}

func (o *GetTraditionalBillUsingGETOK) GetPayload() *models.ResponseWrapperTraditionalBillPageDTO {
	return o.Payload
}

func (o *GetTraditionalBillUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperTraditionalBillPageDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTraditionalBillUsingGETBadRequest creates a GetTraditionalBillUsingGETBadRequest with default headers values
func NewGetTraditionalBillUsingGETBadRequest() *GetTraditionalBillUsingGETBadRequest {
	return &GetTraditionalBillUsingGETBadRequest{}
}

/*
GetTraditionalBillUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTraditionalBillUsingGETBadRequest struct {
}

// IsSuccess returns true when this get traditional bill using g e t bad request response has a 2xx status code
func (o *GetTraditionalBillUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get traditional bill using g e t bad request response has a 3xx status code
func (o *GetTraditionalBillUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get traditional bill using g e t bad request response has a 4xx status code
func (o *GetTraditionalBillUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get traditional bill using g e t bad request response has a 5xx status code
func (o *GetTraditionalBillUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get traditional bill using g e t bad request response a status code equal to that given
func (o *GetTraditionalBillUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get traditional bill using g e t bad request response
func (o *GetTraditionalBillUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetTraditionalBillUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETBadRequest", 400)
}

func (o *GetTraditionalBillUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETBadRequest", 400)
}

func (o *GetTraditionalBillUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTraditionalBillUsingGETUnauthorized creates a GetTraditionalBillUsingGETUnauthorized with default headers values
func NewGetTraditionalBillUsingGETUnauthorized() *GetTraditionalBillUsingGETUnauthorized {
	return &GetTraditionalBillUsingGETUnauthorized{}
}

/*
GetTraditionalBillUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTraditionalBillUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get traditional bill using g e t unauthorized response has a 2xx status code
func (o *GetTraditionalBillUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get traditional bill using g e t unauthorized response has a 3xx status code
func (o *GetTraditionalBillUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get traditional bill using g e t unauthorized response has a 4xx status code
func (o *GetTraditionalBillUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get traditional bill using g e t unauthorized response has a 5xx status code
func (o *GetTraditionalBillUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get traditional bill using g e t unauthorized response a status code equal to that given
func (o *GetTraditionalBillUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get traditional bill using g e t unauthorized response
func (o *GetTraditionalBillUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetTraditionalBillUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETUnauthorized", 401)
}

func (o *GetTraditionalBillUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETUnauthorized", 401)
}

func (o *GetTraditionalBillUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTraditionalBillUsingGETForbidden creates a GetTraditionalBillUsingGETForbidden with default headers values
func NewGetTraditionalBillUsingGETForbidden() *GetTraditionalBillUsingGETForbidden {
	return &GetTraditionalBillUsingGETForbidden{}
}

/*
GetTraditionalBillUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetTraditionalBillUsingGETForbidden struct {
}

// IsSuccess returns true when this get traditional bill using g e t forbidden response has a 2xx status code
func (o *GetTraditionalBillUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get traditional bill using g e t forbidden response has a 3xx status code
func (o *GetTraditionalBillUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get traditional bill using g e t forbidden response has a 4xx status code
func (o *GetTraditionalBillUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get traditional bill using g e t forbidden response has a 5xx status code
func (o *GetTraditionalBillUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get traditional bill using g e t forbidden response a status code equal to that given
func (o *GetTraditionalBillUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get traditional bill using g e t forbidden response
func (o *GetTraditionalBillUsingGETForbidden) Code() int {
	return 403
}

func (o *GetTraditionalBillUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETForbidden", 403)
}

func (o *GetTraditionalBillUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETForbidden", 403)
}

func (o *GetTraditionalBillUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTraditionalBillUsingGETNotFound creates a GetTraditionalBillUsingGETNotFound with default headers values
func NewGetTraditionalBillUsingGETNotFound() *GetTraditionalBillUsingGETNotFound {
	return &GetTraditionalBillUsingGETNotFound{}
}

/*
GetTraditionalBillUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetTraditionalBillUsingGETNotFound struct {
}

// IsSuccess returns true when this get traditional bill using g e t not found response has a 2xx status code
func (o *GetTraditionalBillUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get traditional bill using g e t not found response has a 3xx status code
func (o *GetTraditionalBillUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get traditional bill using g e t not found response has a 4xx status code
func (o *GetTraditionalBillUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get traditional bill using g e t not found response has a 5xx status code
func (o *GetTraditionalBillUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get traditional bill using g e t not found response a status code equal to that given
func (o *GetTraditionalBillUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get traditional bill using g e t not found response
func (o *GetTraditionalBillUsingGETNotFound) Code() int {
	return 404
}

func (o *GetTraditionalBillUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETNotFound", 404)
}

func (o *GetTraditionalBillUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETNotFound", 404)
}

func (o *GetTraditionalBillUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTraditionalBillUsingGETInternalServerError creates a GetTraditionalBillUsingGETInternalServerError with default headers values
func NewGetTraditionalBillUsingGETInternalServerError() *GetTraditionalBillUsingGETInternalServerError {
	return &GetTraditionalBillUsingGETInternalServerError{}
}

/*
GetTraditionalBillUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetTraditionalBillUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get traditional bill using g e t internal server error response has a 2xx status code
func (o *GetTraditionalBillUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get traditional bill using g e t internal server error response has a 3xx status code
func (o *GetTraditionalBillUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get traditional bill using g e t internal server error response has a 4xx status code
func (o *GetTraditionalBillUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get traditional bill using g e t internal server error response has a 5xx status code
func (o *GetTraditionalBillUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get traditional bill using g e t internal server error response a status code equal to that given
func (o *GetTraditionalBillUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get traditional bill using g e t internal server error response
func (o *GetTraditionalBillUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetTraditionalBillUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETInternalServerError", 500)
}

func (o *GetTraditionalBillUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/traditional][%d] getTraditionalBillUsingGETInternalServerError", 500)
}

func (o *GetTraditionalBillUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
