// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateFirstNameUsingPUTReader is a Reader for the UpdateFirstNameUsingPUT structure.
type UpdateFirstNameUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFirstNameUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFirstNameUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateFirstNameUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateFirstNameUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateFirstNameUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateFirstNameUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateFirstNameUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateFirstNameUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/dependent/update/firstName] updateFirstNameUsingPUT", response, response.Code())
	}
}

// NewUpdateFirstNameUsingPUTOK creates a UpdateFirstNameUsingPUTOK with default headers values
func NewUpdateFirstNameUsingPUTOK() *UpdateFirstNameUsingPUTOK {
	return &UpdateFirstNameUsingPUTOK{}
}

/*
UpdateFirstNameUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateFirstNameUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update first name using p u t o k response has a 2xx status code
func (o *UpdateFirstNameUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update first name using p u t o k response has a 3xx status code
func (o *UpdateFirstNameUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t o k response has a 4xx status code
func (o *UpdateFirstNameUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update first name using p u t o k response has a 5xx status code
func (o *UpdateFirstNameUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update first name using p u t o k response a status code equal to that given
func (o *UpdateFirstNameUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update first name using p u t o k response
func (o *UpdateFirstNameUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateFirstNameUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTOK %s", 200, payload)
}

func (o *UpdateFirstNameUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTOK %s", 200, payload)
}

func (o *UpdateFirstNameUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateFirstNameUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFirstNameUsingPUTCreated creates a UpdateFirstNameUsingPUTCreated with default headers values
func NewUpdateFirstNameUsingPUTCreated() *UpdateFirstNameUsingPUTCreated {
	return &UpdateFirstNameUsingPUTCreated{}
}

/*
UpdateFirstNameUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateFirstNameUsingPUTCreated struct {
}

// IsSuccess returns true when this update first name using p u t created response has a 2xx status code
func (o *UpdateFirstNameUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update first name using p u t created response has a 3xx status code
func (o *UpdateFirstNameUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t created response has a 4xx status code
func (o *UpdateFirstNameUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update first name using p u t created response has a 5xx status code
func (o *UpdateFirstNameUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update first name using p u t created response a status code equal to that given
func (o *UpdateFirstNameUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update first name using p u t created response
func (o *UpdateFirstNameUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateFirstNameUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTCreated", 201)
}

func (o *UpdateFirstNameUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTCreated", 201)
}

func (o *UpdateFirstNameUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirstNameUsingPUTBadRequest creates a UpdateFirstNameUsingPUTBadRequest with default headers values
func NewUpdateFirstNameUsingPUTBadRequest() *UpdateFirstNameUsingPUTBadRequest {
	return &UpdateFirstNameUsingPUTBadRequest{}
}

/*
UpdateFirstNameUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateFirstNameUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update first name using p u t bad request response has a 2xx status code
func (o *UpdateFirstNameUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update first name using p u t bad request response has a 3xx status code
func (o *UpdateFirstNameUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t bad request response has a 4xx status code
func (o *UpdateFirstNameUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update first name using p u t bad request response has a 5xx status code
func (o *UpdateFirstNameUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update first name using p u t bad request response a status code equal to that given
func (o *UpdateFirstNameUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update first name using p u t bad request response
func (o *UpdateFirstNameUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateFirstNameUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTBadRequest", 400)
}

func (o *UpdateFirstNameUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTBadRequest", 400)
}

func (o *UpdateFirstNameUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirstNameUsingPUTUnauthorized creates a UpdateFirstNameUsingPUTUnauthorized with default headers values
func NewUpdateFirstNameUsingPUTUnauthorized() *UpdateFirstNameUsingPUTUnauthorized {
	return &UpdateFirstNameUsingPUTUnauthorized{}
}

/*
UpdateFirstNameUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateFirstNameUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update first name using p u t unauthorized response has a 2xx status code
func (o *UpdateFirstNameUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update first name using p u t unauthorized response has a 3xx status code
func (o *UpdateFirstNameUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t unauthorized response has a 4xx status code
func (o *UpdateFirstNameUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update first name using p u t unauthorized response has a 5xx status code
func (o *UpdateFirstNameUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update first name using p u t unauthorized response a status code equal to that given
func (o *UpdateFirstNameUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update first name using p u t unauthorized response
func (o *UpdateFirstNameUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateFirstNameUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTUnauthorized", 401)
}

func (o *UpdateFirstNameUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTUnauthorized", 401)
}

func (o *UpdateFirstNameUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirstNameUsingPUTForbidden creates a UpdateFirstNameUsingPUTForbidden with default headers values
func NewUpdateFirstNameUsingPUTForbidden() *UpdateFirstNameUsingPUTForbidden {
	return &UpdateFirstNameUsingPUTForbidden{}
}

/*
UpdateFirstNameUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateFirstNameUsingPUTForbidden struct {
}

// IsSuccess returns true when this update first name using p u t forbidden response has a 2xx status code
func (o *UpdateFirstNameUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update first name using p u t forbidden response has a 3xx status code
func (o *UpdateFirstNameUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t forbidden response has a 4xx status code
func (o *UpdateFirstNameUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update first name using p u t forbidden response has a 5xx status code
func (o *UpdateFirstNameUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update first name using p u t forbidden response a status code equal to that given
func (o *UpdateFirstNameUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update first name using p u t forbidden response
func (o *UpdateFirstNameUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateFirstNameUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTForbidden", 403)
}

func (o *UpdateFirstNameUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTForbidden", 403)
}

func (o *UpdateFirstNameUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirstNameUsingPUTNotFound creates a UpdateFirstNameUsingPUTNotFound with default headers values
func NewUpdateFirstNameUsingPUTNotFound() *UpdateFirstNameUsingPUTNotFound {
	return &UpdateFirstNameUsingPUTNotFound{}
}

/*
UpdateFirstNameUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateFirstNameUsingPUTNotFound struct {
}

// IsSuccess returns true when this update first name using p u t not found response has a 2xx status code
func (o *UpdateFirstNameUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update first name using p u t not found response has a 3xx status code
func (o *UpdateFirstNameUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t not found response has a 4xx status code
func (o *UpdateFirstNameUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update first name using p u t not found response has a 5xx status code
func (o *UpdateFirstNameUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update first name using p u t not found response a status code equal to that given
func (o *UpdateFirstNameUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update first name using p u t not found response
func (o *UpdateFirstNameUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateFirstNameUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTNotFound", 404)
}

func (o *UpdateFirstNameUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTNotFound", 404)
}

func (o *UpdateFirstNameUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateFirstNameUsingPUTInternalServerError creates a UpdateFirstNameUsingPUTInternalServerError with default headers values
func NewUpdateFirstNameUsingPUTInternalServerError() *UpdateFirstNameUsingPUTInternalServerError {
	return &UpdateFirstNameUsingPUTInternalServerError{}
}

/*
UpdateFirstNameUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateFirstNameUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update first name using p u t internal server error response has a 2xx status code
func (o *UpdateFirstNameUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update first name using p u t internal server error response has a 3xx status code
func (o *UpdateFirstNameUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update first name using p u t internal server error response has a 4xx status code
func (o *UpdateFirstNameUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update first name using p u t internal server error response has a 5xx status code
func (o *UpdateFirstNameUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update first name using p u t internal server error response a status code equal to that given
func (o *UpdateFirstNameUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update first name using p u t internal server error response
func (o *UpdateFirstNameUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateFirstNameUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTInternalServerError", 500)
}

func (o *UpdateFirstNameUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/firstName][%d] updateFirstNameUsingPUTInternalServerError", 500)
}

func (o *UpdateFirstNameUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
