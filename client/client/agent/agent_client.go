// Code generated by go-swagger; DO NOT EDIT.

package agent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new agent API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new agent API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new agent API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for agent API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationAebCasAgentAccreditationUpdateDataV1JSON sets the Content-Type header to "application/aeb.cas.agent.accreditation.update.data.v1+json".
func WithContentTypeApplicationAebCasAgentAccreditationUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.agent.accreditation.update.data.v1+json"}
}

// WithContentTypeApplicationAebCasAgentUpdateDataV1JSON sets the Content-Type header to "application/aeb.cas.agent.update.data.v1+json".
func WithContentTypeApplicationAebCasAgentUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.agent.update.data.v1+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationAebCasAgentAccreditationDataV1JSON sets the Accept header to "application/aeb.cas.agent.accreditation.data.v1+json".
func WithAcceptApplicationAebCasAgentAccreditationDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.accreditation.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentAccreditationInsertDataV1JSON sets the Accept header to "application/aeb.cas.agent.accreditation.insert.data.v1+json".
func WithAcceptApplicationAebCasAgentAccreditationInsertDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.accreditation.insert.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentAccreditationUpdateDataV1JSON sets the Accept header to "application/aeb.cas.agent.accreditation.update.data.v1+json".
func WithAcceptApplicationAebCasAgentAccreditationUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.accreditation.update.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentAndAgencyInsertDataV1JSON sets the Accept header to "application/aeb.cas.agent.and.agency.insert.data.v1+json".
func WithAcceptApplicationAebCasAgentAndAgencyInsertDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.and.agency.insert.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentDataV1JSON sets the Accept header to "application/aeb.cas.agent.data.v1+json".
func WithAcceptApplicationAebCasAgentDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentDetailDataV1JSON sets the Accept header to "application/aeb.cas.agent.detail.data.v1+json".
func WithAcceptApplicationAebCasAgentDetailDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.detail.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentInsertDataV1JSON sets the Accept header to "application/aeb.cas.agent.insert.data.v1+json".
func WithAcceptApplicationAebCasAgentInsertDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.insert.data.v1+json"}
}

// WithAcceptApplicationAebCasAgentUpdateDataV1JSON sets the Accept header to "application/aeb.cas.agent.update.data.v1+json".
func WithAcceptApplicationAebCasAgentUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agent.update.data.v1+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAccreditationUsingGET1(params *GetAccreditationUsingGET1Params, opts ...ClientOption) (*GetAccreditationUsingGET1OK, error)

	GetAgentDetailUsingGET(params *GetAgentDetailUsingGETParams, opts ...ClientOption) (*GetAgentDetailUsingGETOK, error)

	GetAgentUsingGET(params *GetAgentUsingGETParams, opts ...ClientOption) (*GetAgentUsingGETOK, error)

	InsertAccreditationUsingPOST1(params *InsertAccreditationUsingPOST1Params, opts ...ClientOption) (*InsertAccreditationUsingPOST1OK, *InsertAccreditationUsingPOST1Created, error)

	InsertAgentAndAgencyUsingPOST(params *InsertAgentAndAgencyUsingPOSTParams, opts ...ClientOption) (*InsertAgentAndAgencyUsingPOSTOK, *InsertAgentAndAgencyUsingPOSTCreated, error)

	InsertAgentUsingPOST(params *InsertAgentUsingPOSTParams, opts ...ClientOption) (*InsertAgentUsingPOSTOK, *InsertAgentUsingPOSTCreated, error)

	UpdateAccreditationUsingPUT1(params *UpdateAccreditationUsingPUT1Params, opts ...ClientOption) (*UpdateAccreditationUsingPUT1OK, *UpdateAccreditationUsingPUT1Created, error)

	UpdateAgentUsingPUT(params *UpdateAgentUsingPUTParams, opts ...ClientOption) (*UpdateAgentUsingPUTOK, *UpdateAgentUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAccreditationUsingGET1 gets agent accreditation

None
*/
func (a *Client) GetAccreditationUsingGET1(params *GetAccreditationUsingGET1Params, opts ...ClientOption) (*GetAccreditationUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccreditationUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccreditationUsingGET_1",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agent/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.accreditation.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccreditationUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccreditationUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccreditationUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAgentDetailUsingGET gets sunlife us dc compassintegrationapplication service agent detail method

None
*/
func (a *Client) GetAgentDetailUsingGET(params *GetAgentDetailUsingGETParams, opts ...ClientOption) (*GetAgentDetailUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentDetailUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentDetailUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agent/agentDetail",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.detail.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAgentDetailUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentDetailUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentDetailUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAgentUsingGET gets agent

None
*/
func (a *Client) GetAgentUsingGET(params *GetAgentUsingGETParams, opts ...ClientOption) (*GetAgentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgentUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agent",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAgentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAccreditationUsingPOST1 inserts an accreditation for an agent

None
*/
func (a *Client) InsertAccreditationUsingPOST1(params *InsertAccreditationUsingPOST1Params, opts ...ClientOption) (*InsertAccreditationUsingPOST1OK, *InsertAccreditationUsingPOST1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAccreditationUsingPOST1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAccreditationUsingPOST_1",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/agent/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.accreditation.insert.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAccreditationUsingPOST1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAccreditationUsingPOST1OK:
		return value, nil, nil
	case *InsertAccreditationUsingPOST1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAgentAndAgencyUsingPOST inserts agent and agency

None
*/
func (a *Client) InsertAgentAndAgencyUsingPOST(params *InsertAgentAndAgencyUsingPOSTParams, opts ...ClientOption) (*InsertAgentAndAgencyUsingPOSTOK, *InsertAgentAndAgencyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAgentAndAgencyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAgentAndAgencyUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/agent/withAgency",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.and.agency.insert.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAgentAndAgencyUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAgentAndAgencyUsingPOSTOK:
		return value, nil, nil
	case *InsertAgentAndAgencyUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAgentUsingPOST inserts agent

None
*/
func (a *Client) InsertAgentUsingPOST(params *InsertAgentUsingPOSTParams, opts ...ClientOption) (*InsertAgentUsingPOSTOK, *InsertAgentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAgentUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAgentUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/agent",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.insert.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAgentUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAgentUsingPOSTOK:
		return value, nil, nil
	case *InsertAgentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAccreditationUsingPUT1 updates an agent s accreditation

must include either the accreditation key, agent number or agent key
*/
func (a *Client) UpdateAccreditationUsingPUT1(params *UpdateAccreditationUsingPUT1Params, opts ...ClientOption) (*UpdateAccreditationUsingPUT1OK, *UpdateAccreditationUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccreditationUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccreditationUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/agent/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.accreditation.update.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.agent.accreditation.update.data.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAccreditationUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAccreditationUsingPUT1OK:
		return value, nil, nil
	case *UpdateAccreditationUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAgentUsingPUT updates an agent

the agent dto only needs to include agentNumber, agencyNumber or agencyKey, AGTENTITYPOSCD, AGTAUTHCD and AGTSTATCD
*/
func (a *Client) UpdateAgentUsingPUT(params *UpdateAgentUsingPUTParams, opts ...ClientOption) (*UpdateAgentUsingPUTOK, *UpdateAgentUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAgentUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAgentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/agent",
		ProducesMediaTypes: []string{"application/aeb.cas.agent.update.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.agent.update.data.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAgentUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAgentUsingPUTOK:
		return value, nil, nil
	case *UpdateAgentUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
