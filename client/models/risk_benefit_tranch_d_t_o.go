// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RiskBenefitTranchDTO RiskBenefitTranchDTO
//
// swagger:model RiskBenefitTranchDTO
type RiskBenefitTranchDTO struct {

	// dependent begin
	DependentBegin string `json:"dependentBegin,omitempty"`

	// dependent end
	DependentEnd string `json:"dependentEnd,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// family begin
	FamilyBegin string `json:"familyBegin,omitempty"`

	// family end
	FamilyEnd string `json:"familyEnd,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// risk benefit sentence list
	RiskBenefitSentenceList []*RiskBenefitSentenceDTO `json:"riskBenefitSentenceList"`

	// salary begin amount
	SalaryBeginAmount string `json:"salaryBeginAmount,omitempty"`

	// salary end amount
	SalaryEndAmount string `json:"salaryEndAmount,omitempty"`

	// service begin
	ServiceBegin string `json:"serviceBegin,omitempty"`

	// service end
	ServiceEnd string `json:"serviceEnd,omitempty"`
}

// Validate validates this risk benefit tranch d t o
func (m *RiskBenefitTranchDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRiskBenefitSentenceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskBenefitTranchDTO) validateRiskBenefitSentenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.RiskBenefitSentenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.RiskBenefitSentenceList); i++ {
		if swag.IsZero(m.RiskBenefitSentenceList[i]) { // not required
			continue
		}

		if m.RiskBenefitSentenceList[i] != nil {
			if err := m.RiskBenefitSentenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskBenefitSentenceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("riskBenefitSentenceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this risk benefit tranch d t o based on the context it is used
func (m *RiskBenefitTranchDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRiskBenefitSentenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskBenefitTranchDTO) contextValidateRiskBenefitSentenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RiskBenefitSentenceList); i++ {

		if m.RiskBenefitSentenceList[i] != nil {

			if swag.IsZero(m.RiskBenefitSentenceList[i]) { // not required
				return nil
			}

			if err := m.RiskBenefitSentenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskBenefitSentenceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("riskBenefitSentenceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RiskBenefitTranchDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskBenefitTranchDTO) UnmarshalBinary(b []byte) error {
	var res RiskBenefitTranchDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
