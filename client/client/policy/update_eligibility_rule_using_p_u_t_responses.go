// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateEligibilityRuleUsingPUTReader is a Reader for the UpdateEligibilityRuleUsingPUT structure.
type UpdateEligibilityRuleUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEligibilityRuleUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEligibilityRuleUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateEligibilityRuleUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEligibilityRuleUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateEligibilityRuleUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateEligibilityRuleUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEligibilityRuleUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateEligibilityRuleUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/eligibilityRule] updateEligibilityRuleUsingPUT", response, response.Code())
	}
}

// NewUpdateEligibilityRuleUsingPUTOK creates a UpdateEligibilityRuleUsingPUTOK with default headers values
func NewUpdateEligibilityRuleUsingPUTOK() *UpdateEligibilityRuleUsingPUTOK {
	return &UpdateEligibilityRuleUsingPUTOK{}
}

/*
UpdateEligibilityRuleUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateEligibilityRuleUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update eligibility rule using p u t o k response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update eligibility rule using p u t o k response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t o k response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update eligibility rule using p u t o k response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update eligibility rule using p u t o k response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update eligibility rule using p u t o k response
func (o *UpdateEligibilityRuleUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateEligibilityRuleUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateEligibilityRuleUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateEligibilityRuleUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateEligibilityRuleUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEligibilityRuleUsingPUTCreated creates a UpdateEligibilityRuleUsingPUTCreated with default headers values
func NewUpdateEligibilityRuleUsingPUTCreated() *UpdateEligibilityRuleUsingPUTCreated {
	return &UpdateEligibilityRuleUsingPUTCreated{}
}

/*
UpdateEligibilityRuleUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateEligibilityRuleUsingPUTCreated struct {
}

// IsSuccess returns true when this update eligibility rule using p u t created response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update eligibility rule using p u t created response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t created response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update eligibility rule using p u t created response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update eligibility rule using p u t created response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update eligibility rule using p u t created response
func (o *UpdateEligibilityRuleUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateEligibilityRuleUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTCreated", 201)
}

func (o *UpdateEligibilityRuleUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTCreated", 201)
}

func (o *UpdateEligibilityRuleUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEligibilityRuleUsingPUTBadRequest creates a UpdateEligibilityRuleUsingPUTBadRequest with default headers values
func NewUpdateEligibilityRuleUsingPUTBadRequest() *UpdateEligibilityRuleUsingPUTBadRequest {
	return &UpdateEligibilityRuleUsingPUTBadRequest{}
}

/*
UpdateEligibilityRuleUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateEligibilityRuleUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update eligibility rule using p u t bad request response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update eligibility rule using p u t bad request response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t bad request response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update eligibility rule using p u t bad request response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update eligibility rule using p u t bad request response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update eligibility rule using p u t bad request response
func (o *UpdateEligibilityRuleUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateEligibilityRuleUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTBadRequest", 400)
}

func (o *UpdateEligibilityRuleUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTBadRequest", 400)
}

func (o *UpdateEligibilityRuleUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEligibilityRuleUsingPUTUnauthorized creates a UpdateEligibilityRuleUsingPUTUnauthorized with default headers values
func NewUpdateEligibilityRuleUsingPUTUnauthorized() *UpdateEligibilityRuleUsingPUTUnauthorized {
	return &UpdateEligibilityRuleUsingPUTUnauthorized{}
}

/*
UpdateEligibilityRuleUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateEligibilityRuleUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update eligibility rule using p u t unauthorized response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update eligibility rule using p u t unauthorized response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t unauthorized response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update eligibility rule using p u t unauthorized response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update eligibility rule using p u t unauthorized response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update eligibility rule using p u t unauthorized response
func (o *UpdateEligibilityRuleUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateEligibilityRuleUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateEligibilityRuleUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateEligibilityRuleUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEligibilityRuleUsingPUTForbidden creates a UpdateEligibilityRuleUsingPUTForbidden with default headers values
func NewUpdateEligibilityRuleUsingPUTForbidden() *UpdateEligibilityRuleUsingPUTForbidden {
	return &UpdateEligibilityRuleUsingPUTForbidden{}
}

/*
UpdateEligibilityRuleUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateEligibilityRuleUsingPUTForbidden struct {
}

// IsSuccess returns true when this update eligibility rule using p u t forbidden response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update eligibility rule using p u t forbidden response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t forbidden response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update eligibility rule using p u t forbidden response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update eligibility rule using p u t forbidden response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update eligibility rule using p u t forbidden response
func (o *UpdateEligibilityRuleUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateEligibilityRuleUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTForbidden", 403)
}

func (o *UpdateEligibilityRuleUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTForbidden", 403)
}

func (o *UpdateEligibilityRuleUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEligibilityRuleUsingPUTNotFound creates a UpdateEligibilityRuleUsingPUTNotFound with default headers values
func NewUpdateEligibilityRuleUsingPUTNotFound() *UpdateEligibilityRuleUsingPUTNotFound {
	return &UpdateEligibilityRuleUsingPUTNotFound{}
}

/*
UpdateEligibilityRuleUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateEligibilityRuleUsingPUTNotFound struct {
}

// IsSuccess returns true when this update eligibility rule using p u t not found response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update eligibility rule using p u t not found response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t not found response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update eligibility rule using p u t not found response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update eligibility rule using p u t not found response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update eligibility rule using p u t not found response
func (o *UpdateEligibilityRuleUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateEligibilityRuleUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTNotFound", 404)
}

func (o *UpdateEligibilityRuleUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTNotFound", 404)
}

func (o *UpdateEligibilityRuleUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEligibilityRuleUsingPUTInternalServerError creates a UpdateEligibilityRuleUsingPUTInternalServerError with default headers values
func NewUpdateEligibilityRuleUsingPUTInternalServerError() *UpdateEligibilityRuleUsingPUTInternalServerError {
	return &UpdateEligibilityRuleUsingPUTInternalServerError{}
}

/*
UpdateEligibilityRuleUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateEligibilityRuleUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update eligibility rule using p u t internal server error response has a 2xx status code
func (o *UpdateEligibilityRuleUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update eligibility rule using p u t internal server error response has a 3xx status code
func (o *UpdateEligibilityRuleUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update eligibility rule using p u t internal server error response has a 4xx status code
func (o *UpdateEligibilityRuleUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update eligibility rule using p u t internal server error response has a 5xx status code
func (o *UpdateEligibilityRuleUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update eligibility rule using p u t internal server error response a status code equal to that given
func (o *UpdateEligibilityRuleUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update eligibility rule using p u t internal server error response
func (o *UpdateEligibilityRuleUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateEligibilityRuleUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTInternalServerError", 500)
}

func (o *UpdateEligibilityRuleUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/eligibilityRule][%d] updateEligibilityRuleUsingPUTInternalServerError", 500)
}

func (o *UpdateEligibilityRuleUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
