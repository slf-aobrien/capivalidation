// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RiskEnhancedEligibilityRuleDTO RiskEnhancedEligibilityRuleDTO
//
// swagger:model RiskEnhancedEligibilityRuleDTO
type RiskEnhancedEligibilityRuleDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// eligibility group description
	EligibilityGroupDescription string `json:"eligibilityGroupDescription,omitempty"`

	// grandfather date
	GrandfatherDate string `json:"grandfatherDate,omitempty"`

	// grandfather date type
	GrandfatherDateType string `json:"grandfatherDateType,omitempty"`

	// maximum entrant age
	MaximumEntrantAge string `json:"maximumEntrantAge,omitempty"`

	// member date type
	MemberDateType string `json:"memberDateType,omitempty"`

	// minimum entrant age
	MinimumEntrantAge string `json:"minimumEntrantAge,omitempty"`

	// required date type
	RequiredDateType string `json:"requiredDateType,omitempty"`

	// risk enhanced eligibility tranch list
	RiskEnhancedEligibilityTranchList []*RiskEnhancedEligibilityTranchDTO `json:"riskEnhancedEligibilityTranchList"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this risk enhanced eligibility rule d t o
func (m *RiskEnhancedEligibilityRuleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRiskEnhancedEligibilityTranchList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskEnhancedEligibilityRuleDTO) validateRiskEnhancedEligibilityTranchList(formats strfmt.Registry) error {
	if swag.IsZero(m.RiskEnhancedEligibilityTranchList) { // not required
		return nil
	}

	for i := 0; i < len(m.RiskEnhancedEligibilityTranchList); i++ {
		if swag.IsZero(m.RiskEnhancedEligibilityTranchList[i]) { // not required
			continue
		}

		if m.RiskEnhancedEligibilityTranchList[i] != nil {
			if err := m.RiskEnhancedEligibilityTranchList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskEnhancedEligibilityTranchList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("riskEnhancedEligibilityTranchList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this risk enhanced eligibility rule d t o based on the context it is used
func (m *RiskEnhancedEligibilityRuleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRiskEnhancedEligibilityTranchList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskEnhancedEligibilityRuleDTO) contextValidateRiskEnhancedEligibilityTranchList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RiskEnhancedEligibilityTranchList); i++ {

		if m.RiskEnhancedEligibilityTranchList[i] != nil {

			if swag.IsZero(m.RiskEnhancedEligibilityTranchList[i]) { // not required
				return nil
			}

			if err := m.RiskEnhancedEligibilityTranchList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskEnhancedEligibilityTranchList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("riskEnhancedEligibilityTranchList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RiskEnhancedEligibilityRuleDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskEnhancedEligibilityRuleDTO) UnmarshalBinary(b []byte) error {
	var res RiskEnhancedEligibilityRuleDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
