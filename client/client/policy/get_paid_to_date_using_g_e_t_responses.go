// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetPaidToDateUsingGETReader is a Reader for the GetPaidToDateUsingGET structure.
type GetPaidToDateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPaidToDateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPaidToDateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPaidToDateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPaidToDateUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPaidToDateUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPaidToDateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPaidToDateUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/paidToDate] getPaidToDateUsingGET", response, response.Code())
	}
}

// NewGetPaidToDateUsingGETOK creates a GetPaidToDateUsingGETOK with default headers values
func NewGetPaidToDateUsingGETOK() *GetPaidToDateUsingGETOK {
	return &GetPaidToDateUsingGETOK{}
}

/*
GetPaidToDateUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetPaidToDateUsingGETOK struct {
	Payload *models.ResponseWrapperPolicyDTO
}

// IsSuccess returns true when this get paid to date using g e t o k response has a 2xx status code
func (o *GetPaidToDateUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get paid to date using g e t o k response has a 3xx status code
func (o *GetPaidToDateUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get paid to date using g e t o k response has a 4xx status code
func (o *GetPaidToDateUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get paid to date using g e t o k response has a 5xx status code
func (o *GetPaidToDateUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get paid to date using g e t o k response a status code equal to that given
func (o *GetPaidToDateUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get paid to date using g e t o k response
func (o *GetPaidToDateUsingGETOK) Code() int {
	return 200
}

func (o *GetPaidToDateUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETOK %s", 200, payload)
}

func (o *GetPaidToDateUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETOK %s", 200, payload)
}

func (o *GetPaidToDateUsingGETOK) GetPayload() *models.ResponseWrapperPolicyDTO {
	return o.Payload
}

func (o *GetPaidToDateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperPolicyDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPaidToDateUsingGETBadRequest creates a GetPaidToDateUsingGETBadRequest with default headers values
func NewGetPaidToDateUsingGETBadRequest() *GetPaidToDateUsingGETBadRequest {
	return &GetPaidToDateUsingGETBadRequest{}
}

/*
GetPaidToDateUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPaidToDateUsingGETBadRequest struct {
}

// IsSuccess returns true when this get paid to date using g e t bad request response has a 2xx status code
func (o *GetPaidToDateUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get paid to date using g e t bad request response has a 3xx status code
func (o *GetPaidToDateUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get paid to date using g e t bad request response has a 4xx status code
func (o *GetPaidToDateUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get paid to date using g e t bad request response has a 5xx status code
func (o *GetPaidToDateUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get paid to date using g e t bad request response a status code equal to that given
func (o *GetPaidToDateUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get paid to date using g e t bad request response
func (o *GetPaidToDateUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetPaidToDateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETBadRequest", 400)
}

func (o *GetPaidToDateUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETBadRequest", 400)
}

func (o *GetPaidToDateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaidToDateUsingGETUnauthorized creates a GetPaidToDateUsingGETUnauthorized with default headers values
func NewGetPaidToDateUsingGETUnauthorized() *GetPaidToDateUsingGETUnauthorized {
	return &GetPaidToDateUsingGETUnauthorized{}
}

/*
GetPaidToDateUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPaidToDateUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get paid to date using g e t unauthorized response has a 2xx status code
func (o *GetPaidToDateUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get paid to date using g e t unauthorized response has a 3xx status code
func (o *GetPaidToDateUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get paid to date using g e t unauthorized response has a 4xx status code
func (o *GetPaidToDateUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get paid to date using g e t unauthorized response has a 5xx status code
func (o *GetPaidToDateUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get paid to date using g e t unauthorized response a status code equal to that given
func (o *GetPaidToDateUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get paid to date using g e t unauthorized response
func (o *GetPaidToDateUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetPaidToDateUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETUnauthorized", 401)
}

func (o *GetPaidToDateUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETUnauthorized", 401)
}

func (o *GetPaidToDateUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaidToDateUsingGETForbidden creates a GetPaidToDateUsingGETForbidden with default headers values
func NewGetPaidToDateUsingGETForbidden() *GetPaidToDateUsingGETForbidden {
	return &GetPaidToDateUsingGETForbidden{}
}

/*
GetPaidToDateUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPaidToDateUsingGETForbidden struct {
}

// IsSuccess returns true when this get paid to date using g e t forbidden response has a 2xx status code
func (o *GetPaidToDateUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get paid to date using g e t forbidden response has a 3xx status code
func (o *GetPaidToDateUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get paid to date using g e t forbidden response has a 4xx status code
func (o *GetPaidToDateUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get paid to date using g e t forbidden response has a 5xx status code
func (o *GetPaidToDateUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get paid to date using g e t forbidden response a status code equal to that given
func (o *GetPaidToDateUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get paid to date using g e t forbidden response
func (o *GetPaidToDateUsingGETForbidden) Code() int {
	return 403
}

func (o *GetPaidToDateUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETForbidden", 403)
}

func (o *GetPaidToDateUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETForbidden", 403)
}

func (o *GetPaidToDateUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaidToDateUsingGETNotFound creates a GetPaidToDateUsingGETNotFound with default headers values
func NewGetPaidToDateUsingGETNotFound() *GetPaidToDateUsingGETNotFound {
	return &GetPaidToDateUsingGETNotFound{}
}

/*
GetPaidToDateUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPaidToDateUsingGETNotFound struct {
}

// IsSuccess returns true when this get paid to date using g e t not found response has a 2xx status code
func (o *GetPaidToDateUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get paid to date using g e t not found response has a 3xx status code
func (o *GetPaidToDateUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get paid to date using g e t not found response has a 4xx status code
func (o *GetPaidToDateUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get paid to date using g e t not found response has a 5xx status code
func (o *GetPaidToDateUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get paid to date using g e t not found response a status code equal to that given
func (o *GetPaidToDateUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get paid to date using g e t not found response
func (o *GetPaidToDateUsingGETNotFound) Code() int {
	return 404
}

func (o *GetPaidToDateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETNotFound", 404)
}

func (o *GetPaidToDateUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETNotFound", 404)
}

func (o *GetPaidToDateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPaidToDateUsingGETInternalServerError creates a GetPaidToDateUsingGETInternalServerError with default headers values
func NewGetPaidToDateUsingGETInternalServerError() *GetPaidToDateUsingGETInternalServerError {
	return &GetPaidToDateUsingGETInternalServerError{}
}

/*
GetPaidToDateUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetPaidToDateUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get paid to date using g e t internal server error response has a 2xx status code
func (o *GetPaidToDateUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get paid to date using g e t internal server error response has a 3xx status code
func (o *GetPaidToDateUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get paid to date using g e t internal server error response has a 4xx status code
func (o *GetPaidToDateUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get paid to date using g e t internal server error response has a 5xx status code
func (o *GetPaidToDateUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get paid to date using g e t internal server error response a status code equal to that given
func (o *GetPaidToDateUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get paid to date using g e t internal server error response
func (o *GetPaidToDateUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetPaidToDateUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETInternalServerError", 500)
}

func (o *GetPaidToDateUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/paidToDate][%d] getPaidToDateUsingGETInternalServerError", 500)
}

func (o *GetPaidToDateUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
