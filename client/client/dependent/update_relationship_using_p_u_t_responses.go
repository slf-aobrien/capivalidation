// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateRelationshipUsingPUTReader is a Reader for the UpdateRelationshipUsingPUT structure.
type UpdateRelationshipUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRelationshipUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRelationshipUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateRelationshipUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRelationshipUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRelationshipUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRelationshipUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRelationshipUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRelationshipUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/dependent/update/relationship] updateRelationshipUsingPUT", response, response.Code())
	}
}

// NewUpdateRelationshipUsingPUTOK creates a UpdateRelationshipUsingPUTOK with default headers values
func NewUpdateRelationshipUsingPUTOK() *UpdateRelationshipUsingPUTOK {
	return &UpdateRelationshipUsingPUTOK{}
}

/*
UpdateRelationshipUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateRelationshipUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update relationship using p u t o k response has a 2xx status code
func (o *UpdateRelationshipUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update relationship using p u t o k response has a 3xx status code
func (o *UpdateRelationshipUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t o k response has a 4xx status code
func (o *UpdateRelationshipUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update relationship using p u t o k response has a 5xx status code
func (o *UpdateRelationshipUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update relationship using p u t o k response a status code equal to that given
func (o *UpdateRelationshipUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update relationship using p u t o k response
func (o *UpdateRelationshipUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateRelationshipUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTOK %s", 200, payload)
}

func (o *UpdateRelationshipUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTOK %s", 200, payload)
}

func (o *UpdateRelationshipUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateRelationshipUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRelationshipUsingPUTCreated creates a UpdateRelationshipUsingPUTCreated with default headers values
func NewUpdateRelationshipUsingPUTCreated() *UpdateRelationshipUsingPUTCreated {
	return &UpdateRelationshipUsingPUTCreated{}
}

/*
UpdateRelationshipUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateRelationshipUsingPUTCreated struct {
}

// IsSuccess returns true when this update relationship using p u t created response has a 2xx status code
func (o *UpdateRelationshipUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update relationship using p u t created response has a 3xx status code
func (o *UpdateRelationshipUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t created response has a 4xx status code
func (o *UpdateRelationshipUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update relationship using p u t created response has a 5xx status code
func (o *UpdateRelationshipUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update relationship using p u t created response a status code equal to that given
func (o *UpdateRelationshipUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update relationship using p u t created response
func (o *UpdateRelationshipUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateRelationshipUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTCreated", 201)
}

func (o *UpdateRelationshipUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTCreated", 201)
}

func (o *UpdateRelationshipUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRelationshipUsingPUTBadRequest creates a UpdateRelationshipUsingPUTBadRequest with default headers values
func NewUpdateRelationshipUsingPUTBadRequest() *UpdateRelationshipUsingPUTBadRequest {
	return &UpdateRelationshipUsingPUTBadRequest{}
}

/*
UpdateRelationshipUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRelationshipUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update relationship using p u t bad request response has a 2xx status code
func (o *UpdateRelationshipUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update relationship using p u t bad request response has a 3xx status code
func (o *UpdateRelationshipUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t bad request response has a 4xx status code
func (o *UpdateRelationshipUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update relationship using p u t bad request response has a 5xx status code
func (o *UpdateRelationshipUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update relationship using p u t bad request response a status code equal to that given
func (o *UpdateRelationshipUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update relationship using p u t bad request response
func (o *UpdateRelationshipUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateRelationshipUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTBadRequest", 400)
}

func (o *UpdateRelationshipUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTBadRequest", 400)
}

func (o *UpdateRelationshipUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRelationshipUsingPUTUnauthorized creates a UpdateRelationshipUsingPUTUnauthorized with default headers values
func NewUpdateRelationshipUsingPUTUnauthorized() *UpdateRelationshipUsingPUTUnauthorized {
	return &UpdateRelationshipUsingPUTUnauthorized{}
}

/*
UpdateRelationshipUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateRelationshipUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update relationship using p u t unauthorized response has a 2xx status code
func (o *UpdateRelationshipUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update relationship using p u t unauthorized response has a 3xx status code
func (o *UpdateRelationshipUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t unauthorized response has a 4xx status code
func (o *UpdateRelationshipUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update relationship using p u t unauthorized response has a 5xx status code
func (o *UpdateRelationshipUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update relationship using p u t unauthorized response a status code equal to that given
func (o *UpdateRelationshipUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update relationship using p u t unauthorized response
func (o *UpdateRelationshipUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateRelationshipUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTUnauthorized", 401)
}

func (o *UpdateRelationshipUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTUnauthorized", 401)
}

func (o *UpdateRelationshipUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRelationshipUsingPUTForbidden creates a UpdateRelationshipUsingPUTForbidden with default headers values
func NewUpdateRelationshipUsingPUTForbidden() *UpdateRelationshipUsingPUTForbidden {
	return &UpdateRelationshipUsingPUTForbidden{}
}

/*
UpdateRelationshipUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRelationshipUsingPUTForbidden struct {
}

// IsSuccess returns true when this update relationship using p u t forbidden response has a 2xx status code
func (o *UpdateRelationshipUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update relationship using p u t forbidden response has a 3xx status code
func (o *UpdateRelationshipUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t forbidden response has a 4xx status code
func (o *UpdateRelationshipUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update relationship using p u t forbidden response has a 5xx status code
func (o *UpdateRelationshipUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update relationship using p u t forbidden response a status code equal to that given
func (o *UpdateRelationshipUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update relationship using p u t forbidden response
func (o *UpdateRelationshipUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateRelationshipUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTForbidden", 403)
}

func (o *UpdateRelationshipUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTForbidden", 403)
}

func (o *UpdateRelationshipUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRelationshipUsingPUTNotFound creates a UpdateRelationshipUsingPUTNotFound with default headers values
func NewUpdateRelationshipUsingPUTNotFound() *UpdateRelationshipUsingPUTNotFound {
	return &UpdateRelationshipUsingPUTNotFound{}
}

/*
UpdateRelationshipUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRelationshipUsingPUTNotFound struct {
}

// IsSuccess returns true when this update relationship using p u t not found response has a 2xx status code
func (o *UpdateRelationshipUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update relationship using p u t not found response has a 3xx status code
func (o *UpdateRelationshipUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t not found response has a 4xx status code
func (o *UpdateRelationshipUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update relationship using p u t not found response has a 5xx status code
func (o *UpdateRelationshipUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update relationship using p u t not found response a status code equal to that given
func (o *UpdateRelationshipUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update relationship using p u t not found response
func (o *UpdateRelationshipUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateRelationshipUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTNotFound", 404)
}

func (o *UpdateRelationshipUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTNotFound", 404)
}

func (o *UpdateRelationshipUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRelationshipUsingPUTInternalServerError creates a UpdateRelationshipUsingPUTInternalServerError with default headers values
func NewUpdateRelationshipUsingPUTInternalServerError() *UpdateRelationshipUsingPUTInternalServerError {
	return &UpdateRelationshipUsingPUTInternalServerError{}
}

/*
UpdateRelationshipUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateRelationshipUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update relationship using p u t internal server error response has a 2xx status code
func (o *UpdateRelationshipUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update relationship using p u t internal server error response has a 3xx status code
func (o *UpdateRelationshipUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update relationship using p u t internal server error response has a 4xx status code
func (o *UpdateRelationshipUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update relationship using p u t internal server error response has a 5xx status code
func (o *UpdateRelationshipUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update relationship using p u t internal server error response a status code equal to that given
func (o *UpdateRelationshipUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update relationship using p u t internal server error response
func (o *UpdateRelationshipUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateRelationshipUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTInternalServerError", 500)
}

func (o *UpdateRelationshipUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/relationship][%d] updateRelationshipUsingPUTInternalServerError", 500)
}

func (o *UpdateRelationshipUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
