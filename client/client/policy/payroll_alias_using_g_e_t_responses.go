// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// PayrollAliasUsingGETReader is a Reader for the PayrollAliasUsingGET structure.
type PayrollAliasUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PayrollAliasUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPayrollAliasUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPayrollAliasUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPayrollAliasUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPayrollAliasUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPayrollAliasUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPayrollAliasUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/payrollAlias] payrollAliasUsingGET", response, response.Code())
	}
}

// NewPayrollAliasUsingGETOK creates a PayrollAliasUsingGETOK with default headers values
func NewPayrollAliasUsingGETOK() *PayrollAliasUsingGETOK {
	return &PayrollAliasUsingGETOK{}
}

/*
PayrollAliasUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type PayrollAliasUsingGETOK struct {
	Payload *models.ResponseWrapperPolicy
}

// IsSuccess returns true when this payroll alias using g e t o k response has a 2xx status code
func (o *PayrollAliasUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this payroll alias using g e t o k response has a 3xx status code
func (o *PayrollAliasUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payroll alias using g e t o k response has a 4xx status code
func (o *PayrollAliasUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this payroll alias using g e t o k response has a 5xx status code
func (o *PayrollAliasUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this payroll alias using g e t o k response a status code equal to that given
func (o *PayrollAliasUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the payroll alias using g e t o k response
func (o *PayrollAliasUsingGETOK) Code() int {
	return 200
}

func (o *PayrollAliasUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETOK %s", 200, payload)
}

func (o *PayrollAliasUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETOK %s", 200, payload)
}

func (o *PayrollAliasUsingGETOK) GetPayload() *models.ResponseWrapperPolicy {
	return o.Payload
}

func (o *PayrollAliasUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPayrollAliasUsingGETBadRequest creates a PayrollAliasUsingGETBadRequest with default headers values
func NewPayrollAliasUsingGETBadRequest() *PayrollAliasUsingGETBadRequest {
	return &PayrollAliasUsingGETBadRequest{}
}

/*
PayrollAliasUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PayrollAliasUsingGETBadRequest struct {
}

// IsSuccess returns true when this payroll alias using g e t bad request response has a 2xx status code
func (o *PayrollAliasUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payroll alias using g e t bad request response has a 3xx status code
func (o *PayrollAliasUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payroll alias using g e t bad request response has a 4xx status code
func (o *PayrollAliasUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this payroll alias using g e t bad request response has a 5xx status code
func (o *PayrollAliasUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this payroll alias using g e t bad request response a status code equal to that given
func (o *PayrollAliasUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the payroll alias using g e t bad request response
func (o *PayrollAliasUsingGETBadRequest) Code() int {
	return 400
}

func (o *PayrollAliasUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETBadRequest", 400)
}

func (o *PayrollAliasUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETBadRequest", 400)
}

func (o *PayrollAliasUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPayrollAliasUsingGETUnauthorized creates a PayrollAliasUsingGETUnauthorized with default headers values
func NewPayrollAliasUsingGETUnauthorized() *PayrollAliasUsingGETUnauthorized {
	return &PayrollAliasUsingGETUnauthorized{}
}

/*
PayrollAliasUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PayrollAliasUsingGETUnauthorized struct {
}

// IsSuccess returns true when this payroll alias using g e t unauthorized response has a 2xx status code
func (o *PayrollAliasUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payroll alias using g e t unauthorized response has a 3xx status code
func (o *PayrollAliasUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payroll alias using g e t unauthorized response has a 4xx status code
func (o *PayrollAliasUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this payroll alias using g e t unauthorized response has a 5xx status code
func (o *PayrollAliasUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this payroll alias using g e t unauthorized response a status code equal to that given
func (o *PayrollAliasUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the payroll alias using g e t unauthorized response
func (o *PayrollAliasUsingGETUnauthorized) Code() int {
	return 401
}

func (o *PayrollAliasUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETUnauthorized", 401)
}

func (o *PayrollAliasUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETUnauthorized", 401)
}

func (o *PayrollAliasUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPayrollAliasUsingGETForbidden creates a PayrollAliasUsingGETForbidden with default headers values
func NewPayrollAliasUsingGETForbidden() *PayrollAliasUsingGETForbidden {
	return &PayrollAliasUsingGETForbidden{}
}

/*
PayrollAliasUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PayrollAliasUsingGETForbidden struct {
}

// IsSuccess returns true when this payroll alias using g e t forbidden response has a 2xx status code
func (o *PayrollAliasUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payroll alias using g e t forbidden response has a 3xx status code
func (o *PayrollAliasUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payroll alias using g e t forbidden response has a 4xx status code
func (o *PayrollAliasUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this payroll alias using g e t forbidden response has a 5xx status code
func (o *PayrollAliasUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this payroll alias using g e t forbidden response a status code equal to that given
func (o *PayrollAliasUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the payroll alias using g e t forbidden response
func (o *PayrollAliasUsingGETForbidden) Code() int {
	return 403
}

func (o *PayrollAliasUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETForbidden", 403)
}

func (o *PayrollAliasUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETForbidden", 403)
}

func (o *PayrollAliasUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPayrollAliasUsingGETNotFound creates a PayrollAliasUsingGETNotFound with default headers values
func NewPayrollAliasUsingGETNotFound() *PayrollAliasUsingGETNotFound {
	return &PayrollAliasUsingGETNotFound{}
}

/*
PayrollAliasUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PayrollAliasUsingGETNotFound struct {
}

// IsSuccess returns true when this payroll alias using g e t not found response has a 2xx status code
func (o *PayrollAliasUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payroll alias using g e t not found response has a 3xx status code
func (o *PayrollAliasUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payroll alias using g e t not found response has a 4xx status code
func (o *PayrollAliasUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this payroll alias using g e t not found response has a 5xx status code
func (o *PayrollAliasUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this payroll alias using g e t not found response a status code equal to that given
func (o *PayrollAliasUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the payroll alias using g e t not found response
func (o *PayrollAliasUsingGETNotFound) Code() int {
	return 404
}

func (o *PayrollAliasUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETNotFound", 404)
}

func (o *PayrollAliasUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETNotFound", 404)
}

func (o *PayrollAliasUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPayrollAliasUsingGETInternalServerError creates a PayrollAliasUsingGETInternalServerError with default headers values
func NewPayrollAliasUsingGETInternalServerError() *PayrollAliasUsingGETInternalServerError {
	return &PayrollAliasUsingGETInternalServerError{}
}

/*
PayrollAliasUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PayrollAliasUsingGETInternalServerError struct {
}

// IsSuccess returns true when this payroll alias using g e t internal server error response has a 2xx status code
func (o *PayrollAliasUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this payroll alias using g e t internal server error response has a 3xx status code
func (o *PayrollAliasUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this payroll alias using g e t internal server error response has a 4xx status code
func (o *PayrollAliasUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this payroll alias using g e t internal server error response has a 5xx status code
func (o *PayrollAliasUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this payroll alias using g e t internal server error response a status code equal to that given
func (o *PayrollAliasUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the payroll alias using g e t internal server error response
func (o *PayrollAliasUsingGETInternalServerError) Code() int {
	return 500
}

func (o *PayrollAliasUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETInternalServerError", 500)
}

func (o *PayrollAliasUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/payrollAlias][%d] payrollAliasUsingGETInternalServerError", 500)
}

func (o *PayrollAliasUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
