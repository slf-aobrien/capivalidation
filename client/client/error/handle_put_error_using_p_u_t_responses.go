// Code generated by go-swagger; DO NOT EDIT.

package error

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// HandlePutErrorUsingPUTReader is a Reader for the HandlePutErrorUsingPUT structure.
type HandlePutErrorUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *HandlePutErrorUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewHandlePutErrorUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewHandlePutErrorUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewHandlePutErrorUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewHandlePutErrorUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewHandlePutErrorUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/error] handlePutErrorUsingPUT", response, response.Code())
	}
}

// NewHandlePutErrorUsingPUTOK creates a HandlePutErrorUsingPUTOK with default headers values
func NewHandlePutErrorUsingPUTOK() *HandlePutErrorUsingPUTOK {
	return &HandlePutErrorUsingPUTOK{}
}

/*
HandlePutErrorUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type HandlePutErrorUsingPUTOK struct {
}

// IsSuccess returns true when this handle put error using p u t o k response has a 2xx status code
func (o *HandlePutErrorUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this handle put error using p u t o k response has a 3xx status code
func (o *HandlePutErrorUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle put error using p u t o k response has a 4xx status code
func (o *HandlePutErrorUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle put error using p u t o k response has a 5xx status code
func (o *HandlePutErrorUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this handle put error using p u t o k response a status code equal to that given
func (o *HandlePutErrorUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the handle put error using p u t o k response
func (o *HandlePutErrorUsingPUTOK) Code() int {
	return 200
}

func (o *HandlePutErrorUsingPUTOK) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTOK", 200)
}

func (o *HandlePutErrorUsingPUTOK) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTOK", 200)
}

func (o *HandlePutErrorUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandlePutErrorUsingPUTCreated creates a HandlePutErrorUsingPUTCreated with default headers values
func NewHandlePutErrorUsingPUTCreated() *HandlePutErrorUsingPUTCreated {
	return &HandlePutErrorUsingPUTCreated{}
}

/*
HandlePutErrorUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type HandlePutErrorUsingPUTCreated struct {
}

// IsSuccess returns true when this handle put error using p u t created response has a 2xx status code
func (o *HandlePutErrorUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this handle put error using p u t created response has a 3xx status code
func (o *HandlePutErrorUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle put error using p u t created response has a 4xx status code
func (o *HandlePutErrorUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this handle put error using p u t created response has a 5xx status code
func (o *HandlePutErrorUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this handle put error using p u t created response a status code equal to that given
func (o *HandlePutErrorUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the handle put error using p u t created response
func (o *HandlePutErrorUsingPUTCreated) Code() int {
	return 201
}

func (o *HandlePutErrorUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTCreated", 201)
}

func (o *HandlePutErrorUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTCreated", 201)
}

func (o *HandlePutErrorUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandlePutErrorUsingPUTUnauthorized creates a HandlePutErrorUsingPUTUnauthorized with default headers values
func NewHandlePutErrorUsingPUTUnauthorized() *HandlePutErrorUsingPUTUnauthorized {
	return &HandlePutErrorUsingPUTUnauthorized{}
}

/*
HandlePutErrorUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type HandlePutErrorUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this handle put error using p u t unauthorized response has a 2xx status code
func (o *HandlePutErrorUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle put error using p u t unauthorized response has a 3xx status code
func (o *HandlePutErrorUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle put error using p u t unauthorized response has a 4xx status code
func (o *HandlePutErrorUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle put error using p u t unauthorized response has a 5xx status code
func (o *HandlePutErrorUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this handle put error using p u t unauthorized response a status code equal to that given
func (o *HandlePutErrorUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the handle put error using p u t unauthorized response
func (o *HandlePutErrorUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *HandlePutErrorUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTUnauthorized", 401)
}

func (o *HandlePutErrorUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTUnauthorized", 401)
}

func (o *HandlePutErrorUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandlePutErrorUsingPUTForbidden creates a HandlePutErrorUsingPUTForbidden with default headers values
func NewHandlePutErrorUsingPUTForbidden() *HandlePutErrorUsingPUTForbidden {
	return &HandlePutErrorUsingPUTForbidden{}
}

/*
HandlePutErrorUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type HandlePutErrorUsingPUTForbidden struct {
}

// IsSuccess returns true when this handle put error using p u t forbidden response has a 2xx status code
func (o *HandlePutErrorUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle put error using p u t forbidden response has a 3xx status code
func (o *HandlePutErrorUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle put error using p u t forbidden response has a 4xx status code
func (o *HandlePutErrorUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle put error using p u t forbidden response has a 5xx status code
func (o *HandlePutErrorUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this handle put error using p u t forbidden response a status code equal to that given
func (o *HandlePutErrorUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the handle put error using p u t forbidden response
func (o *HandlePutErrorUsingPUTForbidden) Code() int {
	return 403
}

func (o *HandlePutErrorUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTForbidden", 403)
}

func (o *HandlePutErrorUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTForbidden", 403)
}

func (o *HandlePutErrorUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewHandlePutErrorUsingPUTNotFound creates a HandlePutErrorUsingPUTNotFound with default headers values
func NewHandlePutErrorUsingPUTNotFound() *HandlePutErrorUsingPUTNotFound {
	return &HandlePutErrorUsingPUTNotFound{}
}

/*
HandlePutErrorUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type HandlePutErrorUsingPUTNotFound struct {
}

// IsSuccess returns true when this handle put error using p u t not found response has a 2xx status code
func (o *HandlePutErrorUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this handle put error using p u t not found response has a 3xx status code
func (o *HandlePutErrorUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this handle put error using p u t not found response has a 4xx status code
func (o *HandlePutErrorUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this handle put error using p u t not found response has a 5xx status code
func (o *HandlePutErrorUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this handle put error using p u t not found response a status code equal to that given
func (o *HandlePutErrorUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the handle put error using p u t not found response
func (o *HandlePutErrorUsingPUTNotFound) Code() int {
	return 404
}

func (o *HandlePutErrorUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTNotFound", 404)
}

func (o *HandlePutErrorUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/error][%d] handlePutErrorUsingPUTNotFound", 404)
}

func (o *HandlePutErrorUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
