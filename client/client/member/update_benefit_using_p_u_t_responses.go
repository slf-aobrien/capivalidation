// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateBenefitUsingPUTReader is a Reader for the UpdateBenefitUsingPUT structure.
type UpdateBenefitUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBenefitUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBenefitUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateBenefitUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBenefitUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateBenefitUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateBenefitUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateBenefitUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBenefitUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/member/update/benefit] updateBenefitUsingPUT", response, response.Code())
	}
}

// NewUpdateBenefitUsingPUTOK creates a UpdateBenefitUsingPUTOK with default headers values
func NewUpdateBenefitUsingPUTOK() *UpdateBenefitUsingPUTOK {
	return &UpdateBenefitUsingPUTOK{}
}

/*
UpdateBenefitUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateBenefitUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update benefit using p u t o k response has a 2xx status code
func (o *UpdateBenefitUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update benefit using p u t o k response has a 3xx status code
func (o *UpdateBenefitUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t o k response has a 4xx status code
func (o *UpdateBenefitUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update benefit using p u t o k response has a 5xx status code
func (o *UpdateBenefitUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit using p u t o k response a status code equal to that given
func (o *UpdateBenefitUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update benefit using p u t o k response
func (o *UpdateBenefitUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateBenefitUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTOK %s", 200, payload)
}

func (o *UpdateBenefitUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTOK %s", 200, payload)
}

func (o *UpdateBenefitUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateBenefitUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBenefitUsingPUTCreated creates a UpdateBenefitUsingPUTCreated with default headers values
func NewUpdateBenefitUsingPUTCreated() *UpdateBenefitUsingPUTCreated {
	return &UpdateBenefitUsingPUTCreated{}
}

/*
UpdateBenefitUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateBenefitUsingPUTCreated struct {
}

// IsSuccess returns true when this update benefit using p u t created response has a 2xx status code
func (o *UpdateBenefitUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update benefit using p u t created response has a 3xx status code
func (o *UpdateBenefitUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t created response has a 4xx status code
func (o *UpdateBenefitUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update benefit using p u t created response has a 5xx status code
func (o *UpdateBenefitUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit using p u t created response a status code equal to that given
func (o *UpdateBenefitUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update benefit using p u t created response
func (o *UpdateBenefitUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateBenefitUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTCreated", 201)
}

func (o *UpdateBenefitUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTCreated", 201)
}

func (o *UpdateBenefitUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitUsingPUTBadRequest creates a UpdateBenefitUsingPUTBadRequest with default headers values
func NewUpdateBenefitUsingPUTBadRequest() *UpdateBenefitUsingPUTBadRequest {
	return &UpdateBenefitUsingPUTBadRequest{}
}

/*
UpdateBenefitUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateBenefitUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update benefit using p u t bad request response has a 2xx status code
func (o *UpdateBenefitUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit using p u t bad request response has a 3xx status code
func (o *UpdateBenefitUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t bad request response has a 4xx status code
func (o *UpdateBenefitUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit using p u t bad request response has a 5xx status code
func (o *UpdateBenefitUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit using p u t bad request response a status code equal to that given
func (o *UpdateBenefitUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update benefit using p u t bad request response
func (o *UpdateBenefitUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateBenefitUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTBadRequest", 400)
}

func (o *UpdateBenefitUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTBadRequest", 400)
}

func (o *UpdateBenefitUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitUsingPUTUnauthorized creates a UpdateBenefitUsingPUTUnauthorized with default headers values
func NewUpdateBenefitUsingPUTUnauthorized() *UpdateBenefitUsingPUTUnauthorized {
	return &UpdateBenefitUsingPUTUnauthorized{}
}

/*
UpdateBenefitUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateBenefitUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update benefit using p u t unauthorized response has a 2xx status code
func (o *UpdateBenefitUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit using p u t unauthorized response has a 3xx status code
func (o *UpdateBenefitUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t unauthorized response has a 4xx status code
func (o *UpdateBenefitUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit using p u t unauthorized response has a 5xx status code
func (o *UpdateBenefitUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit using p u t unauthorized response a status code equal to that given
func (o *UpdateBenefitUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update benefit using p u t unauthorized response
func (o *UpdateBenefitUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateBenefitUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTUnauthorized", 401)
}

func (o *UpdateBenefitUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTUnauthorized", 401)
}

func (o *UpdateBenefitUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitUsingPUTForbidden creates a UpdateBenefitUsingPUTForbidden with default headers values
func NewUpdateBenefitUsingPUTForbidden() *UpdateBenefitUsingPUTForbidden {
	return &UpdateBenefitUsingPUTForbidden{}
}

/*
UpdateBenefitUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateBenefitUsingPUTForbidden struct {
}

// IsSuccess returns true when this update benefit using p u t forbidden response has a 2xx status code
func (o *UpdateBenefitUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit using p u t forbidden response has a 3xx status code
func (o *UpdateBenefitUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t forbidden response has a 4xx status code
func (o *UpdateBenefitUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit using p u t forbidden response has a 5xx status code
func (o *UpdateBenefitUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit using p u t forbidden response a status code equal to that given
func (o *UpdateBenefitUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update benefit using p u t forbidden response
func (o *UpdateBenefitUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateBenefitUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTForbidden", 403)
}

func (o *UpdateBenefitUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTForbidden", 403)
}

func (o *UpdateBenefitUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitUsingPUTNotFound creates a UpdateBenefitUsingPUTNotFound with default headers values
func NewUpdateBenefitUsingPUTNotFound() *UpdateBenefitUsingPUTNotFound {
	return &UpdateBenefitUsingPUTNotFound{}
}

/*
UpdateBenefitUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateBenefitUsingPUTNotFound struct {
}

// IsSuccess returns true when this update benefit using p u t not found response has a 2xx status code
func (o *UpdateBenefitUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit using p u t not found response has a 3xx status code
func (o *UpdateBenefitUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t not found response has a 4xx status code
func (o *UpdateBenefitUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit using p u t not found response has a 5xx status code
func (o *UpdateBenefitUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit using p u t not found response a status code equal to that given
func (o *UpdateBenefitUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update benefit using p u t not found response
func (o *UpdateBenefitUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateBenefitUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTNotFound", 404)
}

func (o *UpdateBenefitUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTNotFound", 404)
}

func (o *UpdateBenefitUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitUsingPUTInternalServerError creates a UpdateBenefitUsingPUTInternalServerError with default headers values
func NewUpdateBenefitUsingPUTInternalServerError() *UpdateBenefitUsingPUTInternalServerError {
	return &UpdateBenefitUsingPUTInternalServerError{}
}

/*
UpdateBenefitUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateBenefitUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update benefit using p u t internal server error response has a 2xx status code
func (o *UpdateBenefitUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit using p u t internal server error response has a 3xx status code
func (o *UpdateBenefitUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit using p u t internal server error response has a 4xx status code
func (o *UpdateBenefitUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update benefit using p u t internal server error response has a 5xx status code
func (o *UpdateBenefitUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update benefit using p u t internal server error response a status code equal to that given
func (o *UpdateBenefitUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update benefit using p u t internal server error response
func (o *UpdateBenefitUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateBenefitUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTInternalServerError", 500)
}

func (o *UpdateBenefitUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/benefit][%d] updateBenefitUsingPUTInternalServerError", 500)
}

func (o *UpdateBenefitUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
