// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAddPolicyBenefitStopLossUsingPOSTParams creates a new AddPolicyBenefitStopLossUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddPolicyBenefitStopLossUsingPOSTParams() *AddPolicyBenefitStopLossUsingPOSTParams {
	return &AddPolicyBenefitStopLossUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddPolicyBenefitStopLossUsingPOSTParamsWithTimeout creates a new AddPolicyBenefitStopLossUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewAddPolicyBenefitStopLossUsingPOSTParamsWithTimeout(timeout time.Duration) *AddPolicyBenefitStopLossUsingPOSTParams {
	return &AddPolicyBenefitStopLossUsingPOSTParams{
		timeout: timeout,
	}
}

// NewAddPolicyBenefitStopLossUsingPOSTParamsWithContext creates a new AddPolicyBenefitStopLossUsingPOSTParams object
// with the ability to set a context for a request.
func NewAddPolicyBenefitStopLossUsingPOSTParamsWithContext(ctx context.Context) *AddPolicyBenefitStopLossUsingPOSTParams {
	return &AddPolicyBenefitStopLossUsingPOSTParams{
		Context: ctx,
	}
}

// NewAddPolicyBenefitStopLossUsingPOSTParamsWithHTTPClient creates a new AddPolicyBenefitStopLossUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddPolicyBenefitStopLossUsingPOSTParamsWithHTTPClient(client *http.Client) *AddPolicyBenefitStopLossUsingPOSTParams {
	return &AddPolicyBenefitStopLossUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
AddPolicyBenefitStopLossUsingPOSTParams contains all the parameters to send to the API endpoint

	for the add policy benefit stop loss using p o s t operation.

	Typically these are written to a http.Request.
*/
type AddPolicyBenefitStopLossUsingPOSTParams struct {

	/* AddReconciliationBilling.

	   addReconciliationBilling
	*/
	AddReconciliationBilling *bool

	/* AddRegularBilling.

	   addRegularBilling
	*/
	AddRegularBilling *bool

	/* AddStopLossAnnualBilling.

	   addStopLossAnnualBilling
	*/
	AddStopLossAnnualBilling *bool

	/* AddStopLossMonthlyBilling.

	   addStopLossMonthlyBilling
	*/
	AddStopLossMonthlyBilling *bool

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	/* PolicyCreateDate.

	   policyCreateDate
	*/
	PolicyCreateDate *string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* SystemBenefitList.

	   systemBenefitList
	*/
	SystemBenefitList []string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat *string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add policy benefit stop loss using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithDefaults() *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add policy benefit stop loss using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithTimeout(timeout time.Duration) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithContext(ctx context.Context) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithHTTPClient(client *http.Client) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddReconciliationBilling adds the addReconciliationBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithAddReconciliationBilling(addReconciliationBilling *bool) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetAddReconciliationBilling(addReconciliationBilling)
	return o
}

// SetAddReconciliationBilling adds the addReconciliationBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetAddReconciliationBilling(addReconciliationBilling *bool) {
	o.AddReconciliationBilling = addReconciliationBilling
}

// WithAddRegularBilling adds the addRegularBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithAddRegularBilling(addRegularBilling *bool) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetAddRegularBilling(addRegularBilling)
	return o
}

// SetAddRegularBilling adds the addRegularBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetAddRegularBilling(addRegularBilling *bool) {
	o.AddRegularBilling = addRegularBilling
}

// WithAddStopLossAnnualBilling adds the addStopLossAnnualBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithAddStopLossAnnualBilling(addStopLossAnnualBilling *bool) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetAddStopLossAnnualBilling(addStopLossAnnualBilling)
	return o
}

// SetAddStopLossAnnualBilling adds the addStopLossAnnualBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetAddStopLossAnnualBilling(addStopLossAnnualBilling *bool) {
	o.AddStopLossAnnualBilling = addStopLossAnnualBilling
}

// WithAddStopLossMonthlyBilling adds the addStopLossMonthlyBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithAddStopLossMonthlyBilling(addStopLossMonthlyBilling *bool) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetAddStopLossMonthlyBilling(addStopLossMonthlyBilling)
	return o
}

// SetAddStopLossMonthlyBilling adds the addStopLossMonthlyBilling to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetAddStopLossMonthlyBilling(addStopLossMonthlyBilling *bool) {
	o.AddStopLossMonthlyBilling = addStopLossMonthlyBilling
}

// WithEffectiveDate adds the effectiveDate to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithEffectiveDate(effectiveDate *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithPolicyCreateDate adds the policyCreateDate to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithPolicyCreateDate(policyCreateDate *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetPolicyCreateDate(policyCreateDate)
	return o
}

// SetPolicyCreateDate adds the policyCreateDate to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetPolicyCreateDate(policyCreateDate *string) {
	o.PolicyCreateDate = policyCreateDate
}

// WithPolicyNumber adds the policyNumber to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithPolicyNumber(policyNumber *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetPolicyNumber(policyNumber *string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithRequestApplication(requestApplication *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithRequestUser(requestUser *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithSystemBenefitList adds the systemBenefitList to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithSystemBenefitList(systemBenefitList []string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetSystemBenefitList(systemBenefitList)
	return o
}

// SetSystemBenefitList adds the systemBenefitList to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetSystemBenefitList(systemBenefitList []string) {
	o.SystemBenefitList = systemBenefitList
}

// WithVarianceFormat adds the varianceFormat to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithVarianceFormat(varianceFormat *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetVarianceFormat(varianceFormat *string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WithVarianceLevel(varianceLevel *string) *AddPolicyBenefitStopLossUsingPOSTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the add policy benefit stop loss using p o s t params
func (o *AddPolicyBenefitStopLossUsingPOSTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *AddPolicyBenefitStopLossUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddReconciliationBilling != nil {

		// query param addReconciliationBilling
		var qrAddReconciliationBilling bool

		if o.AddReconciliationBilling != nil {
			qrAddReconciliationBilling = *o.AddReconciliationBilling
		}
		qAddReconciliationBilling := swag.FormatBool(qrAddReconciliationBilling)
		if qAddReconciliationBilling != "" {

			if err := r.SetQueryParam("addReconciliationBilling", qAddReconciliationBilling); err != nil {
				return err
			}
		}
	}

	if o.AddRegularBilling != nil {

		// query param addRegularBilling
		var qrAddRegularBilling bool

		if o.AddRegularBilling != nil {
			qrAddRegularBilling = *o.AddRegularBilling
		}
		qAddRegularBilling := swag.FormatBool(qrAddRegularBilling)
		if qAddRegularBilling != "" {

			if err := r.SetQueryParam("addRegularBilling", qAddRegularBilling); err != nil {
				return err
			}
		}
	}

	if o.AddStopLossAnnualBilling != nil {

		// query param addStopLossAnnualBilling
		var qrAddStopLossAnnualBilling bool

		if o.AddStopLossAnnualBilling != nil {
			qrAddStopLossAnnualBilling = *o.AddStopLossAnnualBilling
		}
		qAddStopLossAnnualBilling := swag.FormatBool(qrAddStopLossAnnualBilling)
		if qAddStopLossAnnualBilling != "" {

			if err := r.SetQueryParam("addStopLossAnnualBilling", qAddStopLossAnnualBilling); err != nil {
				return err
			}
		}
	}

	if o.AddStopLossMonthlyBilling != nil {

		// query param addStopLossMonthlyBilling
		var qrAddStopLossMonthlyBilling bool

		if o.AddStopLossMonthlyBilling != nil {
			qrAddStopLossMonthlyBilling = *o.AddStopLossMonthlyBilling
		}
		qAddStopLossMonthlyBilling := swag.FormatBool(qrAddStopLossMonthlyBilling)
		if qAddStopLossMonthlyBilling != "" {

			if err := r.SetQueryParam("addStopLossMonthlyBilling", qAddStopLossMonthlyBilling); err != nil {
				return err
			}
		}
	}

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.PolicyCreateDate != nil {

		// query param policyCreateDate
		var qrPolicyCreateDate string

		if o.PolicyCreateDate != nil {
			qrPolicyCreateDate = *o.PolicyCreateDate
		}
		qPolicyCreateDate := qrPolicyCreateDate
		if qPolicyCreateDate != "" {

			if err := r.SetQueryParam("policyCreateDate", qPolicyCreateDate); err != nil {
				return err
			}
		}
	}

	if o.PolicyNumber != nil {

		// query param policyNumber
		var qrPolicyNumber string

		if o.PolicyNumber != nil {
			qrPolicyNumber = *o.PolicyNumber
		}
		qPolicyNumber := qrPolicyNumber
		if qPolicyNumber != "" {

			if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}
	if o.SystemBenefitList != nil {
		if err := r.SetBodyParam(o.SystemBenefitList); err != nil {
			return err
		}
	}

	if o.VarianceFormat != nil {

		// query param varianceFormat
		var qrVarianceFormat string

		if o.VarianceFormat != nil {
			qrVarianceFormat = *o.VarianceFormat
		}
		qVarianceFormat := qrVarianceFormat
		if qVarianceFormat != "" {

			if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
				return err
			}
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
