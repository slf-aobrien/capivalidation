// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new dependent API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new dependent API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new dependent API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for dependent API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationAebCasDependentAddV1XML sets the Content-Type header to "application/aeb.cas.dependent.add.v1+xml".
func WithContentTypeApplicationAebCasDependentAddV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.dependent.add.v1+xml"}
}

// WithContentTypeApplicationAebCasDependentUpdateAddressV1XML sets the Content-Type header to "application/aeb.cas.dependent.update.address.v1+xml".
func WithContentTypeApplicationAebCasDependentUpdateAddressV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.dependent.update.address.v1+xml"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextPlain sets the Content-Type header to "text/plain".
func WithContentTypeTextPlain(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/plain"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationAebCasDependentAddV1XML sets the Accept header to "application/aeb.cas.dependent.add.v1+xml".
func WithAcceptApplicationAebCasDependentAddV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.add.v1+xml"}
}

// WithAcceptApplicationAebCasDependentFindEdxpersoninfoV1XML sets the Accept header to "application/aeb.cas.dependent.find.edxpersoninfo.v1+xml".
func WithAcceptApplicationAebCasDependentFindEdxpersoninfoV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.find.edxpersoninfo.v1+xml"}
}

// WithAcceptApplicationAebCasDependentRemoveV1XML sets the Accept header to "application/aeb.cas.dependent.remove.v1+xml".
func WithAcceptApplicationAebCasDependentRemoveV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.remove.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUnexpireV1XML sets the Accept header to "application/aeb.cas.dependent.unexpire.v1+xml".
func WithAcceptApplicationAebCasDependentUnexpireV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.unexpire.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateAddressV1XML sets the Accept header to "application/aeb.cas.dependent.update.address.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateAddressV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.address.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateFacilityV1XML sets the Accept header to "application/aeb.cas.dependent.update.facility.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateFacilityV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.facility.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateFirstnameV1XML sets the Accept header to "application/aeb.cas.dependent.update.firstname.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateFirstnameV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.firstname.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateGenderV1XML sets the Accept header to "application/aeb.cas.dependent.update.gender.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateGenderV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.gender.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateLanguageV1XML sets the Accept header to "application/aeb.cas.dependent.update.language.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateLanguageV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.language.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateLastnameV1XML sets the Accept header to "application/aeb.cas.dependent.update.lastname.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateLastnameV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.lastname.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateMiddlenameV1XML sets the Accept header to "application/aeb.cas.dependent.update.middlename.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateMiddlenameV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.middlename.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateNamesuffixV1XML sets the Accept header to "application/aeb.cas.dependent.update.namesuffix.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateNamesuffixV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.namesuffix.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdatePhoneV1XML sets the Accept header to "application/aeb.cas.dependent.update.phone.v1+xml".
func WithAcceptApplicationAebCasDependentUpdatePhoneV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.phone.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateRelationshipV1XML sets the Accept header to "application/aeb.cas.dependent.update.relationship.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateRelationshipV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.relationship.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateSmokerflagV1XML sets the Accept header to "application/aeb.cas.dependent.update.smokerflag.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateSmokerflagV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.smokerflag.v1+xml"}
}

// WithAcceptApplicationAebCasDependentUpdateSsnV1XML sets the Accept header to "application/aeb.cas.dependent.update.ssn.v1+xml".
func WithAcceptApplicationAebCasDependentUpdateSsnV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.dependent.update.ssn.v1+xml"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddDependentBenefitExclusionsUsingPOST(params *AddDependentBenefitExclusionsUsingPOSTParams, opts ...ClientOption) (*AddDependentBenefitExclusionsUsingPOSTOK, *AddDependentBenefitExclusionsUsingPOSTCreated, error)

	AddDependentUsingPOST(params *AddDependentUsingPOSTParams, opts ...ClientOption) (*AddDependentUsingPOSTOK, *AddDependentUsingPOSTCreated, error)

	ExpireDependentBenefitExclusionsUsingPUT(params *ExpireDependentBenefitExclusionsUsingPUTParams, opts ...ClientOption) (*ExpireDependentBenefitExclusionsUsingPUTOK, *ExpireDependentBenefitExclusionsUsingPUTCreated, error)

	GetEDXPersonInfoUsingGET(params *GetEDXPersonInfoUsingGETParams, opts ...ClientOption) (*GetEDXPersonInfoUsingGETOK, error)

	RemoveDependentUsingPOST(params *RemoveDependentUsingPOSTParams, opts ...ClientOption) (*RemoveDependentUsingPOSTOK, *RemoveDependentUsingPOSTCreated, error)

	UnexpireDependentUsingPOST(params *UnexpireDependentUsingPOSTParams, opts ...ClientOption) (*UnexpireDependentUsingPOSTOK, *UnexpireDependentUsingPOSTCreated, error)

	UpdateAddressUsingPUT(params *UpdateAddressUsingPUTParams, opts ...ClientOption) (*UpdateAddressUsingPUTOK, *UpdateAddressUsingPUTCreated, error)

	UpdateDateOfBirthUsingPUT(params *UpdateDateOfBirthUsingPUTParams, opts ...ClientOption) (*UpdateDateOfBirthUsingPUTOK, *UpdateDateOfBirthUsingPUTCreated, error)

	UpdateFacilityUsingPUT(params *UpdateFacilityUsingPUTParams, opts ...ClientOption) (*UpdateFacilityUsingPUTOK, *UpdateFacilityUsingPUTCreated, error)

	UpdateFirstNameUsingPUT(params *UpdateFirstNameUsingPUTParams, opts ...ClientOption) (*UpdateFirstNameUsingPUTOK, *UpdateFirstNameUsingPUTCreated, error)

	UpdateGenderUsingPUT(params *UpdateGenderUsingPUTParams, opts ...ClientOption) (*UpdateGenderUsingPUTOK, *UpdateGenderUsingPUTCreated, error)

	UpdateLanguageUsingPUT(params *UpdateLanguageUsingPUTParams, opts ...ClientOption) (*UpdateLanguageUsingPUTOK, *UpdateLanguageUsingPUTCreated, error)

	UpdateLastNameUsingPUT(params *UpdateLastNameUsingPUTParams, opts ...ClientOption) (*UpdateLastNameUsingPUTOK, *UpdateLastNameUsingPUTCreated, error)

	UpdateMiddleNameUsingPUT(params *UpdateMiddleNameUsingPUTParams, opts ...ClientOption) (*UpdateMiddleNameUsingPUTOK, *UpdateMiddleNameUsingPUTCreated, error)

	UpdateNameSuffixUsingPUT(params *UpdateNameSuffixUsingPUTParams, opts ...ClientOption) (*UpdateNameSuffixUsingPUTOK, *UpdateNameSuffixUsingPUTCreated, error)

	UpdatePhoneUsingPUT(params *UpdatePhoneUsingPUTParams, opts ...ClientOption) (*UpdatePhoneUsingPUTOK, *UpdatePhoneUsingPUTCreated, error)

	UpdateRelationshipUsingPUT(params *UpdateRelationshipUsingPUTParams, opts ...ClientOption) (*UpdateRelationshipUsingPUTOK, *UpdateRelationshipUsingPUTCreated, error)

	UpdateSSNUsingPUT(params *UpdateSSNUsingPUTParams, opts ...ClientOption) (*UpdateSSNUsingPUTOK, *UpdateSSNUsingPUTCreated, error)

	UpdateSmokerFlagUsingPUT(params *UpdateSmokerFlagUsingPUTParams, opts ...ClientOption) (*UpdateSmokerFlagUsingPUTOK, *UpdateSmokerFlagUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddDependentBenefitExclusionsUsingPOST adds dependent benefit exclusion

Member identifier is caseMemberKey and Client Id is dependent Client ID. effectiveDate is used for date.
*/
func (a *Client) AddDependentBenefitExclusionsUsingPOST(params *AddDependentBenefitExclusionsUsingPOSTParams, opts ...ClientOption) (*AddDependentBenefitExclusionsUsingPOSTOK, *AddDependentBenefitExclusionsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDependentBenefitExclusionsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDependentBenefitExclusionsUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/dependent/benefitexclusions/add",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddDependentBenefitExclusionsUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddDependentBenefitExclusionsUsingPOSTOK:
		return value, nil, nil
	case *AddDependentBenefitExclusionsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddDependentUsingPOST adds dependent method

None
*/
func (a *Client) AddDependentUsingPOST(params *AddDependentUsingPOSTParams, opts ...ClientOption) (*AddDependentUsingPOSTOK, *AddDependentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDependentUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDependentUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/dependent/add",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.add.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.dependent.add.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddDependentUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddDependentUsingPOSTOK:
		return value, nil, nil
	case *AddDependentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExpireDependentBenefitExclusionsUsingPUT expires existing dependent benefit exclusions

Member identifier is caseMemberKey and Client Id is dependent Client ID. effectiveDate is used for date.
*/
func (a *Client) ExpireDependentBenefitExclusionsUsingPUT(params *ExpireDependentBenefitExclusionsUsingPUTParams, opts ...ClientOption) (*ExpireDependentBenefitExclusionsUsingPUTOK, *ExpireDependentBenefitExclusionsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpireDependentBenefitExclusionsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "expireDependentBenefitExclusionsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/benefitexclusions/expire",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExpireDependentBenefitExclusionsUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpireDependentBenefitExclusionsUsingPUTOK:
		return value, nil, nil
	case *ExpireDependentBenefitExclusionsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXPersonInfoUsingGET es d x sunlife us dc compassintegrationapplication service person info method

None
*/
func (a *Client) GetEDXPersonInfoUsingGET(params *GetEDXPersonInfoUsingGETParams, opts ...ClientOption) (*GetEDXPersonInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXPersonInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXPersonInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/dependent/edxPersonInfo",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.find.edxpersoninfo.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXPersonInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXPersonInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXPersonInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveDependentUsingPOST removes dependent method

None
*/
func (a *Client) RemoveDependentUsingPOST(params *RemoveDependentUsingPOSTParams, opts ...ClientOption) (*RemoveDependentUsingPOSTOK, *RemoveDependentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDependentUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDependentUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/dependent/remove",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.remove.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDependentUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RemoveDependentUsingPOSTOK:
		return value, nil, nil
	case *RemoveDependentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnexpireDependentUsingPOST unexpires dependent method

None
*/
func (a *Client) UnexpireDependentUsingPOST(params *UnexpireDependentUsingPOSTParams, opts ...ClientOption) (*UnexpireDependentUsingPOSTOK, *UnexpireDependentUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnexpireDependentUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unexpireDependentUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/dependent/unexpire",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.unexpire.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnexpireDependentUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UnexpireDependentUsingPOSTOK:
		return value, nil, nil
	case *UnexpireDependentUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAddressUsingPUT updates address method

None
*/
func (a *Client) UpdateAddressUsingPUT(params *UpdateAddressUsingPUTParams, opts ...ClientOption) (*UpdateAddressUsingPUTOK, *UpdateAddressUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAddressUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAddressUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/address",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.address.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.dependent.update.address.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAddressUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAddressUsingPUTOK:
		return value, nil, nil
	case *UpdateAddressUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDateOfBirthUsingPUT updates date of birth method

None
*/
func (a *Client) UpdateDateOfBirthUsingPUT(params *UpdateDateOfBirthUsingPUTParams, opts ...ClientOption) (*UpdateDateOfBirthUsingPUTOK, *UpdateDateOfBirthUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDateOfBirthUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDateOfBirthUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/dateOfBirth",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.phone.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDateOfBirthUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDateOfBirthUsingPUTOK:
		return value, nil, nil
	case *UpdateDateOfBirthUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFacilityUsingPUT updates facility method

None
*/
func (a *Client) UpdateFacilityUsingPUT(params *UpdateFacilityUsingPUTParams, opts ...ClientOption) (*UpdateFacilityUsingPUTOK, *UpdateFacilityUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFacilityUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFacilityUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/facility",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.facility.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFacilityUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateFacilityUsingPUTOK:
		return value, nil, nil
	case *UpdateFacilityUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFirstNameUsingPUT updates first name method

None
*/
func (a *Client) UpdateFirstNameUsingPUT(params *UpdateFirstNameUsingPUTParams, opts ...ClientOption) (*UpdateFirstNameUsingPUTOK, *UpdateFirstNameUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFirstNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFirstNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/firstName",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.firstname.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFirstNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateFirstNameUsingPUTOK:
		return value, nil, nil
	case *UpdateFirstNameUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGenderUsingPUT updates gender method

None
*/
func (a *Client) UpdateGenderUsingPUT(params *UpdateGenderUsingPUTParams, opts ...ClientOption) (*UpdateGenderUsingPUTOK, *UpdateGenderUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGenderUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGenderUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/gender",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.gender.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGenderUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGenderUsingPUTOK:
		return value, nil, nil
	case *UpdateGenderUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLanguageUsingPUT updates language method

None
*/
func (a *Client) UpdateLanguageUsingPUT(params *UpdateLanguageUsingPUTParams, opts ...ClientOption) (*UpdateLanguageUsingPUTOK, *UpdateLanguageUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLanguageUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLanguageUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/language",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.language.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLanguageUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateLanguageUsingPUTOK:
		return value, nil, nil
	case *UpdateLanguageUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateLastNameUsingPUT updates last name method

None
*/
func (a *Client) UpdateLastNameUsingPUT(params *UpdateLastNameUsingPUTParams, opts ...ClientOption) (*UpdateLastNameUsingPUTOK, *UpdateLastNameUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLastNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateLastNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/lastName",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.lastname.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateLastNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateLastNameUsingPUTOK:
		return value, nil, nil
	case *UpdateLastNameUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMiddleNameUsingPUT updates middle name method

None
*/
func (a *Client) UpdateMiddleNameUsingPUT(params *UpdateMiddleNameUsingPUTParams, opts ...ClientOption) (*UpdateMiddleNameUsingPUTOK, *UpdateMiddleNameUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMiddleNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMiddleNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/middleName",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.middlename.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMiddleNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMiddleNameUsingPUTOK:
		return value, nil, nil
	case *UpdateMiddleNameUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNameSuffixUsingPUT updates name suffix method

None
*/
func (a *Client) UpdateNameSuffixUsingPUT(params *UpdateNameSuffixUsingPUTParams, opts ...ClientOption) (*UpdateNameSuffixUsingPUTOK, *UpdateNameSuffixUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNameSuffixUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNameSuffixUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/nameSuffix",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.namesuffix.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNameSuffixUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateNameSuffixUsingPUTOK:
		return value, nil, nil
	case *UpdateNameSuffixUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePhoneUsingPUT updates phone method

None
*/
func (a *Client) UpdatePhoneUsingPUT(params *UpdatePhoneUsingPUTParams, opts ...ClientOption) (*UpdatePhoneUsingPUTOK, *UpdatePhoneUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePhoneUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePhoneUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/phone",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.phone.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePhoneUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePhoneUsingPUTOK:
		return value, nil, nil
	case *UpdatePhoneUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRelationshipUsingPUT updates relationship method

None
*/
func (a *Client) UpdateRelationshipUsingPUT(params *UpdateRelationshipUsingPUTParams, opts ...ClientOption) (*UpdateRelationshipUsingPUTOK, *UpdateRelationshipUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRelationshipUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRelationshipUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/relationship",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.relationship.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRelationshipUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateRelationshipUsingPUTOK:
		return value, nil, nil
	case *UpdateRelationshipUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSSNUsingPUT updates s s n method

None
*/
func (a *Client) UpdateSSNUsingPUT(params *UpdateSSNUsingPUTParams, opts ...ClientOption) (*UpdateSSNUsingPUTOK, *UpdateSSNUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSSNUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSSNUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/ssn",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.ssn.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSSNUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSSNUsingPUTOK:
		return value, nil, nil
	case *UpdateSSNUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSmokerFlagUsingPUT updates smoker flag method

None
*/
func (a *Client) UpdateSmokerFlagUsingPUT(params *UpdateSmokerFlagUsingPUTParams, opts ...ClientOption) (*UpdateSmokerFlagUsingPUTOK, *UpdateSmokerFlagUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmokerFlagUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSmokerFlagUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/dependent/update/smokerFlag",
		ProducesMediaTypes: []string{"application/aeb.cas.dependent.update.smokerflag.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSmokerFlagUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSmokerFlagUsingPUTOK:
		return value, nil, nil
	case *UpdateSmokerFlagUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for dependent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
