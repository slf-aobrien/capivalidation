// Code generated by go-swagger; DO NOT EDIT.

package bill

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetPendingReconciliationBillSummaryUsingGETReader is a Reader for the GetPendingReconciliationBillSummaryUsingGET structure.
type GetPendingReconciliationBillSummaryUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPendingReconciliationBillSummaryUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPendingReconciliationBillSummaryUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPendingReconciliationBillSummaryUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPendingReconciliationBillSummaryUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPendingReconciliationBillSummaryUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPendingReconciliationBillSummaryUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPendingReconciliationBillSummaryUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/bill/pendingReconciliationSummary] getPendingReconciliationBillSummaryUsingGET", response, response.Code())
	}
}

// NewGetPendingReconciliationBillSummaryUsingGETOK creates a GetPendingReconciliationBillSummaryUsingGETOK with default headers values
func NewGetPendingReconciliationBillSummaryUsingGETOK() *GetPendingReconciliationBillSummaryUsingGETOK {
	return &GetPendingReconciliationBillSummaryUsingGETOK{}
}

/*
GetPendingReconciliationBillSummaryUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetPendingReconciliationBillSummaryUsingGETOK struct {
	Payload *models.ResponseWrapperListBillSummaryDTO
}

// IsSuccess returns true when this get pending reconciliation bill summary using g e t o k response has a 2xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get pending reconciliation bill summary using g e t o k response has a 3xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pending reconciliation bill summary using g e t o k response has a 4xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get pending reconciliation bill summary using g e t o k response has a 5xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get pending reconciliation bill summary using g e t o k response a status code equal to that given
func (o *GetPendingReconciliationBillSummaryUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get pending reconciliation bill summary using g e t o k response
func (o *GetPendingReconciliationBillSummaryUsingGETOK) Code() int {
	return 200
}

func (o *GetPendingReconciliationBillSummaryUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETOK %s", 200, payload)
}

func (o *GetPendingReconciliationBillSummaryUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETOK %s", 200, payload)
}

func (o *GetPendingReconciliationBillSummaryUsingGETOK) GetPayload() *models.ResponseWrapperListBillSummaryDTO {
	return o.Payload
}

func (o *GetPendingReconciliationBillSummaryUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListBillSummaryDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPendingReconciliationBillSummaryUsingGETBadRequest creates a GetPendingReconciliationBillSummaryUsingGETBadRequest with default headers values
func NewGetPendingReconciliationBillSummaryUsingGETBadRequest() *GetPendingReconciliationBillSummaryUsingGETBadRequest {
	return &GetPendingReconciliationBillSummaryUsingGETBadRequest{}
}

/*
GetPendingReconciliationBillSummaryUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPendingReconciliationBillSummaryUsingGETBadRequest struct {
}

// IsSuccess returns true when this get pending reconciliation bill summary using g e t bad request response has a 2xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pending reconciliation bill summary using g e t bad request response has a 3xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pending reconciliation bill summary using g e t bad request response has a 4xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pending reconciliation bill summary using g e t bad request response has a 5xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get pending reconciliation bill summary using g e t bad request response a status code equal to that given
func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get pending reconciliation bill summary using g e t bad request response
func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETBadRequest", 400)
}

func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETBadRequest", 400)
}

func (o *GetPendingReconciliationBillSummaryUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPendingReconciliationBillSummaryUsingGETUnauthorized creates a GetPendingReconciliationBillSummaryUsingGETUnauthorized with default headers values
func NewGetPendingReconciliationBillSummaryUsingGETUnauthorized() *GetPendingReconciliationBillSummaryUsingGETUnauthorized {
	return &GetPendingReconciliationBillSummaryUsingGETUnauthorized{}
}

/*
GetPendingReconciliationBillSummaryUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPendingReconciliationBillSummaryUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get pending reconciliation bill summary using g e t unauthorized response has a 2xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pending reconciliation bill summary using g e t unauthorized response has a 3xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pending reconciliation bill summary using g e t unauthorized response has a 4xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pending reconciliation bill summary using g e t unauthorized response has a 5xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get pending reconciliation bill summary using g e t unauthorized response a status code equal to that given
func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get pending reconciliation bill summary using g e t unauthorized response
func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETUnauthorized", 401)
}

func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETUnauthorized", 401)
}

func (o *GetPendingReconciliationBillSummaryUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPendingReconciliationBillSummaryUsingGETForbidden creates a GetPendingReconciliationBillSummaryUsingGETForbidden with default headers values
func NewGetPendingReconciliationBillSummaryUsingGETForbidden() *GetPendingReconciliationBillSummaryUsingGETForbidden {
	return &GetPendingReconciliationBillSummaryUsingGETForbidden{}
}

/*
GetPendingReconciliationBillSummaryUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPendingReconciliationBillSummaryUsingGETForbidden struct {
}

// IsSuccess returns true when this get pending reconciliation bill summary using g e t forbidden response has a 2xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pending reconciliation bill summary using g e t forbidden response has a 3xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pending reconciliation bill summary using g e t forbidden response has a 4xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pending reconciliation bill summary using g e t forbidden response has a 5xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get pending reconciliation bill summary using g e t forbidden response a status code equal to that given
func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get pending reconciliation bill summary using g e t forbidden response
func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) Code() int {
	return 403
}

func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETForbidden", 403)
}

func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETForbidden", 403)
}

func (o *GetPendingReconciliationBillSummaryUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPendingReconciliationBillSummaryUsingGETNotFound creates a GetPendingReconciliationBillSummaryUsingGETNotFound with default headers values
func NewGetPendingReconciliationBillSummaryUsingGETNotFound() *GetPendingReconciliationBillSummaryUsingGETNotFound {
	return &GetPendingReconciliationBillSummaryUsingGETNotFound{}
}

/*
GetPendingReconciliationBillSummaryUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPendingReconciliationBillSummaryUsingGETNotFound struct {
}

// IsSuccess returns true when this get pending reconciliation bill summary using g e t not found response has a 2xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pending reconciliation bill summary using g e t not found response has a 3xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pending reconciliation bill summary using g e t not found response has a 4xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get pending reconciliation bill summary using g e t not found response has a 5xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get pending reconciliation bill summary using g e t not found response a status code equal to that given
func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get pending reconciliation bill summary using g e t not found response
func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) Code() int {
	return 404
}

func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETNotFound", 404)
}

func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETNotFound", 404)
}

func (o *GetPendingReconciliationBillSummaryUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPendingReconciliationBillSummaryUsingGETInternalServerError creates a GetPendingReconciliationBillSummaryUsingGETInternalServerError with default headers values
func NewGetPendingReconciliationBillSummaryUsingGETInternalServerError() *GetPendingReconciliationBillSummaryUsingGETInternalServerError {
	return &GetPendingReconciliationBillSummaryUsingGETInternalServerError{}
}

/*
GetPendingReconciliationBillSummaryUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetPendingReconciliationBillSummaryUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get pending reconciliation bill summary using g e t internal server error response has a 2xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get pending reconciliation bill summary using g e t internal server error response has a 3xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get pending reconciliation bill summary using g e t internal server error response has a 4xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get pending reconciliation bill summary using g e t internal server error response has a 5xx status code
func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get pending reconciliation bill summary using g e t internal server error response a status code equal to that given
func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get pending reconciliation bill summary using g e t internal server error response
func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETInternalServerError", 500)
}

func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/bill/pendingReconciliationSummary][%d] getPendingReconciliationBillSummaryUsingGETInternalServerError", 500)
}

func (o *GetPendingReconciliationBillSummaryUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
