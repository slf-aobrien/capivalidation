// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Person Person
//
// swagger:model Person
type Person struct {

	// birth date
	BirthDate string `json:"birthDate,omitempty"`

	// client ids
	ClientIds *ClientIds `json:"clientIds,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// mid name
	MidName string `json:"midName,omitempty"`

	// national Id
	NationalID string `json:"nationalId,omitempty"`

	// passport no
	PassportNo string `json:"passportNo,omitempty"`

	// prefix
	Prefix string `json:"prefix,omitempty"`

	// sex cd
	SexCd string `json:"sexCd,omitempty"`

	// suffix
	Suffix string `json:"suffix,omitempty"`
}

// Validate validates this person
func (m *Person) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Person) validateClientIds(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientIds) { // not required
		return nil
	}

	if m.ClientIds != nil {
		if err := m.ClientIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientIds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this person based on the context it is used
func (m *Person) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Person) contextValidateClientIds(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientIds != nil {

		if swag.IsZero(m.ClientIds) { // not required
			return nil
		}

		if err := m.ClientIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientIds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Person) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Person) UnmarshalBinary(b []byte) error {
	var res Person
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
