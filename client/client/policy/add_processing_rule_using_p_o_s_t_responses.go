// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// AddProcessingRuleUsingPOSTReader is a Reader for the AddProcessingRuleUsingPOST structure.
type AddProcessingRuleUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddProcessingRuleUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddProcessingRuleUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewAddProcessingRuleUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddProcessingRuleUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddProcessingRuleUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddProcessingRuleUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddProcessingRuleUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddProcessingRuleUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /compassintegrationapp/policy/processingRules] addProcessingRuleUsingPOST", response, response.Code())
	}
}

// NewAddProcessingRuleUsingPOSTOK creates a AddProcessingRuleUsingPOSTOK with default headers values
func NewAddProcessingRuleUsingPOSTOK() *AddProcessingRuleUsingPOSTOK {
	return &AddProcessingRuleUsingPOSTOK{}
}

/*
AddProcessingRuleUsingPOSTOK describes a response with status code 200, with default header values.

Success
*/
type AddProcessingRuleUsingPOSTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this add processing rule using p o s t o k response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add processing rule using p o s t o k response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t o k response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add processing rule using p o s t o k response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add processing rule using p o s t o k response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the add processing rule using p o s t o k response
func (o *AddProcessingRuleUsingPOSTOK) Code() int {
	return 200
}

func (o *AddProcessingRuleUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTOK %s", 200, payload)
}

func (o *AddProcessingRuleUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTOK %s", 200, payload)
}

func (o *AddProcessingRuleUsingPOSTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *AddProcessingRuleUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddProcessingRuleUsingPOSTCreated creates a AddProcessingRuleUsingPOSTCreated with default headers values
func NewAddProcessingRuleUsingPOSTCreated() *AddProcessingRuleUsingPOSTCreated {
	return &AddProcessingRuleUsingPOSTCreated{}
}

/*
AddProcessingRuleUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type AddProcessingRuleUsingPOSTCreated struct {
}

// IsSuccess returns true when this add processing rule using p o s t created response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add processing rule using p o s t created response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t created response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this add processing rule using p o s t created response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this add processing rule using p o s t created response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the add processing rule using p o s t created response
func (o *AddProcessingRuleUsingPOSTCreated) Code() int {
	return 201
}

func (o *AddProcessingRuleUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTCreated", 201)
}

func (o *AddProcessingRuleUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTCreated", 201)
}

func (o *AddProcessingRuleUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProcessingRuleUsingPOSTBadRequest creates a AddProcessingRuleUsingPOSTBadRequest with default headers values
func NewAddProcessingRuleUsingPOSTBadRequest() *AddProcessingRuleUsingPOSTBadRequest {
	return &AddProcessingRuleUsingPOSTBadRequest{}
}

/*
AddProcessingRuleUsingPOSTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AddProcessingRuleUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this add processing rule using p o s t bad request response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add processing rule using p o s t bad request response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t bad request response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add processing rule using p o s t bad request response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add processing rule using p o s t bad request response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the add processing rule using p o s t bad request response
func (o *AddProcessingRuleUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *AddProcessingRuleUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTBadRequest", 400)
}

func (o *AddProcessingRuleUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTBadRequest", 400)
}

func (o *AddProcessingRuleUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProcessingRuleUsingPOSTUnauthorized creates a AddProcessingRuleUsingPOSTUnauthorized with default headers values
func NewAddProcessingRuleUsingPOSTUnauthorized() *AddProcessingRuleUsingPOSTUnauthorized {
	return &AddProcessingRuleUsingPOSTUnauthorized{}
}

/*
AddProcessingRuleUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddProcessingRuleUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this add processing rule using p o s t unauthorized response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add processing rule using p o s t unauthorized response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t unauthorized response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this add processing rule using p o s t unauthorized response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this add processing rule using p o s t unauthorized response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the add processing rule using p o s t unauthorized response
func (o *AddProcessingRuleUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *AddProcessingRuleUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTUnauthorized", 401)
}

func (o *AddProcessingRuleUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTUnauthorized", 401)
}

func (o *AddProcessingRuleUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProcessingRuleUsingPOSTForbidden creates a AddProcessingRuleUsingPOSTForbidden with default headers values
func NewAddProcessingRuleUsingPOSTForbidden() *AddProcessingRuleUsingPOSTForbidden {
	return &AddProcessingRuleUsingPOSTForbidden{}
}

/*
AddProcessingRuleUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddProcessingRuleUsingPOSTForbidden struct {
}

// IsSuccess returns true when this add processing rule using p o s t forbidden response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add processing rule using p o s t forbidden response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t forbidden response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add processing rule using p o s t forbidden response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add processing rule using p o s t forbidden response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the add processing rule using p o s t forbidden response
func (o *AddProcessingRuleUsingPOSTForbidden) Code() int {
	return 403
}

func (o *AddProcessingRuleUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTForbidden", 403)
}

func (o *AddProcessingRuleUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTForbidden", 403)
}

func (o *AddProcessingRuleUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProcessingRuleUsingPOSTNotFound creates a AddProcessingRuleUsingPOSTNotFound with default headers values
func NewAddProcessingRuleUsingPOSTNotFound() *AddProcessingRuleUsingPOSTNotFound {
	return &AddProcessingRuleUsingPOSTNotFound{}
}

/*
AddProcessingRuleUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AddProcessingRuleUsingPOSTNotFound struct {
}

// IsSuccess returns true when this add processing rule using p o s t not found response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add processing rule using p o s t not found response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t not found response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add processing rule using p o s t not found response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add processing rule using p o s t not found response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the add processing rule using p o s t not found response
func (o *AddProcessingRuleUsingPOSTNotFound) Code() int {
	return 404
}

func (o *AddProcessingRuleUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTNotFound", 404)
}

func (o *AddProcessingRuleUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTNotFound", 404)
}

func (o *AddProcessingRuleUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddProcessingRuleUsingPOSTInternalServerError creates a AddProcessingRuleUsingPOSTInternalServerError with default headers values
func NewAddProcessingRuleUsingPOSTInternalServerError() *AddProcessingRuleUsingPOSTInternalServerError {
	return &AddProcessingRuleUsingPOSTInternalServerError{}
}

/*
AddProcessingRuleUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type AddProcessingRuleUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this add processing rule using p o s t internal server error response has a 2xx status code
func (o *AddProcessingRuleUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add processing rule using p o s t internal server error response has a 3xx status code
func (o *AddProcessingRuleUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add processing rule using p o s t internal server error response has a 4xx status code
func (o *AddProcessingRuleUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add processing rule using p o s t internal server error response has a 5xx status code
func (o *AddProcessingRuleUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add processing rule using p o s t internal server error response a status code equal to that given
func (o *AddProcessingRuleUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the add processing rule using p o s t internal server error response
func (o *AddProcessingRuleUsingPOSTInternalServerError) Code() int {
	return 500
}

func (o *AddProcessingRuleUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTInternalServerError", 500)
}

func (o *AddProcessingRuleUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/processingRules][%d] addProcessingRuleUsingPOSTInternalServerError", 500)
}

func (o *AddProcessingRuleUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
