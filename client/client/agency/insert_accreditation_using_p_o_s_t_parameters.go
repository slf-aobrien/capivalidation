// Code generated by go-swagger; DO NOT EDIT.

package agency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// NewInsertAccreditationUsingPOSTParams creates a new InsertAccreditationUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInsertAccreditationUsingPOSTParams() *InsertAccreditationUsingPOSTParams {
	return &InsertAccreditationUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInsertAccreditationUsingPOSTParamsWithTimeout creates a new InsertAccreditationUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewInsertAccreditationUsingPOSTParamsWithTimeout(timeout time.Duration) *InsertAccreditationUsingPOSTParams {
	return &InsertAccreditationUsingPOSTParams{
		timeout: timeout,
	}
}

// NewInsertAccreditationUsingPOSTParamsWithContext creates a new InsertAccreditationUsingPOSTParams object
// with the ability to set a context for a request.
func NewInsertAccreditationUsingPOSTParamsWithContext(ctx context.Context) *InsertAccreditationUsingPOSTParams {
	return &InsertAccreditationUsingPOSTParams{
		Context: ctx,
	}
}

// NewInsertAccreditationUsingPOSTParamsWithHTTPClient creates a new InsertAccreditationUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewInsertAccreditationUsingPOSTParamsWithHTTPClient(client *http.Client) *InsertAccreditationUsingPOSTParams {
	return &InsertAccreditationUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
InsertAccreditationUsingPOSTParams contains all the parameters to send to the API endpoint

	for the insert accreditation using p o s t operation.

	Typically these are written to a http.Request.
*/
type InsertAccreditationUsingPOSTParams struct {

	/* Accreditation.

	   accreditation
	*/
	Accreditation *models.AccreditationHistoryDTO

	/* AgencyKey.

	   agencyKey
	*/
	AgencyKey *string

	/* AgencyNumber.

	   agencyNumber
	*/
	AgencyNumber *string

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the insert accreditation using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InsertAccreditationUsingPOSTParams) WithDefaults() *InsertAccreditationUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the insert accreditation using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InsertAccreditationUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithTimeout(timeout time.Duration) *InsertAccreditationUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithContext(ctx context.Context) *InsertAccreditationUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithHTTPClient(client *http.Client) *InsertAccreditationUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccreditation adds the accreditation to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithAccreditation(accreditation *models.AccreditationHistoryDTO) *InsertAccreditationUsingPOSTParams {
	o.SetAccreditation(accreditation)
	return o
}

// SetAccreditation adds the accreditation to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetAccreditation(accreditation *models.AccreditationHistoryDTO) {
	o.Accreditation = accreditation
}

// WithAgencyKey adds the agencyKey to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithAgencyKey(agencyKey *string) *InsertAccreditationUsingPOSTParams {
	o.SetAgencyKey(agencyKey)
	return o
}

// SetAgencyKey adds the agencyKey to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetAgencyKey(agencyKey *string) {
	o.AgencyKey = agencyKey
}

// WithAgencyNumber adds the agencyNumber to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithAgencyNumber(agencyNumber *string) *InsertAccreditationUsingPOSTParams {
	o.SetAgencyNumber(agencyNumber)
	return o
}

// SetAgencyNumber adds the agencyNumber to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetAgencyNumber(agencyNumber *string) {
	o.AgencyNumber = agencyNumber
}

// WithEffectiveDate adds the effectiveDate to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithEffectiveDate(effectiveDate string) *InsertAccreditationUsingPOSTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithRequestApplication adds the requestApplication to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithRequestApplication(requestApplication string) *InsertAccreditationUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithRequestUser(requestUser string) *InsertAccreditationUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WithVarianceFormat adds the varianceFormat to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithVarianceFormat(varianceFormat string) *InsertAccreditationUsingPOSTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetVarianceFormat(varianceFormat string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) WithVarianceLevel(varianceLevel string) *InsertAccreditationUsingPOSTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the insert accreditation using p o s t params
func (o *InsertAccreditationUsingPOSTParams) SetVarianceLevel(varianceLevel string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *InsertAccreditationUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Accreditation != nil {
		if err := r.SetBodyParam(o.Accreditation); err != nil {
			return err
		}
	}

	if o.AgencyKey != nil {

		// query param agencyKey
		var qrAgencyKey string

		if o.AgencyKey != nil {
			qrAgencyKey = *o.AgencyKey
		}
		qAgencyKey := qrAgencyKey
		if qAgencyKey != "" {

			if err := r.SetQueryParam("agencyKey", qAgencyKey); err != nil {
				return err
			}
		}
	}

	if o.AgencyNumber != nil {

		// query param agencyNumber
		var qrAgencyNumber string

		if o.AgencyNumber != nil {
			qrAgencyNumber = *o.AgencyNumber
		}
		qAgencyNumber := qrAgencyNumber
		if qAgencyNumber != "" {

			if err := r.SetQueryParam("agencyNumber", qAgencyNumber); err != nil {
				return err
			}
		}
	}

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	// query param varianceFormat
	qrVarianceFormat := o.VarianceFormat
	qVarianceFormat := qrVarianceFormat
	if qVarianceFormat != "" {

		if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
			return err
		}
	}

	// query param varianceLevel
	qrVarianceLevel := o.VarianceLevel
	qVarianceLevel := qrVarianceLevel
	if qVarianceLevel != "" {

		if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
