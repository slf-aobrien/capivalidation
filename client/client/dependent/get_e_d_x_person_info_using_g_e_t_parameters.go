// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetEDXPersonInfoUsingGETParams creates a new GetEDXPersonInfoUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEDXPersonInfoUsingGETParams() *GetEDXPersonInfoUsingGETParams {
	return &GetEDXPersonInfoUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEDXPersonInfoUsingGETParamsWithTimeout creates a new GetEDXPersonInfoUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetEDXPersonInfoUsingGETParamsWithTimeout(timeout time.Duration) *GetEDXPersonInfoUsingGETParams {
	return &GetEDXPersonInfoUsingGETParams{
		timeout: timeout,
	}
}

// NewGetEDXPersonInfoUsingGETParamsWithContext creates a new GetEDXPersonInfoUsingGETParams object
// with the ability to set a context for a request.
func NewGetEDXPersonInfoUsingGETParamsWithContext(ctx context.Context) *GetEDXPersonInfoUsingGETParams {
	return &GetEDXPersonInfoUsingGETParams{
		Context: ctx,
	}
}

// NewGetEDXPersonInfoUsingGETParamsWithHTTPClient creates a new GetEDXPersonInfoUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEDXPersonInfoUsingGETParamsWithHTTPClient(client *http.Client) *GetEDXPersonInfoUsingGETParams {
	return &GetEDXPersonInfoUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetEDXPersonInfoUsingGETParams contains all the parameters to send to the API endpoint

	for the get e d x person info using g e t operation.

	Typically these are written to a http.Request.
*/
type GetEDXPersonInfoUsingGETParams struct {

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	/* NameID.

	   nameId
	*/
	NameID *string

	/* Policy.

	   policy
	*/
	Policy *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get e d x person info using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEDXPersonInfoUsingGETParams) WithDefaults() *GetEDXPersonInfoUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get e d x person info using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEDXPersonInfoUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithTimeout(timeout time.Duration) *GetEDXPersonInfoUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithContext(ctx context.Context) *GetEDXPersonInfoUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithHTTPClient(client *http.Client) *GetEDXPersonInfoUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffectiveDate adds the effectiveDate to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithEffectiveDate(effectiveDate *string) *GetEDXPersonInfoUsingGETParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithNameID adds the nameID to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithNameID(nameID *string) *GetEDXPersonInfoUsingGETParams {
	o.SetNameID(nameID)
	return o
}

// SetNameID adds the nameId to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetNameID(nameID *string) {
	o.NameID = nameID
}

// WithPolicy adds the policy to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithPolicy(policy *string) *GetEDXPersonInfoUsingGETParams {
	o.SetPolicy(policy)
	return o
}

// SetPolicy adds the policy to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetPolicy(policy *string) {
	o.Policy = policy
}

// WithRequestApplication adds the requestApplication to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithRequestApplication(requestApplication *string) *GetEDXPersonInfoUsingGETParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) WithRequestUser(requestUser *string) *GetEDXPersonInfoUsingGETParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the get e d x person info using g e t params
func (o *GetEDXPersonInfoUsingGETParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WriteToRequest writes these params to a swagger request
func (o *GetEDXPersonInfoUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.NameID != nil {

		// query param nameId
		var qrNameID string

		if o.NameID != nil {
			qrNameID = *o.NameID
		}
		qNameID := qrNameID
		if qNameID != "" {

			if err := r.SetQueryParam("nameId", qNameID); err != nil {
				return err
			}
		}
	}

	if o.Policy != nil {

		// query param policy
		var qrPolicy string

		if o.Policy != nil {
			qrPolicy = *o.Policy
		}
		qPolicy := qrPolicy
		if qPolicy != "" {

			if err := r.SetQueryParam("policy", qPolicy); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
