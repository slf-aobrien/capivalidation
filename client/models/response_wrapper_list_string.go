// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseWrapperListString ResponseWrapper«List«string»»
//
// swagger:model ResponseWrapper«List«string»»
type ResponseWrapperListString struct {

	// fail
	Fail bool `json:"fail,omitempty"`

	// http response code
	HTTPResponseCode int32 `json:"httpResponseCode,omitempty"`

	// payload
	Payload []string `json:"payload"`

	// response code
	ResponseCode int32 `json:"responseCode,omitempty"`

	// response message
	ResponseMessage string `json:"responseMessage,omitempty"`

	// success
	Success bool `json:"success,omitempty"`

	// total elements
	TotalElements int64 `json:"totalElements,omitempty"`

	// total pages
	TotalPages int64 `json:"totalPages,omitempty"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// variance detail map
	VarianceDetailMap map[string][]VarianceDetailDTO `json:"varianceDetailMap,omitempty"`

	// variance map
	VarianceMap map[string][]VarianceDTO `json:"varianceMap,omitempty"`

	// warn
	Warn bool `json:"warn,omitempty"`
}

// Validate validates this response wrapper list string
func (m *ResponseWrapperListString) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVarianceDetailMap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVarianceMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var responseWrapperListStringPayloadItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["$10_PREPAID_ADMIN_EXPENSE","$10_SMALL_GRP_LIFE_FEE","$15_ADMIN_FEE_EXPENSE","AA_CHILD_CRITICAL_ILLNESS","AA_CRITICAL_ILLNESS_COMM_RULE_EF","AA_EMPLOYEE_CRITICAL_ILLNESS","AA_SPOUSE_CRITICAL_ILLNESS","ABSENCE_ADA","ABSENCE_ADA_ALLOWANCE_WITHHELD_TPA","ABSENCE_ADA_COMMISSIONS_WITHHELD_TPA","ABSENCE_MANAGEMENT_SERVICES_ABSADA","ABSENCE_MANAGEMENT_SERVICES_STDFMLA","ABSENCE_MANAGEMENT_SERVICES_TPA_ALLOWANCE","ABSENCE_MANAGEMENT_SERVICES_TPA_COMM_WITHHELD","ACCIDENT_COMM_RULE_EF","ACCIDENT_TPA_ALLOWANCE","ACCIDENT_TPA_COMM_WITHHELD","ADDITIONAL_CONTRIBUTORY_LIFE","AGG_SL","ASO_REIMBURSEMENTS_REGULAR_BILLING","BUSINESS_INCOME_BENEFIT","CANCER_COMM_RULE_EF","CANCER_TPA_ALLOWANCE","CANCER_TPA_COMM_WITHHELD","CASH_BENEFIT","CA_PPD_REGULAR_BILLING","CDC_TG_TPA_COMMISSIONS_WITHHELD","CDC_TPA_ALLOWANCE_WITHHELD","CDC_VOL_TPA_COMMISSIONS_WITHHELD","CHILD_ACCIDENT","CHILD_CANCER","CHILD_CRITICAL_ILLNESS","CHILD_DENTAL","CHILD_GAP","CHILD_HOSPITAL_INDEMNITY","CO_PAID_FAMILY_AND_MEDICAL_LEAVE","CO_PFML_ASO_TPA_ALLOWANCE","CO_PFML_FI_TPA_ALLOWANCE","CO_PFML_TPA_COMMISSIONS_WITHHELD","CRITICAL_ILLNESS_TPA_ALLOWANCE","CRITICAL_ILLNESS_TPA_COMM_WITHHELD","CT_PAID_FAMILY_AND_MEDICAL_LEAVE","CT_PFML_ASO_TPA_ALLOWANCE","CT_PFML_FI_TPA_ALLOWANCE","CT_PFML_TPA_COMMISSIONS_WITHHELD","DENTAL_ASO_REGULAR_BILLING","DENTAL_ASO_TPA_ALLOW_WHD","DENTAL_ASO_TPA_COMM_WHD","DENTAL_CHILD","DENTAL_CHILD_ASO","DENTAL_EMPLOYEE","DENTAL_EMPLOYEE_ASO","DENTAL_FAMILY","DENTAL_FAMILY_ASO","DENTAL_SPOUSE","DENTAL_SPOUSE_ASO","DEPENDENT_ADD","DEPENDENT_LIFE","DE_PAID_FAMILY_AND_MEDICAL_LEAVE","DE_PFML_ASO_TPA_ALLOWANCE","DE_PFML_FI_TPA_ALLOWANCE","DE_PFML_TPA_COMMISSIONS_WITHHELD","EE_DENTAL_TPA_ALLOWANCE","EE_LIFE_TPA_ALLOWANCE","EMPLOYEE_ACCIDENT","EMPLOYEE_ADD","EMPLOYEE_ASSISTANCE_PLAN","EMPLOYEE_ASSISTANCE_PLAN_TPA_ALLOWANCE","EMPLOYEE_ASSISTANCE_PLAN_TPA_COMM_WITHHELD","EMPLOYEE_CANCER","EMPLOYEE_CRITICAL_ILLNESS","EMPLOYEE_DENTAL","EMPLOYEE_GAP","EMPLOYEE_HOSPITAL_INDEMNITY","EMPLOYEE_LIFE","ENROLLMENT_FEE","FAMILY_ACCIDENT","FAMILY_CANCER","FAMILY_DENTAL","FAMILY_GAP","FAMILY_HOSPITAL_INDEMNITY","FAMILY_LEAVE_INSURANCE","FLI_TPA_ALLOWANCE_WITHHELD","FLI_TPA_COMMISSION_WITHHELD","GAP_TPA_ALLOWANCE","GAP_TPA_COMM_WITHHELD","HEALTH_NAVIGATOR","HEALTH_NAVIGATOR_BILLING","HEALTH_NAVIGATOR_TPA_ALLOWANCE","HEALTH_NAVIGATOR_TPA_COMM_WITHHELD","HOSPITAL_INDEMNITY_COMM_RULE_EF","HOSPITAL_INDEMNITY_TPA_ALLOW_WITHHELD","HOSPITAL_INDEMNITY_TPA_COMMISSIONS_WITHHELD","IA_CRITICAL_ILLNESS_COMM_RULE_EF","IA_VOLUNTARY_STD","IA_VOL_STD_COMM_RULE_EF","IA_VOL_STD_TPA_ALLOWANCE","IA_VOL_STD_TPA_COMM_WITHHELD","IMPLEMENTATION_FEE","INSURED_CH_BUY_UP_VISION","INSURED_CH_VISION","INSURED_EE_BUY_UP_VISION","INSURED_EE_VISION","INSURED_FF_BUY_UP_VISION","INSURED_FF_VISION","INSURED_SP_BUY_UP_VISION","INSURED_SP_VISION","INSURED_VISION_TPA_ALLOWANCE","LIFE_TPA_COMM_WITHHELD","LIST_BILL_FEE","LONG_TERM_DISABILITY_BENEFIT","LONG_TERM_DISABILITY_PAYROLL","LTD_BUY_UP","LTD_TPA_ALLOWANCE","LTD_TPA_COMM_WITHHELD","MAXWELL_HEALTH","MAXWELL_HEALTH_FEE","MA_PAID_FAMILY_AND_MEDICAL_LEAVE","MA_PFML_ASO_TPA_ALLOWANCE","MA_PFML_FI_TPA_ALLOWANCE","MA_PFML_TPA_COMMISSIONS_WITHHELD","MEMBER_DIRECT_BILLING_IN_ADVANCE","MEMBER_DIRECT_BILLING_IN_ARREARS","MN_PAID_FAMILY_AND_MEDICAL_LEAVE","MN_PFML_ASO_TPA_ALLOWANCE","MN_PFML_FI_TPA_ALLOWANCE","MN_PFML_TPA_COMMISSIONS_WITHHELD","MONTHLY_IN_ARREARS_BILLING","NOTIONAL_BILLING","NY_PAID_FAMILY_LEAVE","NY_PAID_FAMILY_LEAVE_TPA_ALLOWANCE_WITHHELD","NY_PAID_FAMILY_LEAVE_TPA_COMMISSION_WITHHELD","OR_PAID_FAMILY_AND_MEDICAL_LEAVE","OR_PFML_ASO_TPA_ALLOWANCE","OR_PFML_FI_TPA_ALLOWANCE","OR_PFML_TPA_COMMISSIONS_WITHHELD","PREPAID_CHILD_DENTAL","PREPAID_COMMISSION_WITHHELD","PREPAID_EMPLOYEE_DENTAL","PREPAID_FAMILY_DENTAL","PREPAID_SPOUSE_DENTAL","PREPAID_TPA_ALLOWANCE","QUARTERLY_IN_ARREARS_BILLING","RECONCILIATION_BILLING","REGULAR_BILLING","SHORT_TERM_DISABILITY","SIMPLE_BENEFIT_SOLUTIONS","SMALL_GROUP_CERT_FEE","SPEC_SL_E1DEP","SPEC_SL_ECH","SPEC_SL_EE","SPEC_SL_EFAM","SPEC_SL_ESP","SPOUSE_ACCIDENT","SPOUSE_ACCIDENT_DISABILITY","SPOUSE_CANCER","SPOUSE_CRITICAL_ILLNESS","SPOUSE_DENTAL","SPOUSE_GAP","SPOUSE_HOSPITAL_INDEMNITY","STAND_ALONE_CHILD_VOL_ADD","STAND_ALONE_EMPLOYEE_VOL_ADD","STAND_ALONE_FAMILY_VOL_ADD","STAND_ALONE_SPOUSE_VOL_ADD","STAND_ALONE_VOL_ADD_TPA_ALLOWANCE","STAND_ALONE_VOL_ADD_TPA_COMM_WITHHELD","STD_BUY_UP","STD_NY_DBL_TPA_ALLOWANCE","STD_NY_DBL_TPA_COMM_WITHHELD","STD_TPA_ALLOWANCE","STD_TPA_COMM_WITHHELD","STOP_LOSS_AGG_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_AGG_COMM_WITHHELD_TPA","STOP_LOSS_AGG_TPA_ALLOWANCE_WITHHELD","STOP_LOSS_ANNUAL_BILLING","STOP_LOSS_MONTHLY_BILLING","STOP_LOSS_SPEC_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_SPEC_COMMISSION_WITHHELD_TPA","STOP_LOSS_SPEC_TPA_ALLOWANCE_WITHHELD","SUN_ADVISOR","SUN_ADVISOR_TPA_ALLOWANCE","SUN_ADVISOR_TPA_COMM_WITHHELD","TG_DEN_TPA_COMM_WITHHELD","TPA_COMMISSIONS_WITHHELD","TRAVEL_ACCIDENT","VISION","VOLUNTARY_CHILD_ADD","VOLUNTARY_CHILD_DENTAL","VOLUNTARY_CHILD_LIFE","VOLUNTARY_DEPENDENT_LIFE","VOLUNTARY_EMPLOYEE_ADD","VOLUNTARY_EMPLOYEE_DENTAL","VOLUNTARY_EMPLOYEE_LIFE","VOLUNTARY_FAMILY_DENTAL","VOLUNTARY_LTD","VOLUNTARY_SPOUSE_ADD","VOLUNTARY_SPOUSE_DENTAL","VOLUNTARY_SPOUSE_LIFE","VOLUNTARY_STD","VOL_DENTAL_TPA_ALLOWANCE","VOL_DEN_TPA_COMM_WITHHELD","VOL_LIFE_TPA_ALLOWANCE","VOL_LIFE_TPA_COMM_WITHHELD","VOL_LTD_TPA_ALLOWANCE","VOL_LTD_TPA_COMM_WITHHELD","VOL_STD_TPA_ALLOWANCE","VOL_STD_TPA_COMM_WITHHELD","WA_PAID_FAMILY_AND_MEDICAL_LEAVE","WA_PFML_TPA_ALLOWANCE","WA_PFML_TPA_COMMISSIONS_WITHHELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseWrapperListStringPayloadItemsEnum = append(responseWrapperListStringPayloadItemsEnum, v)
	}
}

func (m *ResponseWrapperListString) validatePayloadItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, responseWrapperListStringPayloadItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResponseWrapperListString) validatePayload(formats strfmt.Registry) error {
	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	for i := 0; i < len(m.Payload); i++ {

		// value enum
		if err := m.validatePayloadItemsEnum("payload"+"."+strconv.Itoa(i), "body", m.Payload[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ResponseWrapperListString) validateVarianceDetailMap(formats strfmt.Registry) error {
	if swag.IsZero(m.VarianceDetailMap) { // not required
		return nil
	}

	for k := range m.VarianceDetailMap {

		if err := validate.Required("varianceDetailMap"+"."+k, "body", m.VarianceDetailMap[k]); err != nil {
			return err
		}

		if err := validate.UniqueItems("varianceDetailMap"+"."+k, "body", m.VarianceDetailMap[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.VarianceDetailMap[k]); i++ {

			if err := m.VarianceDetailMap[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("varianceDetailMap" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("varianceDetailMap" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *ResponseWrapperListString) validateVarianceMap(formats strfmt.Registry) error {
	if swag.IsZero(m.VarianceMap) { // not required
		return nil
	}

	for k := range m.VarianceMap {

		if err := validate.Required("varianceMap"+"."+k, "body", m.VarianceMap[k]); err != nil {
			return err
		}

		if err := validate.UniqueItems("varianceMap"+"."+k, "body", m.VarianceMap[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.VarianceMap[k]); i++ {

			if err := m.VarianceMap[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("varianceMap" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("varianceMap" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// ContextValidate validate this response wrapper list string based on the context it is used
func (m *ResponseWrapperListString) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVarianceDetailMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVarianceMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseWrapperListString) contextValidateVarianceDetailMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.VarianceDetailMap {

		for i := 0; i < len(m.VarianceDetailMap[k]); i++ {

			if swag.IsZero(m.VarianceDetailMap[k][i]) { // not required
				return nil
			}

			if err := m.VarianceDetailMap[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("varianceDetailMap" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("varianceDetailMap" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *ResponseWrapperListString) contextValidateVarianceMap(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.VarianceMap {

		for i := 0; i < len(m.VarianceMap[k]); i++ {

			if swag.IsZero(m.VarianceMap[k][i]) { // not required
				return nil
			}

			if err := m.VarianceMap[k][i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("varianceMap" + "." + k + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("varianceMap" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseWrapperListString) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseWrapperListString) UnmarshalBinary(b []byte) error {
	var res ResponseWrapperListString
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
