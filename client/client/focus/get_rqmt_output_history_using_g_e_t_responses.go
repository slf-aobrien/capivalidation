// Code generated by go-swagger; DO NOT EDIT.

package focus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetRqmtOutputHistoryUsingGETReader is a Reader for the GetRqmtOutputHistoryUsingGET structure.
type GetRqmtOutputHistoryUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRqmtOutputHistoryUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRqmtOutputHistoryUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetRqmtOutputHistoryUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetRqmtOutputHistoryUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetRqmtOutputHistoryUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRqmtOutputHistoryUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetRqmtOutputHistoryUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/focus/requirementOutputs] getRqmtOutputHistoryUsingGET", response, response.Code())
	}
}

// NewGetRqmtOutputHistoryUsingGETOK creates a GetRqmtOutputHistoryUsingGETOK with default headers values
func NewGetRqmtOutputHistoryUsingGETOK() *GetRqmtOutputHistoryUsingGETOK {
	return &GetRqmtOutputHistoryUsingGETOK{}
}

/*
GetRqmtOutputHistoryUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetRqmtOutputHistoryUsingGETOK struct {
	Payload *models.ResponseWrapperListRequirementOutputHistoryDTO
}

// IsSuccess returns true when this get rqmt output history using g e t o k response has a 2xx status code
func (o *GetRqmtOutputHistoryUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get rqmt output history using g e t o k response has a 3xx status code
func (o *GetRqmtOutputHistoryUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rqmt output history using g e t o k response has a 4xx status code
func (o *GetRqmtOutputHistoryUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rqmt output history using g e t o k response has a 5xx status code
func (o *GetRqmtOutputHistoryUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get rqmt output history using g e t o k response a status code equal to that given
func (o *GetRqmtOutputHistoryUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get rqmt output history using g e t o k response
func (o *GetRqmtOutputHistoryUsingGETOK) Code() int {
	return 200
}

func (o *GetRqmtOutputHistoryUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETOK %s", 200, payload)
}

func (o *GetRqmtOutputHistoryUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETOK %s", 200, payload)
}

func (o *GetRqmtOutputHistoryUsingGETOK) GetPayload() *models.ResponseWrapperListRequirementOutputHistoryDTO {
	return o.Payload
}

func (o *GetRqmtOutputHistoryUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListRequirementOutputHistoryDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRqmtOutputHistoryUsingGETBadRequest creates a GetRqmtOutputHistoryUsingGETBadRequest with default headers values
func NewGetRqmtOutputHistoryUsingGETBadRequest() *GetRqmtOutputHistoryUsingGETBadRequest {
	return &GetRqmtOutputHistoryUsingGETBadRequest{}
}

/*
GetRqmtOutputHistoryUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetRqmtOutputHistoryUsingGETBadRequest struct {
}

// IsSuccess returns true when this get rqmt output history using g e t bad request response has a 2xx status code
func (o *GetRqmtOutputHistoryUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rqmt output history using g e t bad request response has a 3xx status code
func (o *GetRqmtOutputHistoryUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rqmt output history using g e t bad request response has a 4xx status code
func (o *GetRqmtOutputHistoryUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rqmt output history using g e t bad request response has a 5xx status code
func (o *GetRqmtOutputHistoryUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get rqmt output history using g e t bad request response a status code equal to that given
func (o *GetRqmtOutputHistoryUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get rqmt output history using g e t bad request response
func (o *GetRqmtOutputHistoryUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetRqmtOutputHistoryUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETBadRequest", 400)
}

func (o *GetRqmtOutputHistoryUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETBadRequest", 400)
}

func (o *GetRqmtOutputHistoryUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRqmtOutputHistoryUsingGETUnauthorized creates a GetRqmtOutputHistoryUsingGETUnauthorized with default headers values
func NewGetRqmtOutputHistoryUsingGETUnauthorized() *GetRqmtOutputHistoryUsingGETUnauthorized {
	return &GetRqmtOutputHistoryUsingGETUnauthorized{}
}

/*
GetRqmtOutputHistoryUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetRqmtOutputHistoryUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get rqmt output history using g e t unauthorized response has a 2xx status code
func (o *GetRqmtOutputHistoryUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rqmt output history using g e t unauthorized response has a 3xx status code
func (o *GetRqmtOutputHistoryUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rqmt output history using g e t unauthorized response has a 4xx status code
func (o *GetRqmtOutputHistoryUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rqmt output history using g e t unauthorized response has a 5xx status code
func (o *GetRqmtOutputHistoryUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get rqmt output history using g e t unauthorized response a status code equal to that given
func (o *GetRqmtOutputHistoryUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get rqmt output history using g e t unauthorized response
func (o *GetRqmtOutputHistoryUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetRqmtOutputHistoryUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETUnauthorized", 401)
}

func (o *GetRqmtOutputHistoryUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETUnauthorized", 401)
}

func (o *GetRqmtOutputHistoryUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRqmtOutputHistoryUsingGETForbidden creates a GetRqmtOutputHistoryUsingGETForbidden with default headers values
func NewGetRqmtOutputHistoryUsingGETForbidden() *GetRqmtOutputHistoryUsingGETForbidden {
	return &GetRqmtOutputHistoryUsingGETForbidden{}
}

/*
GetRqmtOutputHistoryUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetRqmtOutputHistoryUsingGETForbidden struct {
}

// IsSuccess returns true when this get rqmt output history using g e t forbidden response has a 2xx status code
func (o *GetRqmtOutputHistoryUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rqmt output history using g e t forbidden response has a 3xx status code
func (o *GetRqmtOutputHistoryUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rqmt output history using g e t forbidden response has a 4xx status code
func (o *GetRqmtOutputHistoryUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rqmt output history using g e t forbidden response has a 5xx status code
func (o *GetRqmtOutputHistoryUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get rqmt output history using g e t forbidden response a status code equal to that given
func (o *GetRqmtOutputHistoryUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get rqmt output history using g e t forbidden response
func (o *GetRqmtOutputHistoryUsingGETForbidden) Code() int {
	return 403
}

func (o *GetRqmtOutputHistoryUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETForbidden", 403)
}

func (o *GetRqmtOutputHistoryUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETForbidden", 403)
}

func (o *GetRqmtOutputHistoryUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRqmtOutputHistoryUsingGETNotFound creates a GetRqmtOutputHistoryUsingGETNotFound with default headers values
func NewGetRqmtOutputHistoryUsingGETNotFound() *GetRqmtOutputHistoryUsingGETNotFound {
	return &GetRqmtOutputHistoryUsingGETNotFound{}
}

/*
GetRqmtOutputHistoryUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetRqmtOutputHistoryUsingGETNotFound struct {
}

// IsSuccess returns true when this get rqmt output history using g e t not found response has a 2xx status code
func (o *GetRqmtOutputHistoryUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rqmt output history using g e t not found response has a 3xx status code
func (o *GetRqmtOutputHistoryUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rqmt output history using g e t not found response has a 4xx status code
func (o *GetRqmtOutputHistoryUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get rqmt output history using g e t not found response has a 5xx status code
func (o *GetRqmtOutputHistoryUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get rqmt output history using g e t not found response a status code equal to that given
func (o *GetRqmtOutputHistoryUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get rqmt output history using g e t not found response
func (o *GetRqmtOutputHistoryUsingGETNotFound) Code() int {
	return 404
}

func (o *GetRqmtOutputHistoryUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETNotFound", 404)
}

func (o *GetRqmtOutputHistoryUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETNotFound", 404)
}

func (o *GetRqmtOutputHistoryUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetRqmtOutputHistoryUsingGETInternalServerError creates a GetRqmtOutputHistoryUsingGETInternalServerError with default headers values
func NewGetRqmtOutputHistoryUsingGETInternalServerError() *GetRqmtOutputHistoryUsingGETInternalServerError {
	return &GetRqmtOutputHistoryUsingGETInternalServerError{}
}

/*
GetRqmtOutputHistoryUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetRqmtOutputHistoryUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get rqmt output history using g e t internal server error response has a 2xx status code
func (o *GetRqmtOutputHistoryUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get rqmt output history using g e t internal server error response has a 3xx status code
func (o *GetRqmtOutputHistoryUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get rqmt output history using g e t internal server error response has a 4xx status code
func (o *GetRqmtOutputHistoryUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get rqmt output history using g e t internal server error response has a 5xx status code
func (o *GetRqmtOutputHistoryUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get rqmt output history using g e t internal server error response a status code equal to that given
func (o *GetRqmtOutputHistoryUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get rqmt output history using g e t internal server error response
func (o *GetRqmtOutputHistoryUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetRqmtOutputHistoryUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETInternalServerError", 500)
}

func (o *GetRqmtOutputHistoryUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/focus/requirementOutputs][%d] getRqmtOutputHistoryUsingGETInternalServerError", 500)
}

func (o *GetRqmtOutputHistoryUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
