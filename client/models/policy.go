// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Policy Policy
//
// swagger:model Policy
type Policy struct {

	// alias
	Alias string `json:"alias,omitempty"`

	// benefit list
	BenefitList []*Benefit `json:"benefitList"`

	// bill group list
	BillGroupList []*BillGroup `json:"billGroupList"`

	// case key
	CaseKey string `json:"caseKey,omitempty"`

	// cat no
	CatNo string `json:"catNo,omitempty"`

	// cmnc date
	CmncDate string `json:"cmncDate,omitempty"`

	// member group list
	MemberGroupList []*MemberGroup `json:"memberGroupList"`

	// policy number
	PolicyNumber string `json:"policyNumber,omitempty"`
}

// Validate validates this policy
func (m *Policy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBenefitList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillGroupList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberGroupList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) validateBenefitList(formats strfmt.Registry) error {
	if swag.IsZero(m.BenefitList) { // not required
		return nil
	}

	for i := 0; i < len(m.BenefitList); i++ {
		if swag.IsZero(m.BenefitList[i]) { // not required
			continue
		}

		if m.BenefitList[i] != nil {
			if err := m.BenefitList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benefitList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benefitList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) validateBillGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.BillGroupList) { // not required
		return nil
	}

	for i := 0; i < len(m.BillGroupList); i++ {
		if swag.IsZero(m.BillGroupList[i]) { // not required
			continue
		}

		if m.BillGroupList[i] != nil {
			if err := m.BillGroupList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) validateMemberGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberGroupList) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberGroupList); i++ {
		if swag.IsZero(m.MemberGroupList[i]) { // not required
			continue
		}

		if m.MemberGroupList[i] != nil {
			if err := m.MemberGroupList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy based on the context it is used
func (m *Policy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBenefitList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Policy) contextValidateBenefitList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BenefitList); i++ {

		if m.BenefitList[i] != nil {

			if swag.IsZero(m.BenefitList[i]) { // not required
				return nil
			}

			if err := m.BenefitList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benefitList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benefitList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) contextValidateBillGroupList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BillGroupList); i++ {

		if m.BillGroupList[i] != nil {

			if swag.IsZero(m.BillGroupList[i]) { // not required
				return nil
			}

			if err := m.BillGroupList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Policy) contextValidateMemberGroupList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MemberGroupList); i++ {

		if m.MemberGroupList[i] != nil {

			if swag.IsZero(m.MemberGroupList[i]) { // not required
				return nil
			}

			if err := m.MemberGroupList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Policy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Policy) UnmarshalBinary(b []byte) error {
	var res Policy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
