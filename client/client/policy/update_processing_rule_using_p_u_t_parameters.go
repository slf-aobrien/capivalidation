// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// NewUpdateProcessingRuleUsingPUTParams creates a new UpdateProcessingRuleUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateProcessingRuleUsingPUTParams() *UpdateProcessingRuleUsingPUTParams {
	return &UpdateProcessingRuleUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateProcessingRuleUsingPUTParamsWithTimeout creates a new UpdateProcessingRuleUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateProcessingRuleUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateProcessingRuleUsingPUTParams {
	return &UpdateProcessingRuleUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateProcessingRuleUsingPUTParamsWithContext creates a new UpdateProcessingRuleUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateProcessingRuleUsingPUTParamsWithContext(ctx context.Context) *UpdateProcessingRuleUsingPUTParams {
	return &UpdateProcessingRuleUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateProcessingRuleUsingPUTParamsWithHTTPClient creates a new UpdateProcessingRuleUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateProcessingRuleUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateProcessingRuleUsingPUTParams {
	return &UpdateProcessingRuleUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateProcessingRuleUsingPUTParams contains all the parameters to send to the API endpoint

	for the update processing rule using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateProcessingRuleUsingPUTParams struct {

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber string

	/* ProcessingRuleDTO.

	   processingRuleDTO
	*/
	ProcessingRuleDTO *models.ProcessingRuleDTO

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update processing rule using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateProcessingRuleUsingPUTParams) WithDefaults() *UpdateProcessingRuleUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update processing rule using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateProcessingRuleUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateProcessingRuleUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithContext(ctx context.Context) *UpdateProcessingRuleUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateProcessingRuleUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffectiveDate adds the effectiveDate to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithEffectiveDate(effectiveDate string) *UpdateProcessingRuleUsingPUTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithPolicyNumber adds the policyNumber to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithPolicyNumber(policyNumber string) *UpdateProcessingRuleUsingPUTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetPolicyNumber(policyNumber string) {
	o.PolicyNumber = policyNumber
}

// WithProcessingRuleDTO adds the processingRuleDTO to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithProcessingRuleDTO(processingRuleDTO *models.ProcessingRuleDTO) *UpdateProcessingRuleUsingPUTParams {
	o.SetProcessingRuleDTO(processingRuleDTO)
	return o
}

// SetProcessingRuleDTO adds the processingRuleDTO to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetProcessingRuleDTO(processingRuleDTO *models.ProcessingRuleDTO) {
	o.ProcessingRuleDTO = processingRuleDTO
}

// WithRequestApplication adds the requestApplication to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithRequestApplication(requestApplication string) *UpdateProcessingRuleUsingPUTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithRequestUser(requestUser string) *UpdateProcessingRuleUsingPUTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WithVarianceFormat adds the varianceFormat to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithVarianceFormat(varianceFormat string) *UpdateProcessingRuleUsingPUTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetVarianceFormat(varianceFormat string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) WithVarianceLevel(varianceLevel *string) *UpdateProcessingRuleUsingPUTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the update processing rule using p u t params
func (o *UpdateProcessingRuleUsingPUTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateProcessingRuleUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	// query param policyNumber
	qrPolicyNumber := o.PolicyNumber
	qPolicyNumber := qrPolicyNumber
	if qPolicyNumber != "" {

		if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
			return err
		}
	}
	if o.ProcessingRuleDTO != nil {
		if err := r.SetBodyParam(o.ProcessingRuleDTO); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	// query param varianceFormat
	qrVarianceFormat := o.VarianceFormat
	qVarianceFormat := qrVarianceFormat
	if qVarianceFormat != "" {

		if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
			return err
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
