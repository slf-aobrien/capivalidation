// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateSmokerFlagUsingPUTReader is a Reader for the UpdateSmokerFlagUsingPUT structure.
type UpdateSmokerFlagUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSmokerFlagUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateSmokerFlagUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateSmokerFlagUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSmokerFlagUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateSmokerFlagUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSmokerFlagUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSmokerFlagUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSmokerFlagUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/dependent/update/smokerFlag] updateSmokerFlagUsingPUT", response, response.Code())
	}
}

// NewUpdateSmokerFlagUsingPUTOK creates a UpdateSmokerFlagUsingPUTOK with default headers values
func NewUpdateSmokerFlagUsingPUTOK() *UpdateSmokerFlagUsingPUTOK {
	return &UpdateSmokerFlagUsingPUTOK{}
}

/*
UpdateSmokerFlagUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateSmokerFlagUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update smoker flag using p u t o k response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update smoker flag using p u t o k response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t o k response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update smoker flag using p u t o k response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update smoker flag using p u t o k response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update smoker flag using p u t o k response
func (o *UpdateSmokerFlagUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateSmokerFlagUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTOK %s", 200, payload)
}

func (o *UpdateSmokerFlagUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTOK %s", 200, payload)
}

func (o *UpdateSmokerFlagUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateSmokerFlagUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSmokerFlagUsingPUTCreated creates a UpdateSmokerFlagUsingPUTCreated with default headers values
func NewUpdateSmokerFlagUsingPUTCreated() *UpdateSmokerFlagUsingPUTCreated {
	return &UpdateSmokerFlagUsingPUTCreated{}
}

/*
UpdateSmokerFlagUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateSmokerFlagUsingPUTCreated struct {
}

// IsSuccess returns true when this update smoker flag using p u t created response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update smoker flag using p u t created response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t created response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update smoker flag using p u t created response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update smoker flag using p u t created response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update smoker flag using p u t created response
func (o *UpdateSmokerFlagUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateSmokerFlagUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTCreated", 201)
}

func (o *UpdateSmokerFlagUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTCreated", 201)
}

func (o *UpdateSmokerFlagUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSmokerFlagUsingPUTBadRequest creates a UpdateSmokerFlagUsingPUTBadRequest with default headers values
func NewUpdateSmokerFlagUsingPUTBadRequest() *UpdateSmokerFlagUsingPUTBadRequest {
	return &UpdateSmokerFlagUsingPUTBadRequest{}
}

/*
UpdateSmokerFlagUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateSmokerFlagUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update smoker flag using p u t bad request response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update smoker flag using p u t bad request response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t bad request response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update smoker flag using p u t bad request response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update smoker flag using p u t bad request response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update smoker flag using p u t bad request response
func (o *UpdateSmokerFlagUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateSmokerFlagUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTBadRequest", 400)
}

func (o *UpdateSmokerFlagUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTBadRequest", 400)
}

func (o *UpdateSmokerFlagUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSmokerFlagUsingPUTUnauthorized creates a UpdateSmokerFlagUsingPUTUnauthorized with default headers values
func NewUpdateSmokerFlagUsingPUTUnauthorized() *UpdateSmokerFlagUsingPUTUnauthorized {
	return &UpdateSmokerFlagUsingPUTUnauthorized{}
}

/*
UpdateSmokerFlagUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateSmokerFlagUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update smoker flag using p u t unauthorized response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update smoker flag using p u t unauthorized response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t unauthorized response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update smoker flag using p u t unauthorized response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update smoker flag using p u t unauthorized response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update smoker flag using p u t unauthorized response
func (o *UpdateSmokerFlagUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateSmokerFlagUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTUnauthorized", 401)
}

func (o *UpdateSmokerFlagUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTUnauthorized", 401)
}

func (o *UpdateSmokerFlagUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSmokerFlagUsingPUTForbidden creates a UpdateSmokerFlagUsingPUTForbidden with default headers values
func NewUpdateSmokerFlagUsingPUTForbidden() *UpdateSmokerFlagUsingPUTForbidden {
	return &UpdateSmokerFlagUsingPUTForbidden{}
}

/*
UpdateSmokerFlagUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateSmokerFlagUsingPUTForbidden struct {
}

// IsSuccess returns true when this update smoker flag using p u t forbidden response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update smoker flag using p u t forbidden response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t forbidden response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update smoker flag using p u t forbidden response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update smoker flag using p u t forbidden response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update smoker flag using p u t forbidden response
func (o *UpdateSmokerFlagUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateSmokerFlagUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTForbidden", 403)
}

func (o *UpdateSmokerFlagUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTForbidden", 403)
}

func (o *UpdateSmokerFlagUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSmokerFlagUsingPUTNotFound creates a UpdateSmokerFlagUsingPUTNotFound with default headers values
func NewUpdateSmokerFlagUsingPUTNotFound() *UpdateSmokerFlagUsingPUTNotFound {
	return &UpdateSmokerFlagUsingPUTNotFound{}
}

/*
UpdateSmokerFlagUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateSmokerFlagUsingPUTNotFound struct {
}

// IsSuccess returns true when this update smoker flag using p u t not found response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update smoker flag using p u t not found response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t not found response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update smoker flag using p u t not found response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update smoker flag using p u t not found response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update smoker flag using p u t not found response
func (o *UpdateSmokerFlagUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateSmokerFlagUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTNotFound", 404)
}

func (o *UpdateSmokerFlagUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTNotFound", 404)
}

func (o *UpdateSmokerFlagUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateSmokerFlagUsingPUTInternalServerError creates a UpdateSmokerFlagUsingPUTInternalServerError with default headers values
func NewUpdateSmokerFlagUsingPUTInternalServerError() *UpdateSmokerFlagUsingPUTInternalServerError {
	return &UpdateSmokerFlagUsingPUTInternalServerError{}
}

/*
UpdateSmokerFlagUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateSmokerFlagUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update smoker flag using p u t internal server error response has a 2xx status code
func (o *UpdateSmokerFlagUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update smoker flag using p u t internal server error response has a 3xx status code
func (o *UpdateSmokerFlagUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update smoker flag using p u t internal server error response has a 4xx status code
func (o *UpdateSmokerFlagUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update smoker flag using p u t internal server error response has a 5xx status code
func (o *UpdateSmokerFlagUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update smoker flag using p u t internal server error response a status code equal to that given
func (o *UpdateSmokerFlagUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update smoker flag using p u t internal server error response
func (o *UpdateSmokerFlagUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateSmokerFlagUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTInternalServerError", 500)
}

func (o *UpdateSmokerFlagUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/smokerFlag][%d] updateSmokerFlagUsingPUTInternalServerError", 500)
}

func (o *UpdateSmokerFlagUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
