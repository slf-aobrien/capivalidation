// Code generated by go-swagger; DO NOT EDIT.

package bill

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new bill API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new bill API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new bill API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for bill API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationAebAuditBillDetailsV1JSON sets the Accept header to "application/aeb.audit.bill.details.v1+json".
func WithAcceptApplicationAebAuditBillDetailsV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.audit.bill.details.v1+json"}
}

// WithAcceptApplicationAebCasBillArrearsV1JSON sets the Accept header to "application/aeb.cas.bill.arrears.v1+json".
func WithAcceptApplicationAebCasBillArrearsV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bill.arrears.v1+json"}
}

// WithAcceptApplicationAebCasBillInfoV1JSON sets the Accept header to "application/aeb.cas.bill.info.v1+json".
func WithAcceptApplicationAebCasBillInfoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bill.info.v1+json"}
}

// WithAcceptApplicationAebCasBillReconV1JSON sets the Accept header to "application/aeb.cas.bill.recon.v1+json".
func WithAcceptApplicationAebCasBillReconV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bill.recon.v1+json"}
}

// WithAcceptApplicationAebCasBillSaSummaryV1JSON sets the Accept header to "application/aeb.cas.bill.sa.summary.v1+json".
func WithAcceptApplicationAebCasBillSaSummaryV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bill.sa.summary.v1+json"}
}

// WithAcceptApplicationAebCasBillSummaryV1JSON sets the Accept header to "application/aeb.cas.bill.summary.v1+json".
func WithAcceptApplicationAebCasBillSummaryV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bill.summary.v1+json"}
}

// WithAcceptApplicationAebCasBillTraditionalV1JSON sets the Accept header to "application/aeb.cas.bill.traditional.v1+json".
func WithAcceptApplicationAebCasBillTraditionalV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bill.traditional.v1+json"}
}

// WithAcceptApplicationAebCasBillsTransactionSchedulerV1JSON sets the Accept header to "application/aeb.cas.bills.transaction.scheduler.v1+json".
func WithAcceptApplicationAebCasBillsTransactionSchedulerV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.bills.transaction.scheduler.v1+json"}
}

// WithAcceptApplicationAebCasCaseBillsV1JSON sets the Accept header to "application/aeb.cas.case.bills.v1+json".
func WithAcceptApplicationAebCasCaseBillsV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.case.bills.v1+json"}
}

// WithAcceptApplicationAebCasFundRateV1JSON sets the Accept header to "application/aeb.cas.fund.rate.v1+json".
func WithAcceptApplicationAebCasFundRateV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.fund.rate.v1+json"}
}

// WithAcceptApplicationAebCasNonPendingBillSummaryV1JSON sets the Accept header to "application/aeb.cas.non.pending.bill.summary.v1+json".
func WithAcceptApplicationAebCasNonPendingBillSummaryV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.non.pending.bill.summary.v1+json"}
}

// WithAcceptApplicationAebCasPendingBillSummaryV1JSON sets the Accept header to "application/aeb.cas.pending.bill.summary.v1+json".
func WithAcceptApplicationAebCasPendingBillSummaryV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.pending.bill.summary.v1+json"}
}

// WithAcceptApplicationAebProcessAudittpacellbilldetailsBillsV1JSON sets the Accept header to "application/aeb.process.audittpacellbilldetails.bills.v1+json".
func WithAcceptApplicationAebProcessAudittpacellbilldetailsBillsV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.process.audittpacellbilldetails.bills.v1+json"}
}

// WithAcceptApplicationAebSuspenseAmtBillsV1JSON sets the Accept header to "application/aeb.suspense.amt.bills.v1+json".
func WithAcceptApplicationAebSuspenseAmtBillsV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.suspense.amt.bills.v1+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetArrearsBillUsingGET(params *GetArrearsBillUsingGETParams, opts ...ClientOption) (*GetArrearsBillUsingGETOK, error)

	GetAuditTpaCellBillDetailsUsingGET(params *GetAuditTpaCellBillDetailsUsingGETParams, opts ...ClientOption) (*GetAuditTpaCellBillDetailsUsingGETOK, error)

	GetBillGroupRuleTransactionSchedulerUsingGET(params *GetBillGroupRuleTransactionSchedulerUsingGETParams, opts ...ClientOption) (*GetBillGroupRuleTransactionSchedulerUsingGETOK, error)

	GetBillReconciliationUsingGET(params *GetBillReconciliationUsingGETParams, opts ...ClientOption) (*GetBillReconciliationUsingGETOK, error)

	GetBillSummaryUsingGET(params *GetBillSummaryUsingGETParams, opts ...ClientOption) (*GetBillSummaryUsingGETOK, error)

	GetBillingInfoUsingGET(params *GetBillingInfoUsingGETParams, opts ...ClientOption) (*GetBillingInfoUsingGETOK, error)

	GetCaseBillsUsingGET(params *GetCaseBillsUsingGETParams, opts ...ClientOption) (*GetCaseBillsUsingGETOK, error)

	GetFundRateDetailUsingGET(params *GetFundRateDetailUsingGETParams, opts ...ClientOption) (*GetFundRateDetailUsingGETOK, error)

	GetNonPendingReconciliationBillSummaryUsingGET(params *GetNonPendingReconciliationBillSummaryUsingGETParams, opts ...ClientOption) (*GetNonPendingReconciliationBillSummaryUsingGETOK, error)

	GetPendingReconciliationBillSummaryUsingGET(params *GetPendingReconciliationBillSummaryUsingGETParams, opts ...ClientOption) (*GetPendingReconciliationBillSummaryUsingGETOK, error)

	GetSaBillSummaryUsingGET(params *GetSaBillSummaryUsingGETParams, opts ...ClientOption) (*GetSaBillSummaryUsingGETOK, error)

	GetSuspenseAmtForBillsUsingGET(params *GetSuspenseAmtForBillsUsingGETParams, opts ...ClientOption) (*GetSuspenseAmtForBillsUsingGETOK, error)

	GetTraditionalBillUsingGET(params *GetTraditionalBillUsingGETParams, opts ...ClientOption) (*GetTraditionalBillUsingGETOK, error)

	PostBillReconciliationUsingPOST(params *PostBillReconciliationUsingPOSTParams, opts ...ClientOption) (*PostBillReconciliationUsingPOSTOK, *PostBillReconciliationUsingPOSTCreated, error)

	ProcessAuditTpaCellBillDetailsUsingPOST(params *ProcessAuditTpaCellBillDetailsUsingPOSTParams, opts ...ClientOption) (*ProcessAuditTpaCellBillDetailsUsingPOSTOK, *ProcessAuditTpaCellBillDetailsUsingPOSTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetArrearsBillUsingGET gets arrears bill

None
*/
func (a *Client) GetArrearsBillUsingGET(params *GetArrearsBillUsingGETParams, opts ...ClientOption) (*GetArrearsBillUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArrearsBillUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getArrearsBillUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/arrears",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.arrears.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArrearsBillUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArrearsBillUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArrearsBillUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAuditTpaCellBillDetailsUsingGET gets the audit t p a cell bill details

None
*/
func (a *Client) GetAuditTpaCellBillDetailsUsingGET(params *GetAuditTpaCellBillDetailsUsingGETParams, opts ...ClientOption) (*GetAuditTpaCellBillDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditTpaCellBillDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAuditTpaCellBillDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/auditTpaCellBillDetails",
		ProducesMediaTypes: []string{"application/aeb.audit.bill.details.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAuditTpaCellBillDetailsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAuditTpaCellBillDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAuditTpaCellBillDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillGroupRuleTransactionSchedulerUsingGET gets transaction scheduler for bills

None
*/
func (a *Client) GetBillGroupRuleTransactionSchedulerUsingGET(params *GetBillGroupRuleTransactionSchedulerUsingGETParams, opts ...ClientOption) (*GetBillGroupRuleTransactionSchedulerUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillGroupRuleTransactionSchedulerUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillGroupRuleTransactionSchedulerUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/billGroupRuleTransactionScheduler",
		ProducesMediaTypes: []string{"application/aeb.cas.bills.transaction.scheduler.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillGroupRuleTransactionSchedulerUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillGroupRuleTransactionSchedulerUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillGroupRuleTransactionSchedulerUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillReconciliationUsingGET gets bill reconciliation

None
*/
func (a *Client) GetBillReconciliationUsingGET(params *GetBillReconciliationUsingGETParams, opts ...ClientOption) (*GetBillReconciliationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillReconciliationUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillReconciliationUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/reconciliation",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.recon.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillReconciliationUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillReconciliationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillReconciliationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillSummaryUsingGET gets bill summary

None
*/
func (a *Client) GetBillSummaryUsingGET(params *GetBillSummaryUsingGETParams, opts ...ClientOption) (*GetBillSummaryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillSummaryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillSummaryUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/summary",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.summary.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillSummaryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillSummaryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillSummaryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillingInfoUsingGET gets bill info

None
*/
func (a *Client) GetBillingInfoUsingGET(params *GetBillingInfoUsingGETParams, opts ...ClientOption) (*GetBillingInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillingInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillingInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/info",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.info.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillingInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillingInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillingInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCaseBillsUsingGET gets case bills detail

None
*/
func (a *Client) GetCaseBillsUsingGET(params *GetCaseBillsUsingGETParams, opts ...ClientOption) (*GetCaseBillsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCaseBillsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCaseBillsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/caseBills",
		ProducesMediaTypes: []string{"application/aeb.cas.case.bills.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCaseBillsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCaseBillsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCaseBillsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFundRateDetailUsingGET gets fund rate detail method

None
*/
func (a *Client) GetFundRateDetailUsingGET(params *GetFundRateDetailUsingGETParams, opts ...ClientOption) (*GetFundRateDetailUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFundRateDetailUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFundRateDetailUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/fundRateDetail",
		ProducesMediaTypes: []string{"application/aeb.cas.fund.rate.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFundRateDetailUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFundRateDetailUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFundRateDetailUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNonPendingReconciliationBillSummaryUsingGET gets none pending reconciliation bill summary method

None
*/
func (a *Client) GetNonPendingReconciliationBillSummaryUsingGET(params *GetNonPendingReconciliationBillSummaryUsingGETParams, opts ...ClientOption) (*GetNonPendingReconciliationBillSummaryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNonPendingReconciliationBillSummaryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNonPendingReconciliationBillSummaryUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/nonPendingReconciliationSummary",
		ProducesMediaTypes: []string{"application/aeb.cas.non.pending.bill.summary.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNonPendingReconciliationBillSummaryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNonPendingReconciliationBillSummaryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNonPendingReconciliationBillSummaryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPendingReconciliationBillSummaryUsingGET gets pending reconciliation bill summary

None
*/
func (a *Client) GetPendingReconciliationBillSummaryUsingGET(params *GetPendingReconciliationBillSummaryUsingGETParams, opts ...ClientOption) (*GetPendingReconciliationBillSummaryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPendingReconciliationBillSummaryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPendingReconciliationBillSummaryUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/pendingReconciliationSummary",
		ProducesMediaTypes: []string{"application/aeb.cas.pending.bill.summary.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPendingReconciliationBillSummaryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPendingReconciliationBillSummaryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPendingReconciliationBillSummaryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSaBillSummaryUsingGET gets s a bills summary

None
*/
func (a *Client) GetSaBillSummaryUsingGET(params *GetSaBillSummaryUsingGETParams, opts ...ClientOption) (*GetSaBillSummaryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSaBillSummaryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSaBillSummaryUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/saBill/summary",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.sa.summary.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSaBillSummaryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSaBillSummaryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSaBillSummaryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSuspenseAmtForBillsUsingGET gets bills list

None
*/
func (a *Client) GetSuspenseAmtForBillsUsingGET(params *GetSuspenseAmtForBillsUsingGETParams, opts ...ClientOption) (*GetSuspenseAmtForBillsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSuspenseAmtForBillsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSuspenseAmtForBillsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/suspenseAmtForBills",
		ProducesMediaTypes: []string{"application/aeb.suspense.amt.bills.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSuspenseAmtForBillsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSuspenseAmtForBillsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSuspenseAmtForBillsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTraditionalBillUsingGET gets traditional bill

None
*/
func (a *Client) GetTraditionalBillUsingGET(params *GetTraditionalBillUsingGETParams, opts ...ClientOption) (*GetTraditionalBillUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTraditionalBillUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTraditionalBillUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/bill/traditional",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.traditional.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTraditionalBillUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTraditionalBillUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTraditionalBillUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostBillReconciliationUsingPOST posts bill reconciliation

None
*/
func (a *Client) PostBillReconciliationUsingPOST(params *PostBillReconciliationUsingPOSTParams, opts ...ClientOption) (*PostBillReconciliationUsingPOSTOK, *PostBillReconciliationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostBillReconciliationUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postBillReconciliationUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/bill/reconciliation",
		ProducesMediaTypes: []string{"application/aeb.cas.bill.recon.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostBillReconciliationUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostBillReconciliationUsingPOSTOK:
		return value, nil, nil
	case *PostBillReconciliationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProcessAuditTpaCellBillDetailsUsingPOST updates the audit t p a cell bill details

None
*/
func (a *Client) ProcessAuditTpaCellBillDetailsUsingPOST(params *ProcessAuditTpaCellBillDetailsUsingPOSTParams, opts ...ClientOption) (*ProcessAuditTpaCellBillDetailsUsingPOSTOK, *ProcessAuditTpaCellBillDetailsUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessAuditTpaCellBillDetailsUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "processAuditTpaCellBillDetailsUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/bill/processAuditTpaCellBillDetails",
		ProducesMediaTypes: []string{"application/aeb.process.audittpacellbilldetails.bills.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessAuditTpaCellBillDetailsUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProcessAuditTpaCellBillDetailsUsingPOSTOK:
		return value, nil, nil
	case *ProcessAuditTpaCellBillDetailsUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for bill: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
