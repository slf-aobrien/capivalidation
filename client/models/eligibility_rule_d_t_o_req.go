// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EligibilityRuleDTOReq EligibilityRuleDTOReq
//
// swagger:model EligibilityRuleDTOReq
type EligibilityRuleDTOReq struct {

	// future service requirement
	FutureServiceRequirement *ServiceRequirementDTO `json:"futureServiceRequirement,omitempty"`

	// issue service requirement
	IssueServiceRequirement *ServiceRequirementDTO `json:"issueServiceRequirement,omitempty"`

	// minimum entrant age
	MinimumEntrantAge string `json:"minimumEntrantAge,omitempty"`

	// minimum periodic hours
	MinimumPeriodicHours string `json:"minimumPeriodicHours,omitempty"`

	// pediatric
	Pediatric *ServiceRequirementDTO `json:"pediatric,omitempty"`

	// periodic hours definition
	PeriodicHoursDefinition string `json:"periodicHoursDefinition,omitempty"`

	// prior employee case date
	PriorEmployeeCaseDate string `json:"priorEmployeeCaseDate,omitempty"`

	// replace existing
	ReplaceExisting bool `json:"replaceExisting,omitempty"`

	// required member date
	RequiredMemberDate string `json:"requiredMemberDate,omitempty"`

	// updated
	Updated bool `json:"updated,omitempty"`
}

// Validate validates this eligibility rule d t o req
func (m *EligibilityRuleDTOReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFutureServiceRequirement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssueServiceRequirement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePediatric(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EligibilityRuleDTOReq) validateFutureServiceRequirement(formats strfmt.Registry) error {
	if swag.IsZero(m.FutureServiceRequirement) { // not required
		return nil
	}

	if m.FutureServiceRequirement != nil {
		if err := m.FutureServiceRequirement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("futureServiceRequirement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("futureServiceRequirement")
			}
			return err
		}
	}

	return nil
}

func (m *EligibilityRuleDTOReq) validateIssueServiceRequirement(formats strfmt.Registry) error {
	if swag.IsZero(m.IssueServiceRequirement) { // not required
		return nil
	}

	if m.IssueServiceRequirement != nil {
		if err := m.IssueServiceRequirement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueServiceRequirement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issueServiceRequirement")
			}
			return err
		}
	}

	return nil
}

func (m *EligibilityRuleDTOReq) validatePediatric(formats strfmt.Registry) error {
	if swag.IsZero(m.Pediatric) { // not required
		return nil
	}

	if m.Pediatric != nil {
		if err := m.Pediatric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pediatric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pediatric")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this eligibility rule d t o req based on the context it is used
func (m *EligibilityRuleDTOReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFutureServiceRequirement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssueServiceRequirement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePediatric(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EligibilityRuleDTOReq) contextValidateFutureServiceRequirement(ctx context.Context, formats strfmt.Registry) error {

	if m.FutureServiceRequirement != nil {

		if swag.IsZero(m.FutureServiceRequirement) { // not required
			return nil
		}

		if err := m.FutureServiceRequirement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("futureServiceRequirement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("futureServiceRequirement")
			}
			return err
		}
	}

	return nil
}

func (m *EligibilityRuleDTOReq) contextValidateIssueServiceRequirement(ctx context.Context, formats strfmt.Registry) error {

	if m.IssueServiceRequirement != nil {

		if swag.IsZero(m.IssueServiceRequirement) { // not required
			return nil
		}

		if err := m.IssueServiceRequirement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issueServiceRequirement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issueServiceRequirement")
			}
			return err
		}
	}

	return nil
}

func (m *EligibilityRuleDTOReq) contextValidatePediatric(ctx context.Context, formats strfmt.Registry) error {

	if m.Pediatric != nil {

		if swag.IsZero(m.Pediatric) { // not required
			return nil
		}

		if err := m.Pediatric.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pediatric")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pediatric")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EligibilityRuleDTOReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EligibilityRuleDTOReq) UnmarshalBinary(b []byte) error {
	var res EligibilityRuleDTOReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
