// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetProcessingRuleUsingGETReader is a Reader for the GetProcessingRuleUsingGET structure.
type GetProcessingRuleUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProcessingRuleUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProcessingRuleUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProcessingRuleUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetProcessingRuleUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProcessingRuleUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProcessingRuleUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProcessingRuleUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/processingRules] getProcessingRuleUsingGET", response, response.Code())
	}
}

// NewGetProcessingRuleUsingGETOK creates a GetProcessingRuleUsingGETOK with default headers values
func NewGetProcessingRuleUsingGETOK() *GetProcessingRuleUsingGETOK {
	return &GetProcessingRuleUsingGETOK{}
}

/*
GetProcessingRuleUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetProcessingRuleUsingGETOK struct {
	Payload *models.ResponseWrapperListProcessingRuleDTO
}

// IsSuccess returns true when this get processing rule using g e t o k response has a 2xx status code
func (o *GetProcessingRuleUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get processing rule using g e t o k response has a 3xx status code
func (o *GetProcessingRuleUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get processing rule using g e t o k response has a 4xx status code
func (o *GetProcessingRuleUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get processing rule using g e t o k response has a 5xx status code
func (o *GetProcessingRuleUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get processing rule using g e t o k response a status code equal to that given
func (o *GetProcessingRuleUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get processing rule using g e t o k response
func (o *GetProcessingRuleUsingGETOK) Code() int {
	return 200
}

func (o *GetProcessingRuleUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETOK %s", 200, payload)
}

func (o *GetProcessingRuleUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETOK %s", 200, payload)
}

func (o *GetProcessingRuleUsingGETOK) GetPayload() *models.ResponseWrapperListProcessingRuleDTO {
	return o.Payload
}

func (o *GetProcessingRuleUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListProcessingRuleDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProcessingRuleUsingGETBadRequest creates a GetProcessingRuleUsingGETBadRequest with default headers values
func NewGetProcessingRuleUsingGETBadRequest() *GetProcessingRuleUsingGETBadRequest {
	return &GetProcessingRuleUsingGETBadRequest{}
}

/*
GetProcessingRuleUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetProcessingRuleUsingGETBadRequest struct {
}

// IsSuccess returns true when this get processing rule using g e t bad request response has a 2xx status code
func (o *GetProcessingRuleUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get processing rule using g e t bad request response has a 3xx status code
func (o *GetProcessingRuleUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get processing rule using g e t bad request response has a 4xx status code
func (o *GetProcessingRuleUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get processing rule using g e t bad request response has a 5xx status code
func (o *GetProcessingRuleUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get processing rule using g e t bad request response a status code equal to that given
func (o *GetProcessingRuleUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get processing rule using g e t bad request response
func (o *GetProcessingRuleUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetProcessingRuleUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETBadRequest", 400)
}

func (o *GetProcessingRuleUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETBadRequest", 400)
}

func (o *GetProcessingRuleUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessingRuleUsingGETUnauthorized creates a GetProcessingRuleUsingGETUnauthorized with default headers values
func NewGetProcessingRuleUsingGETUnauthorized() *GetProcessingRuleUsingGETUnauthorized {
	return &GetProcessingRuleUsingGETUnauthorized{}
}

/*
GetProcessingRuleUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetProcessingRuleUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get processing rule using g e t unauthorized response has a 2xx status code
func (o *GetProcessingRuleUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get processing rule using g e t unauthorized response has a 3xx status code
func (o *GetProcessingRuleUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get processing rule using g e t unauthorized response has a 4xx status code
func (o *GetProcessingRuleUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get processing rule using g e t unauthorized response has a 5xx status code
func (o *GetProcessingRuleUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get processing rule using g e t unauthorized response a status code equal to that given
func (o *GetProcessingRuleUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get processing rule using g e t unauthorized response
func (o *GetProcessingRuleUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetProcessingRuleUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETUnauthorized", 401)
}

func (o *GetProcessingRuleUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETUnauthorized", 401)
}

func (o *GetProcessingRuleUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessingRuleUsingGETForbidden creates a GetProcessingRuleUsingGETForbidden with default headers values
func NewGetProcessingRuleUsingGETForbidden() *GetProcessingRuleUsingGETForbidden {
	return &GetProcessingRuleUsingGETForbidden{}
}

/*
GetProcessingRuleUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetProcessingRuleUsingGETForbidden struct {
}

// IsSuccess returns true when this get processing rule using g e t forbidden response has a 2xx status code
func (o *GetProcessingRuleUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get processing rule using g e t forbidden response has a 3xx status code
func (o *GetProcessingRuleUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get processing rule using g e t forbidden response has a 4xx status code
func (o *GetProcessingRuleUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get processing rule using g e t forbidden response has a 5xx status code
func (o *GetProcessingRuleUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get processing rule using g e t forbidden response a status code equal to that given
func (o *GetProcessingRuleUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get processing rule using g e t forbidden response
func (o *GetProcessingRuleUsingGETForbidden) Code() int {
	return 403
}

func (o *GetProcessingRuleUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETForbidden", 403)
}

func (o *GetProcessingRuleUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETForbidden", 403)
}

func (o *GetProcessingRuleUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessingRuleUsingGETNotFound creates a GetProcessingRuleUsingGETNotFound with default headers values
func NewGetProcessingRuleUsingGETNotFound() *GetProcessingRuleUsingGETNotFound {
	return &GetProcessingRuleUsingGETNotFound{}
}

/*
GetProcessingRuleUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProcessingRuleUsingGETNotFound struct {
}

// IsSuccess returns true when this get processing rule using g e t not found response has a 2xx status code
func (o *GetProcessingRuleUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get processing rule using g e t not found response has a 3xx status code
func (o *GetProcessingRuleUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get processing rule using g e t not found response has a 4xx status code
func (o *GetProcessingRuleUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get processing rule using g e t not found response has a 5xx status code
func (o *GetProcessingRuleUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get processing rule using g e t not found response a status code equal to that given
func (o *GetProcessingRuleUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get processing rule using g e t not found response
func (o *GetProcessingRuleUsingGETNotFound) Code() int {
	return 404
}

func (o *GetProcessingRuleUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETNotFound", 404)
}

func (o *GetProcessingRuleUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETNotFound", 404)
}

func (o *GetProcessingRuleUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetProcessingRuleUsingGETInternalServerError creates a GetProcessingRuleUsingGETInternalServerError with default headers values
func NewGetProcessingRuleUsingGETInternalServerError() *GetProcessingRuleUsingGETInternalServerError {
	return &GetProcessingRuleUsingGETInternalServerError{}
}

/*
GetProcessingRuleUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetProcessingRuleUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get processing rule using g e t internal server error response has a 2xx status code
func (o *GetProcessingRuleUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get processing rule using g e t internal server error response has a 3xx status code
func (o *GetProcessingRuleUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get processing rule using g e t internal server error response has a 4xx status code
func (o *GetProcessingRuleUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get processing rule using g e t internal server error response has a 5xx status code
func (o *GetProcessingRuleUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get processing rule using g e t internal server error response a status code equal to that given
func (o *GetProcessingRuleUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get processing rule using g e t internal server error response
func (o *GetProcessingRuleUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetProcessingRuleUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETInternalServerError", 500)
}

func (o *GetProcessingRuleUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/processingRules][%d] getProcessingRuleUsingGETInternalServerError", 500)
}

func (o *GetProcessingRuleUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
