// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateMemberSalaryUsingPUTReader is a Reader for the UpdateMemberSalaryUsingPUT structure.
type UpdateMemberSalaryUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMemberSalaryUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMemberSalaryUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateMemberSalaryUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMemberSalaryUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMemberSalaryUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMemberSalaryUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMemberSalaryUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMemberSalaryUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/member/update/salary] updateMemberSalaryUsingPUT", response, response.Code())
	}
}

// NewUpdateMemberSalaryUsingPUTOK creates a UpdateMemberSalaryUsingPUTOK with default headers values
func NewUpdateMemberSalaryUsingPUTOK() *UpdateMemberSalaryUsingPUTOK {
	return &UpdateMemberSalaryUsingPUTOK{}
}

/*
UpdateMemberSalaryUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateMemberSalaryUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update member salary using p u t o k response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update member salary using p u t o k response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t o k response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update member salary using p u t o k response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update member salary using p u t o k response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update member salary using p u t o k response
func (o *UpdateMemberSalaryUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateMemberSalaryUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTOK %s", 200, payload)
}

func (o *UpdateMemberSalaryUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTOK %s", 200, payload)
}

func (o *UpdateMemberSalaryUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateMemberSalaryUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMemberSalaryUsingPUTCreated creates a UpdateMemberSalaryUsingPUTCreated with default headers values
func NewUpdateMemberSalaryUsingPUTCreated() *UpdateMemberSalaryUsingPUTCreated {
	return &UpdateMemberSalaryUsingPUTCreated{}
}

/*
UpdateMemberSalaryUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateMemberSalaryUsingPUTCreated struct {
}

// IsSuccess returns true when this update member salary using p u t created response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update member salary using p u t created response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t created response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update member salary using p u t created response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update member salary using p u t created response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update member salary using p u t created response
func (o *UpdateMemberSalaryUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateMemberSalaryUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTCreated", 201)
}

func (o *UpdateMemberSalaryUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTCreated", 201)
}

func (o *UpdateMemberSalaryUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSalaryUsingPUTBadRequest creates a UpdateMemberSalaryUsingPUTBadRequest with default headers values
func NewUpdateMemberSalaryUsingPUTBadRequest() *UpdateMemberSalaryUsingPUTBadRequest {
	return &UpdateMemberSalaryUsingPUTBadRequest{}
}

/*
UpdateMemberSalaryUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateMemberSalaryUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update member salary using p u t bad request response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member salary using p u t bad request response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t bad request response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member salary using p u t bad request response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update member salary using p u t bad request response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update member salary using p u t bad request response
func (o *UpdateMemberSalaryUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateMemberSalaryUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTBadRequest", 400)
}

func (o *UpdateMemberSalaryUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTBadRequest", 400)
}

func (o *UpdateMemberSalaryUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSalaryUsingPUTUnauthorized creates a UpdateMemberSalaryUsingPUTUnauthorized with default headers values
func NewUpdateMemberSalaryUsingPUTUnauthorized() *UpdateMemberSalaryUsingPUTUnauthorized {
	return &UpdateMemberSalaryUsingPUTUnauthorized{}
}

/*
UpdateMemberSalaryUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateMemberSalaryUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update member salary using p u t unauthorized response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member salary using p u t unauthorized response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t unauthorized response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member salary using p u t unauthorized response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update member salary using p u t unauthorized response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update member salary using p u t unauthorized response
func (o *UpdateMemberSalaryUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateMemberSalaryUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTUnauthorized", 401)
}

func (o *UpdateMemberSalaryUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTUnauthorized", 401)
}

func (o *UpdateMemberSalaryUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSalaryUsingPUTForbidden creates a UpdateMemberSalaryUsingPUTForbidden with default headers values
func NewUpdateMemberSalaryUsingPUTForbidden() *UpdateMemberSalaryUsingPUTForbidden {
	return &UpdateMemberSalaryUsingPUTForbidden{}
}

/*
UpdateMemberSalaryUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateMemberSalaryUsingPUTForbidden struct {
}

// IsSuccess returns true when this update member salary using p u t forbidden response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member salary using p u t forbidden response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t forbidden response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member salary using p u t forbidden response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update member salary using p u t forbidden response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update member salary using p u t forbidden response
func (o *UpdateMemberSalaryUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateMemberSalaryUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTForbidden", 403)
}

func (o *UpdateMemberSalaryUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTForbidden", 403)
}

func (o *UpdateMemberSalaryUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSalaryUsingPUTNotFound creates a UpdateMemberSalaryUsingPUTNotFound with default headers values
func NewUpdateMemberSalaryUsingPUTNotFound() *UpdateMemberSalaryUsingPUTNotFound {
	return &UpdateMemberSalaryUsingPUTNotFound{}
}

/*
UpdateMemberSalaryUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateMemberSalaryUsingPUTNotFound struct {
}

// IsSuccess returns true when this update member salary using p u t not found response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member salary using p u t not found response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t not found response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member salary using p u t not found response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update member salary using p u t not found response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update member salary using p u t not found response
func (o *UpdateMemberSalaryUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateMemberSalaryUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTNotFound", 404)
}

func (o *UpdateMemberSalaryUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTNotFound", 404)
}

func (o *UpdateMemberSalaryUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSalaryUsingPUTInternalServerError creates a UpdateMemberSalaryUsingPUTInternalServerError with default headers values
func NewUpdateMemberSalaryUsingPUTInternalServerError() *UpdateMemberSalaryUsingPUTInternalServerError {
	return &UpdateMemberSalaryUsingPUTInternalServerError{}
}

/*
UpdateMemberSalaryUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateMemberSalaryUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update member salary using p u t internal server error response has a 2xx status code
func (o *UpdateMemberSalaryUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member salary using p u t internal server error response has a 3xx status code
func (o *UpdateMemberSalaryUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member salary using p u t internal server error response has a 4xx status code
func (o *UpdateMemberSalaryUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update member salary using p u t internal server error response has a 5xx status code
func (o *UpdateMemberSalaryUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update member salary using p u t internal server error response a status code equal to that given
func (o *UpdateMemberSalaryUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update member salary using p u t internal server error response
func (o *UpdateMemberSalaryUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateMemberSalaryUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTInternalServerError", 500)
}

func (o *UpdateMemberSalaryUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/salary][%d] updateMemberSalaryUsingPUTInternalServerError", 500)
}

func (o *UpdateMemberSalaryUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
