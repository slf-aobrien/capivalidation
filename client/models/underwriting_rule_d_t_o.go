// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnderwritingRuleDTO UnderwritingRuleDTO
//
// swagger:model UnderwritingRuleDTO
type UnderwritingRuleDTO struct {

	// benefit group description
	BenefitGroupDescription string `json:"benefitGroupDescription,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// free cover limit rule
	FreeCoverLimitRule *FreeCoverLimitRuleDTO `json:"freeCoverLimitRule,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// prior employee case date
	PriorEmployeeCaseDate string `json:"priorEmployeeCaseDate,omitempty"`

	// prior employee member date
	PriorEmployeeMemberDate string `json:"priorEmployeeMemberDate,omitempty"`

	// service definition
	ServiceDefinition string `json:"serviceDefinition,omitempty"`

	// system benefit
	SystemBenefit string `json:"systemBenefit,omitempty"`

	// underwriting rule tranch list
	UnderwritingRuleTranchList []*UnderwritingRuleTranchDTO `json:"underwritingRuleTranchList"`

	// underwriting type
	UnderwritingType string `json:"underwritingType,omitempty"`
}

// Validate validates this underwriting rule d t o
func (m *UnderwritingRuleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFreeCoverLimitRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnderwritingRuleTranchList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnderwritingRuleDTO) validateFreeCoverLimitRule(formats strfmt.Registry) error {
	if swag.IsZero(m.FreeCoverLimitRule) { // not required
		return nil
	}

	if m.FreeCoverLimitRule != nil {
		if err := m.FreeCoverLimitRule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeCoverLimitRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("freeCoverLimitRule")
			}
			return err
		}
	}

	return nil
}

func (m *UnderwritingRuleDTO) validateUnderwritingRuleTranchList(formats strfmt.Registry) error {
	if swag.IsZero(m.UnderwritingRuleTranchList) { // not required
		return nil
	}

	for i := 0; i < len(m.UnderwritingRuleTranchList); i++ {
		if swag.IsZero(m.UnderwritingRuleTranchList[i]) { // not required
			continue
		}

		if m.UnderwritingRuleTranchList[i] != nil {
			if err := m.UnderwritingRuleTranchList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("underwritingRuleTranchList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("underwritingRuleTranchList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this underwriting rule d t o based on the context it is used
func (m *UnderwritingRuleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFreeCoverLimitRule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnderwritingRuleTranchList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnderwritingRuleDTO) contextValidateFreeCoverLimitRule(ctx context.Context, formats strfmt.Registry) error {

	if m.FreeCoverLimitRule != nil {

		if swag.IsZero(m.FreeCoverLimitRule) { // not required
			return nil
		}

		if err := m.FreeCoverLimitRule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeCoverLimitRule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("freeCoverLimitRule")
			}
			return err
		}
	}

	return nil
}

func (m *UnderwritingRuleDTO) contextValidateUnderwritingRuleTranchList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnderwritingRuleTranchList); i++ {

		if m.UnderwritingRuleTranchList[i] != nil {

			if swag.IsZero(m.UnderwritingRuleTranchList[i]) { // not required
				return nil
			}

			if err := m.UnderwritingRuleTranchList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("underwritingRuleTranchList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("underwritingRuleTranchList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnderwritingRuleDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnderwritingRuleDTO) UnmarshalBinary(b []byte) error {
	var res UnderwritingRuleDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
