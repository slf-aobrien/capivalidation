// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateUnderwritingRulesUsingPUTReader is a Reader for the UpdateUnderwritingRulesUsingPUT structure.
type UpdateUnderwritingRulesUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUnderwritingRulesUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUnderwritingRulesUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateUnderwritingRulesUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateUnderwritingRulesUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateUnderwritingRulesUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateUnderwritingRulesUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateUnderwritingRulesUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateUnderwritingRulesUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/underwritingRule] updateUnderwritingRulesUsingPUT", response, response.Code())
	}
}

// NewUpdateUnderwritingRulesUsingPUTOK creates a UpdateUnderwritingRulesUsingPUTOK with default headers values
func NewUpdateUnderwritingRulesUsingPUTOK() *UpdateUnderwritingRulesUsingPUTOK {
	return &UpdateUnderwritingRulesUsingPUTOK{}
}

/*
UpdateUnderwritingRulesUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateUnderwritingRulesUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update underwriting rules using p u t o k response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update underwriting rules using p u t o k response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t o k response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update underwriting rules using p u t o k response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update underwriting rules using p u t o k response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update underwriting rules using p u t o k response
func (o *UpdateUnderwritingRulesUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateUnderwritingRulesUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTOK %s", 200, payload)
}

func (o *UpdateUnderwritingRulesUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTOK %s", 200, payload)
}

func (o *UpdateUnderwritingRulesUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateUnderwritingRulesUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUnderwritingRulesUsingPUTCreated creates a UpdateUnderwritingRulesUsingPUTCreated with default headers values
func NewUpdateUnderwritingRulesUsingPUTCreated() *UpdateUnderwritingRulesUsingPUTCreated {
	return &UpdateUnderwritingRulesUsingPUTCreated{}
}

/*
UpdateUnderwritingRulesUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateUnderwritingRulesUsingPUTCreated struct {
}

// IsSuccess returns true when this update underwriting rules using p u t created response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update underwriting rules using p u t created response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t created response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update underwriting rules using p u t created response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update underwriting rules using p u t created response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update underwriting rules using p u t created response
func (o *UpdateUnderwritingRulesUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateUnderwritingRulesUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTCreated", 201)
}

func (o *UpdateUnderwritingRulesUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTCreated", 201)
}

func (o *UpdateUnderwritingRulesUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUnderwritingRulesUsingPUTBadRequest creates a UpdateUnderwritingRulesUsingPUTBadRequest with default headers values
func NewUpdateUnderwritingRulesUsingPUTBadRequest() *UpdateUnderwritingRulesUsingPUTBadRequest {
	return &UpdateUnderwritingRulesUsingPUTBadRequest{}
}

/*
UpdateUnderwritingRulesUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateUnderwritingRulesUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update underwriting rules using p u t bad request response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update underwriting rules using p u t bad request response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t bad request response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update underwriting rules using p u t bad request response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update underwriting rules using p u t bad request response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update underwriting rules using p u t bad request response
func (o *UpdateUnderwritingRulesUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateUnderwritingRulesUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTBadRequest", 400)
}

func (o *UpdateUnderwritingRulesUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTBadRequest", 400)
}

func (o *UpdateUnderwritingRulesUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUnderwritingRulesUsingPUTUnauthorized creates a UpdateUnderwritingRulesUsingPUTUnauthorized with default headers values
func NewUpdateUnderwritingRulesUsingPUTUnauthorized() *UpdateUnderwritingRulesUsingPUTUnauthorized {
	return &UpdateUnderwritingRulesUsingPUTUnauthorized{}
}

/*
UpdateUnderwritingRulesUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateUnderwritingRulesUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update underwriting rules using p u t unauthorized response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update underwriting rules using p u t unauthorized response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t unauthorized response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update underwriting rules using p u t unauthorized response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update underwriting rules using p u t unauthorized response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update underwriting rules using p u t unauthorized response
func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTUnauthorized", 401)
}

func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTUnauthorized", 401)
}

func (o *UpdateUnderwritingRulesUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUnderwritingRulesUsingPUTForbidden creates a UpdateUnderwritingRulesUsingPUTForbidden with default headers values
func NewUpdateUnderwritingRulesUsingPUTForbidden() *UpdateUnderwritingRulesUsingPUTForbidden {
	return &UpdateUnderwritingRulesUsingPUTForbidden{}
}

/*
UpdateUnderwritingRulesUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateUnderwritingRulesUsingPUTForbidden struct {
}

// IsSuccess returns true when this update underwriting rules using p u t forbidden response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update underwriting rules using p u t forbidden response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t forbidden response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update underwriting rules using p u t forbidden response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update underwriting rules using p u t forbidden response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update underwriting rules using p u t forbidden response
func (o *UpdateUnderwritingRulesUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateUnderwritingRulesUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTForbidden", 403)
}

func (o *UpdateUnderwritingRulesUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTForbidden", 403)
}

func (o *UpdateUnderwritingRulesUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUnderwritingRulesUsingPUTNotFound creates a UpdateUnderwritingRulesUsingPUTNotFound with default headers values
func NewUpdateUnderwritingRulesUsingPUTNotFound() *UpdateUnderwritingRulesUsingPUTNotFound {
	return &UpdateUnderwritingRulesUsingPUTNotFound{}
}

/*
UpdateUnderwritingRulesUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateUnderwritingRulesUsingPUTNotFound struct {
}

// IsSuccess returns true when this update underwriting rules using p u t not found response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update underwriting rules using p u t not found response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t not found response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update underwriting rules using p u t not found response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update underwriting rules using p u t not found response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update underwriting rules using p u t not found response
func (o *UpdateUnderwritingRulesUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateUnderwritingRulesUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTNotFound", 404)
}

func (o *UpdateUnderwritingRulesUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTNotFound", 404)
}

func (o *UpdateUnderwritingRulesUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUnderwritingRulesUsingPUTInternalServerError creates a UpdateUnderwritingRulesUsingPUTInternalServerError with default headers values
func NewUpdateUnderwritingRulesUsingPUTInternalServerError() *UpdateUnderwritingRulesUsingPUTInternalServerError {
	return &UpdateUnderwritingRulesUsingPUTInternalServerError{}
}

/*
UpdateUnderwritingRulesUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateUnderwritingRulesUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update underwriting rules using p u t internal server error response has a 2xx status code
func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update underwriting rules using p u t internal server error response has a 3xx status code
func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update underwriting rules using p u t internal server error response has a 4xx status code
func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update underwriting rules using p u t internal server error response has a 5xx status code
func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update underwriting rules using p u t internal server error response a status code equal to that given
func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update underwriting rules using p u t internal server error response
func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTInternalServerError", 500)
}

func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/underwritingRule][%d] updateUnderwritingRulesUsingPUTInternalServerError", 500)
}

func (o *UpdateUnderwritingRulesUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
