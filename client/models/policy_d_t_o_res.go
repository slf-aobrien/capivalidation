// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PolicyDTORes PolicyDTORes
//
// swagger:model PolicyDTORes
type PolicyDTORes struct {

	// accident claim paypoint
	AccidentClaimPaypoint string `json:"accidentClaimPaypoint,omitempty"`

	// add a coverage date map
	AddACoverageDateMap map[string]string `json:"addACoverageDateMap,omitempty"`

	// address list
	AddressList []*AddressDTO `json:"addressList"`

	// administration type
	AdministrationType string `json:"administrationType,omitempty"`

	// agent list
	AgentList []*AgentDTORes `json:"agentList"`

	// alias
	Alias string `json:"alias,omitempty"`

	// anniversary date
	AnniversaryDate string `json:"anniversaryDate,omitempty"`

	// associated company list
	AssociatedCompanyList []*OrganizationDTO `json:"associatedCompanyList"`

	// benefit package list
	BenefitPackageList []string `json:"benefitPackageList"`

	// bill group list
	BillGroupList []*BillGroupDTORes `json:"billGroupList"`

	// billing contact list
	BillingContactList []*ContactDTORes `json:"billingContactList"`

	// billing frequency
	// Enum: ["ANN_CALENDAR_DAY","ANN_NEXT_BUS_DAY","BI_WEEKLY_CALENDAR","BI_WKLY_NEXT_BUS_DAY","DAILY_CALENDAR_DAY","DAILY_NEXT_BUS_DAY","FIFTEENTH_OF_THE_MONTH_CALENDAR_DAY","FIRST_DAY_OF_THE_MONTH","LAST_DAY_OF_THE_MONTH","MO_CALENDAR_DAY","MO_LAST_BUS_DAY","MO_NEXT_BUS_DAY","QTRLY_CALENDAR_DAY","QTRLY_NEXT_BUS_DAY","SEMI_ANNUAL_CALENDAR_DAY","SEMI_ANN_NEXT_BUS_DAY","SEMI_MONTHLY","SIXTEENTH_OF_THE_MONTH_CALENDAR_DAY","TWENTIETH_OF_THE_MONTH_CALENDAR_DAY","WKLY_CALENDAR_DAY","WKLY_NEXT_BUS_DAY_FRI","WKLY_NEXT_BUS_DAY_MON","WKLY_NEXT_BUS_DAY_THURS","WKLY_NEXT_BUS_DAY_TUES","WKLY_NEXT_BUS_DAY_WED"]
	BillingFrequency string `json:"billingFrequency,omitempty"`

	// billing type
	// Enum: ["ASO_REIMBURSEMENTS_REGULAR","CA_PPD_COMBINED","CA_PPD_REGULAR","COMBINED","DENTAL_ASO_REGULAR","HEALTH_NAVIGATOR","MDB_ADVANCE","MDB_ADVANCE_COMBINED","MDB_ADVANCE_RECONCILIATION","MDB_ADVANCE_REGULAR","MDB_ARREARS","MDB_ARREARS_COMBINED","MDB_ARREARS_RECONCILIATION","MDB_ARREARS_REGULAR","MONTHLY","NOTIONAL","QUARTERLY","RECONCILIATION","REGULAR","STOP_LOSS_ANNUALLY","STOP_LOSS_COMBINED","STOP_LOSS_MONTHLY"]
	BillingType string `json:"billingType,omitempty"`

	// billing type list
	BillingTypeList []string `json:"billingTypeList"`

	// cancel rewrite accociated policy
	CancelRewriteAccociatedPolicy string `json:"cancelRewriteAccociatedPolicy,omitempty"`

	// cancel rewrite status
	CancelRewriteStatus string `json:"cancelRewriteStatus,omitempty"`

	// cancer claim paypoint
	CancerClaimPaypoint string `json:"cancerClaimPaypoint,omitempty"`

	// case key
	CaseKey string `json:"caseKey,omitempty"`

	// cell risk calculation date
	CellRiskCalculationDate string `json:"cellRiskCalculationDate,omitempty"`

	// cert prep code
	CertPrepCode string `json:"certPrepCode,omitempty"`

	// commission package list
	CommissionPackageList []string `json:"commissionPackageList"`

	// commission rule list
	CommissionRuleList []*CommissionRuleDTO `json:"commissionRuleList"`

	// company code
	CompanyCode string `json:"companyCode,omitempty"`

	// compensation entity d t o list
	CompensationEntityDTOList []*CompensationEntityDTO `json:"compensationEntityDTOList"`

	// contact
	Contact *PersonDTORes `json:"contact,omitempty"`

	// contract state
	ContractState string `json:"contractState,omitempty"`

	// conversion date
	ConversionDate string `json:"conversionDate,omitempty"`

	// create date
	CreateDate string `json:"createDate,omitempty"`

	// critical illness claim paypoint
	CriticalIllnessClaimPaypoint string `json:"criticalIllnessClaimPaypoint,omitempty"`

	// customer tier
	CustomerTier string `json:"customerTier,omitempty"`

	// dental claim paypoint
	DentalClaimPaypoint string `json:"dentalClaimPaypoint,omitempty"`

	// discount card
	DiscountCard string `json:"discountCard,omitempty"`

	// email list
	EmailList []*EmailDTO `json:"emailList"`

	// employee assistance program
	EmployeeAssistanceProgram string `json:"employeeAssistanceProgram,omitempty"`

	// enrollment type
	EnrollmentType string `json:"enrollmentType,omitempty"`

	// expense rule d t o list
	ExpenseRuleDTOList []*ExpenseRuleDTO `json:"expenseRuleDTOList"`

	// fee package list
	FeePackageList []string `json:"feePackageList"`

	// gap claim paypoint
	GapClaimPaypoint string `json:"gapClaimPaypoint,omitempty"`

	// go green
	GoGreen string `json:"goGreen,omitempty"`

	// group office list
	GroupOfficeList []*GroupOfficeDTO `json:"groupOfficeList"`

	// install status
	InstallStatus *InstallStatusDTORes `json:"installStatus,omitempty"`

	// issue state
	IssueState string `json:"issueState,omitempty"`

	// life claim paypoint
	LifeClaimPaypoint string `json:"lifeClaimPaypoint,omitempty"`

	// ltd claim paypoint
	LtdClaimPaypoint string `json:"ltdClaimPaypoint,omitempty"`

	// member group list
	MemberGroupList []*MemberGroupDTORes `json:"memberGroupList"`

	// name
	Name string `json:"name,omitempty"`

	// next anniversary date
	NextAnniversaryDate string `json:"nextAnniversaryDate,omitempty"`

	// note list
	NoteList []*NoteDTO `json:"noteList"`

	// option choice set
	// Unique: true
	OptionChoiceSet []*OptionChoiceDTO `json:"optionChoiceSet"`

	// phone list
	PhoneList []*PhoneDTO `json:"phoneList"`

	// policy holder contact list
	PolicyHolderContactList []*ContactDTORes `json:"policyHolderContactList"`

	// policy lapse status
	PolicyLapseStatus string `json:"policyLapseStatus,omitempty"`

	// policy number
	PolicyNumber string `json:"policyNumber,omitempty"`

	// policy service rule list
	PolicyServiceRuleList []*PolicyServiceRuleDTORes `json:"policyServiceRuleList"`

	// rate scale list
	RateScaleList []*RateScaleDTO `json:"rateScaleList"`

	// salary maintenance rule list
	SalaryMaintenanceRuleList []*SalaryMaintenanceRuleDTO `json:"salaryMaintenanceRuleList"`

	// service team
	ServiceTeam string `json:"serviceTeam,omitempty"`

	// service team code
	ServiceTeamCode string `json:"serviceTeamCode,omitempty"`

	// service team value list
	ServiceTeamValueList []string `json:"serviceTeamValueList"`

	// servicer list
	ServicerList []*ServicerDTORes `json:"servicerList"`

	// short bill end date
	ShortBillEndDate string `json:"shortBillEndDate,omitempty"`

	// solar remark list
	SolarRemarkList []string `json:"solarRemarkList"`

	// special adminstration provision list
	SpecialAdminstrationProvisionList []string `json:"specialAdminstrationProvisionList"`

	// special contractual provision list
	SpecialContractualProvisionList []string `json:"specialContractualProvisionList"`

	// sponsor
	Sponsor *OrganizationDTO `json:"sponsor,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// status effective date
	StatusEffectiveDate string `json:"statusEffectiveDate,omitempty"`

	// system benefit list
	SystemBenefitList []string `json:"systemBenefitList"`

	// tax state
	TaxState string `json:"taxState,omitempty"`

	// tier reason
	TierReason string `json:"tierReason,omitempty"`

	// tpa contact list
	TpaContactList []*ContactDTORes `json:"tpaContactList"`

	// tpa package list
	TpaPackageList []string `json:"tpaPackageList"`

	// trust
	Trust bool `json:"trust,omitempty"`

	// trust case
	TrustCase bool `json:"trustCase,omitempty"`

	// trust number
	TrustNumber string `json:"trustNumber,omitempty"`

	// under writing rule list
	UnderWritingRuleList []*UnderwritingRuleDTO `json:"underWritingRuleList"`
}

// Validate validates this policy d t o res
func (m *PolicyDTORes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedCompanyList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBenefitPackageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillGroupList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingContactList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillingTypeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommissionPackageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommissionRuleList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompensationEntityDTOList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpenseRuleDTOList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeePackageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupOfficeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberGroupList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoteList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionChoiceSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyHolderContactList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicyServiceRuleList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateScaleList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalaryMaintenanceRuleList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServicerList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSponsor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemBenefitList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTpaContactList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTpaPackageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnderWritingRuleList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDTORes) validateAddressList(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressList) { // not required
		return nil
	}

	for i := 0; i < len(m.AddressList); i++ {
		if swag.IsZero(m.AddressList[i]) { // not required
			continue
		}

		if m.AddressList[i] != nil {
			if err := m.AddressList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addressList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addressList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateAgentList(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentList) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentList); i++ {
		if swag.IsZero(m.AgentList[i]) { // not required
			continue
		}

		if m.AgentList[i] != nil {
			if err := m.AgentList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateAssociatedCompanyList(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedCompanyList) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedCompanyList); i++ {
		if swag.IsZero(m.AssociatedCompanyList[i]) { // not required
			continue
		}

		if m.AssociatedCompanyList[i] != nil {
			if err := m.AssociatedCompanyList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedCompanyList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedCompanyList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var policyDTOResBenefitPackageListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["$10_PREPAID_ADMIN_EXPENSE","$10_SMALL_GRP_LIFE_FEE","$15_ADMIN_FEE_EXPENSE","AA_CHILD_CRITICAL_ILLNESS","AA_CRITICAL_ILLNESS_COMM_RULE_EF","AA_EMPLOYEE_CRITICAL_ILLNESS","AA_SPOUSE_CRITICAL_ILLNESS","ABSENCE_ADA","ABSENCE_ADA_ALLOWANCE_WITHHELD_TPA","ABSENCE_ADA_COMMISSIONS_WITHHELD_TPA","ABSENCE_MANAGEMENT_SERVICES_ABSADA","ABSENCE_MANAGEMENT_SERVICES_STDFMLA","ABSENCE_MANAGEMENT_SERVICES_TPA_ALLOWANCE","ABSENCE_MANAGEMENT_SERVICES_TPA_COMM_WITHHELD","ACCIDENT_COMM_RULE_EF","ACCIDENT_TPA_ALLOWANCE","ACCIDENT_TPA_COMM_WITHHELD","ADDITIONAL_CONTRIBUTORY_LIFE","AGG_SL","ASO_REIMBURSEMENTS_REGULAR_BILLING","BUSINESS_INCOME_BENEFIT","CANCER_COMM_RULE_EF","CANCER_TPA_ALLOWANCE","CANCER_TPA_COMM_WITHHELD","CASH_BENEFIT","CA_PPD_REGULAR_BILLING","CDC_TG_TPA_COMMISSIONS_WITHHELD","CDC_TPA_ALLOWANCE_WITHHELD","CDC_VOL_TPA_COMMISSIONS_WITHHELD","CHILD_ACCIDENT","CHILD_CANCER","CHILD_CRITICAL_ILLNESS","CHILD_DENTAL","CHILD_GAP","CHILD_HOSPITAL_INDEMNITY","CO_PAID_FAMILY_AND_MEDICAL_LEAVE","CO_PFML_ASO_TPA_ALLOWANCE","CO_PFML_FI_TPA_ALLOWANCE","CO_PFML_TPA_COMMISSIONS_WITHHELD","CRITICAL_ILLNESS_TPA_ALLOWANCE","CRITICAL_ILLNESS_TPA_COMM_WITHHELD","CT_PAID_FAMILY_AND_MEDICAL_LEAVE","CT_PFML_ASO_TPA_ALLOWANCE","CT_PFML_FI_TPA_ALLOWANCE","CT_PFML_TPA_COMMISSIONS_WITHHELD","DENTAL_ASO_REGULAR_BILLING","DENTAL_ASO_TPA_ALLOW_WHD","DENTAL_ASO_TPA_COMM_WHD","DENTAL_CHILD","DENTAL_CHILD_ASO","DENTAL_EMPLOYEE","DENTAL_EMPLOYEE_ASO","DENTAL_FAMILY","DENTAL_FAMILY_ASO","DENTAL_SPOUSE","DENTAL_SPOUSE_ASO","DEPENDENT_ADD","DEPENDENT_LIFE","DE_PAID_FAMILY_AND_MEDICAL_LEAVE","DE_PFML_ASO_TPA_ALLOWANCE","DE_PFML_FI_TPA_ALLOWANCE","DE_PFML_TPA_COMMISSIONS_WITHHELD","EE_DENTAL_TPA_ALLOWANCE","EE_LIFE_TPA_ALLOWANCE","EMPLOYEE_ACCIDENT","EMPLOYEE_ADD","EMPLOYEE_ASSISTANCE_PLAN","EMPLOYEE_ASSISTANCE_PLAN_TPA_ALLOWANCE","EMPLOYEE_ASSISTANCE_PLAN_TPA_COMM_WITHHELD","EMPLOYEE_CANCER","EMPLOYEE_CRITICAL_ILLNESS","EMPLOYEE_DENTAL","EMPLOYEE_GAP","EMPLOYEE_HOSPITAL_INDEMNITY","EMPLOYEE_LIFE","ENROLLMENT_FEE","FAMILY_ACCIDENT","FAMILY_CANCER","FAMILY_DENTAL","FAMILY_GAP","FAMILY_HOSPITAL_INDEMNITY","FAMILY_LEAVE_INSURANCE","FLI_TPA_ALLOWANCE_WITHHELD","FLI_TPA_COMMISSION_WITHHELD","GAP_TPA_ALLOWANCE","GAP_TPA_COMM_WITHHELD","HEALTH_NAVIGATOR","HEALTH_NAVIGATOR_BILLING","HEALTH_NAVIGATOR_TPA_ALLOWANCE","HEALTH_NAVIGATOR_TPA_COMM_WITHHELD","HOSPITAL_INDEMNITY_COMM_RULE_EF","HOSPITAL_INDEMNITY_TPA_ALLOW_WITHHELD","HOSPITAL_INDEMNITY_TPA_COMMISSIONS_WITHHELD","IA_CRITICAL_ILLNESS_COMM_RULE_EF","IA_VOLUNTARY_STD","IA_VOL_STD_COMM_RULE_EF","IA_VOL_STD_TPA_ALLOWANCE","IA_VOL_STD_TPA_COMM_WITHHELD","IMPLEMENTATION_FEE","INSURED_CH_BUY_UP_VISION","INSURED_CH_VISION","INSURED_EE_BUY_UP_VISION","INSURED_EE_VISION","INSURED_FF_BUY_UP_VISION","INSURED_FF_VISION","INSURED_SP_BUY_UP_VISION","INSURED_SP_VISION","INSURED_VISION_TPA_ALLOWANCE","LIFE_TPA_COMM_WITHHELD","LIST_BILL_FEE","LONG_TERM_DISABILITY_BENEFIT","LONG_TERM_DISABILITY_PAYROLL","LTD_BUY_UP","LTD_TPA_ALLOWANCE","LTD_TPA_COMM_WITHHELD","MAXWELL_HEALTH","MAXWELL_HEALTH_FEE","MA_PAID_FAMILY_AND_MEDICAL_LEAVE","MA_PFML_ASO_TPA_ALLOWANCE","MA_PFML_FI_TPA_ALLOWANCE","MA_PFML_TPA_COMMISSIONS_WITHHELD","MEMBER_DIRECT_BILLING_IN_ADVANCE","MEMBER_DIRECT_BILLING_IN_ARREARS","MN_PAID_FAMILY_AND_MEDICAL_LEAVE","MN_PFML_ASO_TPA_ALLOWANCE","MN_PFML_FI_TPA_ALLOWANCE","MN_PFML_TPA_COMMISSIONS_WITHHELD","MONTHLY_IN_ARREARS_BILLING","NOTIONAL_BILLING","NY_PAID_FAMILY_LEAVE","NY_PAID_FAMILY_LEAVE_TPA_ALLOWANCE_WITHHELD","NY_PAID_FAMILY_LEAVE_TPA_COMMISSION_WITHHELD","OR_PAID_FAMILY_AND_MEDICAL_LEAVE","OR_PFML_ASO_TPA_ALLOWANCE","OR_PFML_FI_TPA_ALLOWANCE","OR_PFML_TPA_COMMISSIONS_WITHHELD","PREPAID_CHILD_DENTAL","PREPAID_COMMISSION_WITHHELD","PREPAID_EMPLOYEE_DENTAL","PREPAID_FAMILY_DENTAL","PREPAID_SPOUSE_DENTAL","PREPAID_TPA_ALLOWANCE","QUARTERLY_IN_ARREARS_BILLING","RECONCILIATION_BILLING","REGULAR_BILLING","SHORT_TERM_DISABILITY","SIMPLE_BENEFIT_SOLUTIONS","SMALL_GROUP_CERT_FEE","SPEC_SL_E1DEP","SPEC_SL_ECH","SPEC_SL_EE","SPEC_SL_EFAM","SPEC_SL_ESP","SPOUSE_ACCIDENT","SPOUSE_ACCIDENT_DISABILITY","SPOUSE_CANCER","SPOUSE_CRITICAL_ILLNESS","SPOUSE_DENTAL","SPOUSE_GAP","SPOUSE_HOSPITAL_INDEMNITY","STAND_ALONE_CHILD_VOL_ADD","STAND_ALONE_EMPLOYEE_VOL_ADD","STAND_ALONE_FAMILY_VOL_ADD","STAND_ALONE_SPOUSE_VOL_ADD","STAND_ALONE_VOL_ADD_TPA_ALLOWANCE","STAND_ALONE_VOL_ADD_TPA_COMM_WITHHELD","STD_BUY_UP","STD_NY_DBL_TPA_ALLOWANCE","STD_NY_DBL_TPA_COMM_WITHHELD","STD_TPA_ALLOWANCE","STD_TPA_COMM_WITHHELD","STOP_LOSS_AGG_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_AGG_COMM_WITHHELD_TPA","STOP_LOSS_AGG_TPA_ALLOWANCE_WITHHELD","STOP_LOSS_ANNUAL_BILLING","STOP_LOSS_MONTHLY_BILLING","STOP_LOSS_SPEC_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_SPEC_COMMISSION_WITHHELD_TPA","STOP_LOSS_SPEC_TPA_ALLOWANCE_WITHHELD","SUN_ADVISOR","SUN_ADVISOR_TPA_ALLOWANCE","SUN_ADVISOR_TPA_COMM_WITHHELD","TG_DEN_TPA_COMM_WITHHELD","TPA_COMMISSIONS_WITHHELD","TRAVEL_ACCIDENT","VISION","VOLUNTARY_CHILD_ADD","VOLUNTARY_CHILD_DENTAL","VOLUNTARY_CHILD_LIFE","VOLUNTARY_DEPENDENT_LIFE","VOLUNTARY_EMPLOYEE_ADD","VOLUNTARY_EMPLOYEE_DENTAL","VOLUNTARY_EMPLOYEE_LIFE","VOLUNTARY_FAMILY_DENTAL","VOLUNTARY_LTD","VOLUNTARY_SPOUSE_ADD","VOLUNTARY_SPOUSE_DENTAL","VOLUNTARY_SPOUSE_LIFE","VOLUNTARY_STD","VOL_DENTAL_TPA_ALLOWANCE","VOL_DEN_TPA_COMM_WITHHELD","VOL_LIFE_TPA_ALLOWANCE","VOL_LIFE_TPA_COMM_WITHHELD","VOL_LTD_TPA_ALLOWANCE","VOL_LTD_TPA_COMM_WITHHELD","VOL_STD_TPA_ALLOWANCE","VOL_STD_TPA_COMM_WITHHELD","WA_PAID_FAMILY_AND_MEDICAL_LEAVE","WA_PFML_TPA_ALLOWANCE","WA_PFML_TPA_COMMISSIONS_WITHHELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResBenefitPackageListItemsEnum = append(policyDTOResBenefitPackageListItemsEnum, v)
	}
}

func (m *PolicyDTORes) validateBenefitPackageListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResBenefitPackageListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateBenefitPackageList(formats strfmt.Registry) error {
	if swag.IsZero(m.BenefitPackageList) { // not required
		return nil
	}

	for i := 0; i < len(m.BenefitPackageList); i++ {

		// value enum
		if err := m.validateBenefitPackageListItemsEnum("benefitPackageList"+"."+strconv.Itoa(i), "body", m.BenefitPackageList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PolicyDTORes) validateBillGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.BillGroupList) { // not required
		return nil
	}

	for i := 0; i < len(m.BillGroupList); i++ {
		if swag.IsZero(m.BillGroupList[i]) { // not required
			continue
		}

		if m.BillGroupList[i] != nil {
			if err := m.BillGroupList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateBillingContactList(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingContactList) { // not required
		return nil
	}

	for i := 0; i < len(m.BillingContactList); i++ {
		if swag.IsZero(m.BillingContactList[i]) { // not required
			continue
		}

		if m.BillingContactList[i] != nil {
			if err := m.BillingContactList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingContactList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billingContactList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var policyDTOResTypeBillingFrequencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ANN_CALENDAR_DAY","ANN_NEXT_BUS_DAY","BI_WEEKLY_CALENDAR","BI_WKLY_NEXT_BUS_DAY","DAILY_CALENDAR_DAY","DAILY_NEXT_BUS_DAY","FIFTEENTH_OF_THE_MONTH_CALENDAR_DAY","FIRST_DAY_OF_THE_MONTH","LAST_DAY_OF_THE_MONTH","MO_CALENDAR_DAY","MO_LAST_BUS_DAY","MO_NEXT_BUS_DAY","QTRLY_CALENDAR_DAY","QTRLY_NEXT_BUS_DAY","SEMI_ANNUAL_CALENDAR_DAY","SEMI_ANN_NEXT_BUS_DAY","SEMI_MONTHLY","SIXTEENTH_OF_THE_MONTH_CALENDAR_DAY","TWENTIETH_OF_THE_MONTH_CALENDAR_DAY","WKLY_CALENDAR_DAY","WKLY_NEXT_BUS_DAY_FRI","WKLY_NEXT_BUS_DAY_MON","WKLY_NEXT_BUS_DAY_THURS","WKLY_NEXT_BUS_DAY_TUES","WKLY_NEXT_BUS_DAY_WED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResTypeBillingFrequencyPropEnum = append(policyDTOResTypeBillingFrequencyPropEnum, v)
	}
}

const (

	// PolicyDTOResBillingFrequencyANNCALENDARDAY captures enum value "ANN_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyANNCALENDARDAY string = "ANN_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyANNNEXTBUSDAY captures enum value "ANN_NEXT_BUS_DAY"
	PolicyDTOResBillingFrequencyANNNEXTBUSDAY string = "ANN_NEXT_BUS_DAY"

	// PolicyDTOResBillingFrequencyBIWEEKLYCALENDAR captures enum value "BI_WEEKLY_CALENDAR"
	PolicyDTOResBillingFrequencyBIWEEKLYCALENDAR string = "BI_WEEKLY_CALENDAR"

	// PolicyDTOResBillingFrequencyBIWKLYNEXTBUSDAY captures enum value "BI_WKLY_NEXT_BUS_DAY"
	PolicyDTOResBillingFrequencyBIWKLYNEXTBUSDAY string = "BI_WKLY_NEXT_BUS_DAY"

	// PolicyDTOResBillingFrequencyDAILYCALENDARDAY captures enum value "DAILY_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyDAILYCALENDARDAY string = "DAILY_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyDAILYNEXTBUSDAY captures enum value "DAILY_NEXT_BUS_DAY"
	PolicyDTOResBillingFrequencyDAILYNEXTBUSDAY string = "DAILY_NEXT_BUS_DAY"

	// PolicyDTOResBillingFrequencyFIFTEENTHOFTHEMONTHCALENDARDAY captures enum value "FIFTEENTH_OF_THE_MONTH_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyFIFTEENTHOFTHEMONTHCALENDARDAY string = "FIFTEENTH_OF_THE_MONTH_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyFIRSTDAYOFTHEMONTH captures enum value "FIRST_DAY_OF_THE_MONTH"
	PolicyDTOResBillingFrequencyFIRSTDAYOFTHEMONTH string = "FIRST_DAY_OF_THE_MONTH"

	// PolicyDTOResBillingFrequencyLASTDAYOFTHEMONTH captures enum value "LAST_DAY_OF_THE_MONTH"
	PolicyDTOResBillingFrequencyLASTDAYOFTHEMONTH string = "LAST_DAY_OF_THE_MONTH"

	// PolicyDTOResBillingFrequencyMOCALENDARDAY captures enum value "MO_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyMOCALENDARDAY string = "MO_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyMOLASTBUSDAY captures enum value "MO_LAST_BUS_DAY"
	PolicyDTOResBillingFrequencyMOLASTBUSDAY string = "MO_LAST_BUS_DAY"

	// PolicyDTOResBillingFrequencyMONEXTBUSDAY captures enum value "MO_NEXT_BUS_DAY"
	PolicyDTOResBillingFrequencyMONEXTBUSDAY string = "MO_NEXT_BUS_DAY"

	// PolicyDTOResBillingFrequencyQTRLYCALENDARDAY captures enum value "QTRLY_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyQTRLYCALENDARDAY string = "QTRLY_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyQTRLYNEXTBUSDAY captures enum value "QTRLY_NEXT_BUS_DAY"
	PolicyDTOResBillingFrequencyQTRLYNEXTBUSDAY string = "QTRLY_NEXT_BUS_DAY"

	// PolicyDTOResBillingFrequencySEMIANNUALCALENDARDAY captures enum value "SEMI_ANNUAL_CALENDAR_DAY"
	PolicyDTOResBillingFrequencySEMIANNUALCALENDARDAY string = "SEMI_ANNUAL_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencySEMIANNNEXTBUSDAY captures enum value "SEMI_ANN_NEXT_BUS_DAY"
	PolicyDTOResBillingFrequencySEMIANNNEXTBUSDAY string = "SEMI_ANN_NEXT_BUS_DAY"

	// PolicyDTOResBillingFrequencySEMIMONTHLY captures enum value "SEMI_MONTHLY"
	PolicyDTOResBillingFrequencySEMIMONTHLY string = "SEMI_MONTHLY"

	// PolicyDTOResBillingFrequencySIXTEENTHOFTHEMONTHCALENDARDAY captures enum value "SIXTEENTH_OF_THE_MONTH_CALENDAR_DAY"
	PolicyDTOResBillingFrequencySIXTEENTHOFTHEMONTHCALENDARDAY string = "SIXTEENTH_OF_THE_MONTH_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyTWENTIETHOFTHEMONTHCALENDARDAY captures enum value "TWENTIETH_OF_THE_MONTH_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyTWENTIETHOFTHEMONTHCALENDARDAY string = "TWENTIETH_OF_THE_MONTH_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyWKLYCALENDARDAY captures enum value "WKLY_CALENDAR_DAY"
	PolicyDTOResBillingFrequencyWKLYCALENDARDAY string = "WKLY_CALENDAR_DAY"

	// PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYFRI captures enum value "WKLY_NEXT_BUS_DAY_FRI"
	PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYFRI string = "WKLY_NEXT_BUS_DAY_FRI"

	// PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYMON captures enum value "WKLY_NEXT_BUS_DAY_MON"
	PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYMON string = "WKLY_NEXT_BUS_DAY_MON"

	// PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYTHURS captures enum value "WKLY_NEXT_BUS_DAY_THURS"
	PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYTHURS string = "WKLY_NEXT_BUS_DAY_THURS"

	// PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYTUES captures enum value "WKLY_NEXT_BUS_DAY_TUES"
	PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYTUES string = "WKLY_NEXT_BUS_DAY_TUES"

	// PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYWED captures enum value "WKLY_NEXT_BUS_DAY_WED"
	PolicyDTOResBillingFrequencyWKLYNEXTBUSDAYWED string = "WKLY_NEXT_BUS_DAY_WED"
)

// prop value enum
func (m *PolicyDTORes) validateBillingFrequencyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResTypeBillingFrequencyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateBillingFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingFrequency) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingFrequencyEnum("billingFrequency", "body", m.BillingFrequency); err != nil {
		return err
	}

	return nil
}

var policyDTOResTypeBillingTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASO_REIMBURSEMENTS_REGULAR","CA_PPD_COMBINED","CA_PPD_REGULAR","COMBINED","DENTAL_ASO_REGULAR","HEALTH_NAVIGATOR","MDB_ADVANCE","MDB_ADVANCE_COMBINED","MDB_ADVANCE_RECONCILIATION","MDB_ADVANCE_REGULAR","MDB_ARREARS","MDB_ARREARS_COMBINED","MDB_ARREARS_RECONCILIATION","MDB_ARREARS_REGULAR","MONTHLY","NOTIONAL","QUARTERLY","RECONCILIATION","REGULAR","STOP_LOSS_ANNUALLY","STOP_LOSS_COMBINED","STOP_LOSS_MONTHLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResTypeBillingTypePropEnum = append(policyDTOResTypeBillingTypePropEnum, v)
	}
}

const (

	// PolicyDTOResBillingTypeASOREIMBURSEMENTSREGULAR captures enum value "ASO_REIMBURSEMENTS_REGULAR"
	PolicyDTOResBillingTypeASOREIMBURSEMENTSREGULAR string = "ASO_REIMBURSEMENTS_REGULAR"

	// PolicyDTOResBillingTypeCAPPDCOMBINED captures enum value "CA_PPD_COMBINED"
	PolicyDTOResBillingTypeCAPPDCOMBINED string = "CA_PPD_COMBINED"

	// PolicyDTOResBillingTypeCAPPDREGULAR captures enum value "CA_PPD_REGULAR"
	PolicyDTOResBillingTypeCAPPDREGULAR string = "CA_PPD_REGULAR"

	// PolicyDTOResBillingTypeCOMBINED captures enum value "COMBINED"
	PolicyDTOResBillingTypeCOMBINED string = "COMBINED"

	// PolicyDTOResBillingTypeDENTALASOREGULAR captures enum value "DENTAL_ASO_REGULAR"
	PolicyDTOResBillingTypeDENTALASOREGULAR string = "DENTAL_ASO_REGULAR"

	// PolicyDTOResBillingTypeHEALTHNAVIGATOR captures enum value "HEALTH_NAVIGATOR"
	PolicyDTOResBillingTypeHEALTHNAVIGATOR string = "HEALTH_NAVIGATOR"

	// PolicyDTOResBillingTypeMDBADVANCE captures enum value "MDB_ADVANCE"
	PolicyDTOResBillingTypeMDBADVANCE string = "MDB_ADVANCE"

	// PolicyDTOResBillingTypeMDBADVANCECOMBINED captures enum value "MDB_ADVANCE_COMBINED"
	PolicyDTOResBillingTypeMDBADVANCECOMBINED string = "MDB_ADVANCE_COMBINED"

	// PolicyDTOResBillingTypeMDBADVANCERECONCILIATION captures enum value "MDB_ADVANCE_RECONCILIATION"
	PolicyDTOResBillingTypeMDBADVANCERECONCILIATION string = "MDB_ADVANCE_RECONCILIATION"

	// PolicyDTOResBillingTypeMDBADVANCEREGULAR captures enum value "MDB_ADVANCE_REGULAR"
	PolicyDTOResBillingTypeMDBADVANCEREGULAR string = "MDB_ADVANCE_REGULAR"

	// PolicyDTOResBillingTypeMDBARREARS captures enum value "MDB_ARREARS"
	PolicyDTOResBillingTypeMDBARREARS string = "MDB_ARREARS"

	// PolicyDTOResBillingTypeMDBARREARSCOMBINED captures enum value "MDB_ARREARS_COMBINED"
	PolicyDTOResBillingTypeMDBARREARSCOMBINED string = "MDB_ARREARS_COMBINED"

	// PolicyDTOResBillingTypeMDBARREARSRECONCILIATION captures enum value "MDB_ARREARS_RECONCILIATION"
	PolicyDTOResBillingTypeMDBARREARSRECONCILIATION string = "MDB_ARREARS_RECONCILIATION"

	// PolicyDTOResBillingTypeMDBARREARSREGULAR captures enum value "MDB_ARREARS_REGULAR"
	PolicyDTOResBillingTypeMDBARREARSREGULAR string = "MDB_ARREARS_REGULAR"

	// PolicyDTOResBillingTypeMONTHLY captures enum value "MONTHLY"
	PolicyDTOResBillingTypeMONTHLY string = "MONTHLY"

	// PolicyDTOResBillingTypeNOTIONAL captures enum value "NOTIONAL"
	PolicyDTOResBillingTypeNOTIONAL string = "NOTIONAL"

	// PolicyDTOResBillingTypeQUARTERLY captures enum value "QUARTERLY"
	PolicyDTOResBillingTypeQUARTERLY string = "QUARTERLY"

	// PolicyDTOResBillingTypeRECONCILIATION captures enum value "RECONCILIATION"
	PolicyDTOResBillingTypeRECONCILIATION string = "RECONCILIATION"

	// PolicyDTOResBillingTypeREGULAR captures enum value "REGULAR"
	PolicyDTOResBillingTypeREGULAR string = "REGULAR"

	// PolicyDTOResBillingTypeSTOPLOSSANNUALLY captures enum value "STOP_LOSS_ANNUALLY"
	PolicyDTOResBillingTypeSTOPLOSSANNUALLY string = "STOP_LOSS_ANNUALLY"

	// PolicyDTOResBillingTypeSTOPLOSSCOMBINED captures enum value "STOP_LOSS_COMBINED"
	PolicyDTOResBillingTypeSTOPLOSSCOMBINED string = "STOP_LOSS_COMBINED"

	// PolicyDTOResBillingTypeSTOPLOSSMONTHLY captures enum value "STOP_LOSS_MONTHLY"
	PolicyDTOResBillingTypeSTOPLOSSMONTHLY string = "STOP_LOSS_MONTHLY"
)

// prop value enum
func (m *PolicyDTORes) validateBillingTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResTypeBillingTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateBillingType(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingTypeEnum("billingType", "body", m.BillingType); err != nil {
		return err
	}

	return nil
}

var policyDTOResBillingTypeListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ASO_REIMBURSEMENTS_REGULAR","CA_PPD_COMBINED","CA_PPD_REGULAR","COMBINED","DENTAL_ASO_REGULAR","HEALTH_NAVIGATOR","MDB_ADVANCE","MDB_ADVANCE_COMBINED","MDB_ADVANCE_RECONCILIATION","MDB_ADVANCE_REGULAR","MDB_ARREARS","MDB_ARREARS_COMBINED","MDB_ARREARS_RECONCILIATION","MDB_ARREARS_REGULAR","MONTHLY","NOTIONAL","QUARTERLY","RECONCILIATION","REGULAR","STOP_LOSS_ANNUALLY","STOP_LOSS_COMBINED","STOP_LOSS_MONTHLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResBillingTypeListItemsEnum = append(policyDTOResBillingTypeListItemsEnum, v)
	}
}

func (m *PolicyDTORes) validateBillingTypeListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResBillingTypeListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateBillingTypeList(formats strfmt.Registry) error {
	if swag.IsZero(m.BillingTypeList) { // not required
		return nil
	}

	for i := 0; i < len(m.BillingTypeList); i++ {

		// value enum
		if err := m.validateBillingTypeListItemsEnum("billingTypeList"+"."+strconv.Itoa(i), "body", m.BillingTypeList[i]); err != nil {
			return err
		}

	}

	return nil
}

var policyDTOResCommissionPackageListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["$10_PREPAID_ADMIN_EXPENSE","$10_SMALL_GRP_LIFE_FEE","$15_ADMIN_FEE_EXPENSE","AA_CHILD_CRITICAL_ILLNESS","AA_CRITICAL_ILLNESS_COMM_RULE_EF","AA_EMPLOYEE_CRITICAL_ILLNESS","AA_SPOUSE_CRITICAL_ILLNESS","ABSENCE_ADA","ABSENCE_ADA_ALLOWANCE_WITHHELD_TPA","ABSENCE_ADA_COMMISSIONS_WITHHELD_TPA","ABSENCE_MANAGEMENT_SERVICES_ABSADA","ABSENCE_MANAGEMENT_SERVICES_STDFMLA","ABSENCE_MANAGEMENT_SERVICES_TPA_ALLOWANCE","ABSENCE_MANAGEMENT_SERVICES_TPA_COMM_WITHHELD","ACCIDENT_COMM_RULE_EF","ACCIDENT_TPA_ALLOWANCE","ACCIDENT_TPA_COMM_WITHHELD","ADDITIONAL_CONTRIBUTORY_LIFE","AGG_SL","ASO_REIMBURSEMENTS_REGULAR_BILLING","BUSINESS_INCOME_BENEFIT","CANCER_COMM_RULE_EF","CANCER_TPA_ALLOWANCE","CANCER_TPA_COMM_WITHHELD","CASH_BENEFIT","CA_PPD_REGULAR_BILLING","CDC_TG_TPA_COMMISSIONS_WITHHELD","CDC_TPA_ALLOWANCE_WITHHELD","CDC_VOL_TPA_COMMISSIONS_WITHHELD","CHILD_ACCIDENT","CHILD_CANCER","CHILD_CRITICAL_ILLNESS","CHILD_DENTAL","CHILD_GAP","CHILD_HOSPITAL_INDEMNITY","CO_PAID_FAMILY_AND_MEDICAL_LEAVE","CO_PFML_ASO_TPA_ALLOWANCE","CO_PFML_FI_TPA_ALLOWANCE","CO_PFML_TPA_COMMISSIONS_WITHHELD","CRITICAL_ILLNESS_TPA_ALLOWANCE","CRITICAL_ILLNESS_TPA_COMM_WITHHELD","CT_PAID_FAMILY_AND_MEDICAL_LEAVE","CT_PFML_ASO_TPA_ALLOWANCE","CT_PFML_FI_TPA_ALLOWANCE","CT_PFML_TPA_COMMISSIONS_WITHHELD","DENTAL_ASO_REGULAR_BILLING","DENTAL_ASO_TPA_ALLOW_WHD","DENTAL_ASO_TPA_COMM_WHD","DENTAL_CHILD","DENTAL_CHILD_ASO","DENTAL_EMPLOYEE","DENTAL_EMPLOYEE_ASO","DENTAL_FAMILY","DENTAL_FAMILY_ASO","DENTAL_SPOUSE","DENTAL_SPOUSE_ASO","DEPENDENT_ADD","DEPENDENT_LIFE","DE_PAID_FAMILY_AND_MEDICAL_LEAVE","DE_PFML_ASO_TPA_ALLOWANCE","DE_PFML_FI_TPA_ALLOWANCE","DE_PFML_TPA_COMMISSIONS_WITHHELD","EE_DENTAL_TPA_ALLOWANCE","EE_LIFE_TPA_ALLOWANCE","EMPLOYEE_ACCIDENT","EMPLOYEE_ADD","EMPLOYEE_ASSISTANCE_PLAN","EMPLOYEE_ASSISTANCE_PLAN_TPA_ALLOWANCE","EMPLOYEE_ASSISTANCE_PLAN_TPA_COMM_WITHHELD","EMPLOYEE_CANCER","EMPLOYEE_CRITICAL_ILLNESS","EMPLOYEE_DENTAL","EMPLOYEE_GAP","EMPLOYEE_HOSPITAL_INDEMNITY","EMPLOYEE_LIFE","ENROLLMENT_FEE","FAMILY_ACCIDENT","FAMILY_CANCER","FAMILY_DENTAL","FAMILY_GAP","FAMILY_HOSPITAL_INDEMNITY","FAMILY_LEAVE_INSURANCE","FLI_TPA_ALLOWANCE_WITHHELD","FLI_TPA_COMMISSION_WITHHELD","GAP_TPA_ALLOWANCE","GAP_TPA_COMM_WITHHELD","HEALTH_NAVIGATOR","HEALTH_NAVIGATOR_BILLING","HEALTH_NAVIGATOR_TPA_ALLOWANCE","HEALTH_NAVIGATOR_TPA_COMM_WITHHELD","HOSPITAL_INDEMNITY_COMM_RULE_EF","HOSPITAL_INDEMNITY_TPA_ALLOW_WITHHELD","HOSPITAL_INDEMNITY_TPA_COMMISSIONS_WITHHELD","IA_CRITICAL_ILLNESS_COMM_RULE_EF","IA_VOLUNTARY_STD","IA_VOL_STD_COMM_RULE_EF","IA_VOL_STD_TPA_ALLOWANCE","IA_VOL_STD_TPA_COMM_WITHHELD","IMPLEMENTATION_FEE","INSURED_CH_BUY_UP_VISION","INSURED_CH_VISION","INSURED_EE_BUY_UP_VISION","INSURED_EE_VISION","INSURED_FF_BUY_UP_VISION","INSURED_FF_VISION","INSURED_SP_BUY_UP_VISION","INSURED_SP_VISION","INSURED_VISION_TPA_ALLOWANCE","LIFE_TPA_COMM_WITHHELD","LIST_BILL_FEE","LONG_TERM_DISABILITY_BENEFIT","LONG_TERM_DISABILITY_PAYROLL","LTD_BUY_UP","LTD_TPA_ALLOWANCE","LTD_TPA_COMM_WITHHELD","MAXWELL_HEALTH","MAXWELL_HEALTH_FEE","MA_PAID_FAMILY_AND_MEDICAL_LEAVE","MA_PFML_ASO_TPA_ALLOWANCE","MA_PFML_FI_TPA_ALLOWANCE","MA_PFML_TPA_COMMISSIONS_WITHHELD","MEMBER_DIRECT_BILLING_IN_ADVANCE","MEMBER_DIRECT_BILLING_IN_ARREARS","MN_PAID_FAMILY_AND_MEDICAL_LEAVE","MN_PFML_ASO_TPA_ALLOWANCE","MN_PFML_FI_TPA_ALLOWANCE","MN_PFML_TPA_COMMISSIONS_WITHHELD","MONTHLY_IN_ARREARS_BILLING","NOTIONAL_BILLING","NY_PAID_FAMILY_LEAVE","NY_PAID_FAMILY_LEAVE_TPA_ALLOWANCE_WITHHELD","NY_PAID_FAMILY_LEAVE_TPA_COMMISSION_WITHHELD","OR_PAID_FAMILY_AND_MEDICAL_LEAVE","OR_PFML_ASO_TPA_ALLOWANCE","OR_PFML_FI_TPA_ALLOWANCE","OR_PFML_TPA_COMMISSIONS_WITHHELD","PREPAID_CHILD_DENTAL","PREPAID_COMMISSION_WITHHELD","PREPAID_EMPLOYEE_DENTAL","PREPAID_FAMILY_DENTAL","PREPAID_SPOUSE_DENTAL","PREPAID_TPA_ALLOWANCE","QUARTERLY_IN_ARREARS_BILLING","RECONCILIATION_BILLING","REGULAR_BILLING","SHORT_TERM_DISABILITY","SIMPLE_BENEFIT_SOLUTIONS","SMALL_GROUP_CERT_FEE","SPEC_SL_E1DEP","SPEC_SL_ECH","SPEC_SL_EE","SPEC_SL_EFAM","SPEC_SL_ESP","SPOUSE_ACCIDENT","SPOUSE_ACCIDENT_DISABILITY","SPOUSE_CANCER","SPOUSE_CRITICAL_ILLNESS","SPOUSE_DENTAL","SPOUSE_GAP","SPOUSE_HOSPITAL_INDEMNITY","STAND_ALONE_CHILD_VOL_ADD","STAND_ALONE_EMPLOYEE_VOL_ADD","STAND_ALONE_FAMILY_VOL_ADD","STAND_ALONE_SPOUSE_VOL_ADD","STAND_ALONE_VOL_ADD_TPA_ALLOWANCE","STAND_ALONE_VOL_ADD_TPA_COMM_WITHHELD","STD_BUY_UP","STD_NY_DBL_TPA_ALLOWANCE","STD_NY_DBL_TPA_COMM_WITHHELD","STD_TPA_ALLOWANCE","STD_TPA_COMM_WITHHELD","STOP_LOSS_AGG_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_AGG_COMM_WITHHELD_TPA","STOP_LOSS_AGG_TPA_ALLOWANCE_WITHHELD","STOP_LOSS_ANNUAL_BILLING","STOP_LOSS_MONTHLY_BILLING","STOP_LOSS_SPEC_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_SPEC_COMMISSION_WITHHELD_TPA","STOP_LOSS_SPEC_TPA_ALLOWANCE_WITHHELD","SUN_ADVISOR","SUN_ADVISOR_TPA_ALLOWANCE","SUN_ADVISOR_TPA_COMM_WITHHELD","TG_DEN_TPA_COMM_WITHHELD","TPA_COMMISSIONS_WITHHELD","TRAVEL_ACCIDENT","VISION","VOLUNTARY_CHILD_ADD","VOLUNTARY_CHILD_DENTAL","VOLUNTARY_CHILD_LIFE","VOLUNTARY_DEPENDENT_LIFE","VOLUNTARY_EMPLOYEE_ADD","VOLUNTARY_EMPLOYEE_DENTAL","VOLUNTARY_EMPLOYEE_LIFE","VOLUNTARY_FAMILY_DENTAL","VOLUNTARY_LTD","VOLUNTARY_SPOUSE_ADD","VOLUNTARY_SPOUSE_DENTAL","VOLUNTARY_SPOUSE_LIFE","VOLUNTARY_STD","VOL_DENTAL_TPA_ALLOWANCE","VOL_DEN_TPA_COMM_WITHHELD","VOL_LIFE_TPA_ALLOWANCE","VOL_LIFE_TPA_COMM_WITHHELD","VOL_LTD_TPA_ALLOWANCE","VOL_LTD_TPA_COMM_WITHHELD","VOL_STD_TPA_ALLOWANCE","VOL_STD_TPA_COMM_WITHHELD","WA_PAID_FAMILY_AND_MEDICAL_LEAVE","WA_PFML_TPA_ALLOWANCE","WA_PFML_TPA_COMMISSIONS_WITHHELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResCommissionPackageListItemsEnum = append(policyDTOResCommissionPackageListItemsEnum, v)
	}
}

func (m *PolicyDTORes) validateCommissionPackageListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResCommissionPackageListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateCommissionPackageList(formats strfmt.Registry) error {
	if swag.IsZero(m.CommissionPackageList) { // not required
		return nil
	}

	for i := 0; i < len(m.CommissionPackageList); i++ {

		// value enum
		if err := m.validateCommissionPackageListItemsEnum("commissionPackageList"+"."+strconv.Itoa(i), "body", m.CommissionPackageList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PolicyDTORes) validateCommissionRuleList(formats strfmt.Registry) error {
	if swag.IsZero(m.CommissionRuleList) { // not required
		return nil
	}

	for i := 0; i < len(m.CommissionRuleList); i++ {
		if swag.IsZero(m.CommissionRuleList[i]) { // not required
			continue
		}

		if m.CommissionRuleList[i] != nil {
			if err := m.CommissionRuleList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commissionRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commissionRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateCompensationEntityDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.CompensationEntityDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.CompensationEntityDTOList); i++ {
		if swag.IsZero(m.CompensationEntityDTOList[i]) { // not required
			continue
		}

		if m.CompensationEntityDTOList[i] != nil {
			if err := m.CompensationEntityDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("compensationEntityDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("compensationEntityDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDTORes) validateEmailList(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailList) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailList); i++ {
		if swag.IsZero(m.EmailList[i]) { // not required
			continue
		}

		if m.EmailList[i] != nil {
			if err := m.EmailList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateExpenseRuleDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpenseRuleDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpenseRuleDTOList); i++ {
		if swag.IsZero(m.ExpenseRuleDTOList[i]) { // not required
			continue
		}

		if m.ExpenseRuleDTOList[i] != nil {
			if err := m.ExpenseRuleDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expenseRuleDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expenseRuleDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var policyDTOResFeePackageListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["$10_PREPAID_ADMIN_EXPENSE","$10_SMALL_GRP_LIFE_FEE","$15_ADMIN_FEE_EXPENSE","AA_CHILD_CRITICAL_ILLNESS","AA_CRITICAL_ILLNESS_COMM_RULE_EF","AA_EMPLOYEE_CRITICAL_ILLNESS","AA_SPOUSE_CRITICAL_ILLNESS","ABSENCE_ADA","ABSENCE_ADA_ALLOWANCE_WITHHELD_TPA","ABSENCE_ADA_COMMISSIONS_WITHHELD_TPA","ABSENCE_MANAGEMENT_SERVICES_ABSADA","ABSENCE_MANAGEMENT_SERVICES_STDFMLA","ABSENCE_MANAGEMENT_SERVICES_TPA_ALLOWANCE","ABSENCE_MANAGEMENT_SERVICES_TPA_COMM_WITHHELD","ACCIDENT_COMM_RULE_EF","ACCIDENT_TPA_ALLOWANCE","ACCIDENT_TPA_COMM_WITHHELD","ADDITIONAL_CONTRIBUTORY_LIFE","AGG_SL","ASO_REIMBURSEMENTS_REGULAR_BILLING","BUSINESS_INCOME_BENEFIT","CANCER_COMM_RULE_EF","CANCER_TPA_ALLOWANCE","CANCER_TPA_COMM_WITHHELD","CASH_BENEFIT","CA_PPD_REGULAR_BILLING","CDC_TG_TPA_COMMISSIONS_WITHHELD","CDC_TPA_ALLOWANCE_WITHHELD","CDC_VOL_TPA_COMMISSIONS_WITHHELD","CHILD_ACCIDENT","CHILD_CANCER","CHILD_CRITICAL_ILLNESS","CHILD_DENTAL","CHILD_GAP","CHILD_HOSPITAL_INDEMNITY","CO_PAID_FAMILY_AND_MEDICAL_LEAVE","CO_PFML_ASO_TPA_ALLOWANCE","CO_PFML_FI_TPA_ALLOWANCE","CO_PFML_TPA_COMMISSIONS_WITHHELD","CRITICAL_ILLNESS_TPA_ALLOWANCE","CRITICAL_ILLNESS_TPA_COMM_WITHHELD","CT_PAID_FAMILY_AND_MEDICAL_LEAVE","CT_PFML_ASO_TPA_ALLOWANCE","CT_PFML_FI_TPA_ALLOWANCE","CT_PFML_TPA_COMMISSIONS_WITHHELD","DENTAL_ASO_REGULAR_BILLING","DENTAL_ASO_TPA_ALLOW_WHD","DENTAL_ASO_TPA_COMM_WHD","DENTAL_CHILD","DENTAL_CHILD_ASO","DENTAL_EMPLOYEE","DENTAL_EMPLOYEE_ASO","DENTAL_FAMILY","DENTAL_FAMILY_ASO","DENTAL_SPOUSE","DENTAL_SPOUSE_ASO","DEPENDENT_ADD","DEPENDENT_LIFE","DE_PAID_FAMILY_AND_MEDICAL_LEAVE","DE_PFML_ASO_TPA_ALLOWANCE","DE_PFML_FI_TPA_ALLOWANCE","DE_PFML_TPA_COMMISSIONS_WITHHELD","EE_DENTAL_TPA_ALLOWANCE","EE_LIFE_TPA_ALLOWANCE","EMPLOYEE_ACCIDENT","EMPLOYEE_ADD","EMPLOYEE_ASSISTANCE_PLAN","EMPLOYEE_ASSISTANCE_PLAN_TPA_ALLOWANCE","EMPLOYEE_ASSISTANCE_PLAN_TPA_COMM_WITHHELD","EMPLOYEE_CANCER","EMPLOYEE_CRITICAL_ILLNESS","EMPLOYEE_DENTAL","EMPLOYEE_GAP","EMPLOYEE_HOSPITAL_INDEMNITY","EMPLOYEE_LIFE","ENROLLMENT_FEE","FAMILY_ACCIDENT","FAMILY_CANCER","FAMILY_DENTAL","FAMILY_GAP","FAMILY_HOSPITAL_INDEMNITY","FAMILY_LEAVE_INSURANCE","FLI_TPA_ALLOWANCE_WITHHELD","FLI_TPA_COMMISSION_WITHHELD","GAP_TPA_ALLOWANCE","GAP_TPA_COMM_WITHHELD","HEALTH_NAVIGATOR","HEALTH_NAVIGATOR_BILLING","HEALTH_NAVIGATOR_TPA_ALLOWANCE","HEALTH_NAVIGATOR_TPA_COMM_WITHHELD","HOSPITAL_INDEMNITY_COMM_RULE_EF","HOSPITAL_INDEMNITY_TPA_ALLOW_WITHHELD","HOSPITAL_INDEMNITY_TPA_COMMISSIONS_WITHHELD","IA_CRITICAL_ILLNESS_COMM_RULE_EF","IA_VOLUNTARY_STD","IA_VOL_STD_COMM_RULE_EF","IA_VOL_STD_TPA_ALLOWANCE","IA_VOL_STD_TPA_COMM_WITHHELD","IMPLEMENTATION_FEE","INSURED_CH_BUY_UP_VISION","INSURED_CH_VISION","INSURED_EE_BUY_UP_VISION","INSURED_EE_VISION","INSURED_FF_BUY_UP_VISION","INSURED_FF_VISION","INSURED_SP_BUY_UP_VISION","INSURED_SP_VISION","INSURED_VISION_TPA_ALLOWANCE","LIFE_TPA_COMM_WITHHELD","LIST_BILL_FEE","LONG_TERM_DISABILITY_BENEFIT","LONG_TERM_DISABILITY_PAYROLL","LTD_BUY_UP","LTD_TPA_ALLOWANCE","LTD_TPA_COMM_WITHHELD","MAXWELL_HEALTH","MAXWELL_HEALTH_FEE","MA_PAID_FAMILY_AND_MEDICAL_LEAVE","MA_PFML_ASO_TPA_ALLOWANCE","MA_PFML_FI_TPA_ALLOWANCE","MA_PFML_TPA_COMMISSIONS_WITHHELD","MEMBER_DIRECT_BILLING_IN_ADVANCE","MEMBER_DIRECT_BILLING_IN_ARREARS","MN_PAID_FAMILY_AND_MEDICAL_LEAVE","MN_PFML_ASO_TPA_ALLOWANCE","MN_PFML_FI_TPA_ALLOWANCE","MN_PFML_TPA_COMMISSIONS_WITHHELD","MONTHLY_IN_ARREARS_BILLING","NOTIONAL_BILLING","NY_PAID_FAMILY_LEAVE","NY_PAID_FAMILY_LEAVE_TPA_ALLOWANCE_WITHHELD","NY_PAID_FAMILY_LEAVE_TPA_COMMISSION_WITHHELD","OR_PAID_FAMILY_AND_MEDICAL_LEAVE","OR_PFML_ASO_TPA_ALLOWANCE","OR_PFML_FI_TPA_ALLOWANCE","OR_PFML_TPA_COMMISSIONS_WITHHELD","PREPAID_CHILD_DENTAL","PREPAID_COMMISSION_WITHHELD","PREPAID_EMPLOYEE_DENTAL","PREPAID_FAMILY_DENTAL","PREPAID_SPOUSE_DENTAL","PREPAID_TPA_ALLOWANCE","QUARTERLY_IN_ARREARS_BILLING","RECONCILIATION_BILLING","REGULAR_BILLING","SHORT_TERM_DISABILITY","SIMPLE_BENEFIT_SOLUTIONS","SMALL_GROUP_CERT_FEE","SPEC_SL_E1DEP","SPEC_SL_ECH","SPEC_SL_EE","SPEC_SL_EFAM","SPEC_SL_ESP","SPOUSE_ACCIDENT","SPOUSE_ACCIDENT_DISABILITY","SPOUSE_CANCER","SPOUSE_CRITICAL_ILLNESS","SPOUSE_DENTAL","SPOUSE_GAP","SPOUSE_HOSPITAL_INDEMNITY","STAND_ALONE_CHILD_VOL_ADD","STAND_ALONE_EMPLOYEE_VOL_ADD","STAND_ALONE_FAMILY_VOL_ADD","STAND_ALONE_SPOUSE_VOL_ADD","STAND_ALONE_VOL_ADD_TPA_ALLOWANCE","STAND_ALONE_VOL_ADD_TPA_COMM_WITHHELD","STD_BUY_UP","STD_NY_DBL_TPA_ALLOWANCE","STD_NY_DBL_TPA_COMM_WITHHELD","STD_TPA_ALLOWANCE","STD_TPA_COMM_WITHHELD","STOP_LOSS_AGG_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_AGG_COMM_WITHHELD_TPA","STOP_LOSS_AGG_TPA_ALLOWANCE_WITHHELD","STOP_LOSS_ANNUAL_BILLING","STOP_LOSS_MONTHLY_BILLING","STOP_LOSS_SPEC_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_SPEC_COMMISSION_WITHHELD_TPA","STOP_LOSS_SPEC_TPA_ALLOWANCE_WITHHELD","SUN_ADVISOR","SUN_ADVISOR_TPA_ALLOWANCE","SUN_ADVISOR_TPA_COMM_WITHHELD","TG_DEN_TPA_COMM_WITHHELD","TPA_COMMISSIONS_WITHHELD","TRAVEL_ACCIDENT","VISION","VOLUNTARY_CHILD_ADD","VOLUNTARY_CHILD_DENTAL","VOLUNTARY_CHILD_LIFE","VOLUNTARY_DEPENDENT_LIFE","VOLUNTARY_EMPLOYEE_ADD","VOLUNTARY_EMPLOYEE_DENTAL","VOLUNTARY_EMPLOYEE_LIFE","VOLUNTARY_FAMILY_DENTAL","VOLUNTARY_LTD","VOLUNTARY_SPOUSE_ADD","VOLUNTARY_SPOUSE_DENTAL","VOLUNTARY_SPOUSE_LIFE","VOLUNTARY_STD","VOL_DENTAL_TPA_ALLOWANCE","VOL_DEN_TPA_COMM_WITHHELD","VOL_LIFE_TPA_ALLOWANCE","VOL_LIFE_TPA_COMM_WITHHELD","VOL_LTD_TPA_ALLOWANCE","VOL_LTD_TPA_COMM_WITHHELD","VOL_STD_TPA_ALLOWANCE","VOL_STD_TPA_COMM_WITHHELD","WA_PAID_FAMILY_AND_MEDICAL_LEAVE","WA_PFML_TPA_ALLOWANCE","WA_PFML_TPA_COMMISSIONS_WITHHELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResFeePackageListItemsEnum = append(policyDTOResFeePackageListItemsEnum, v)
	}
}

func (m *PolicyDTORes) validateFeePackageListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResFeePackageListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateFeePackageList(formats strfmt.Registry) error {
	if swag.IsZero(m.FeePackageList) { // not required
		return nil
	}

	for i := 0; i < len(m.FeePackageList); i++ {

		// value enum
		if err := m.validateFeePackageListItemsEnum("feePackageList"+"."+strconv.Itoa(i), "body", m.FeePackageList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PolicyDTORes) validateGroupOfficeList(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupOfficeList) { // not required
		return nil
	}

	for i := 0; i < len(m.GroupOfficeList); i++ {
		if swag.IsZero(m.GroupOfficeList[i]) { // not required
			continue
		}

		if m.GroupOfficeList[i] != nil {
			if err := m.GroupOfficeList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupOfficeList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupOfficeList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateInstallStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallStatus) { // not required
		return nil
	}

	if m.InstallStatus != nil {
		if err := m.InstallStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("installStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDTORes) validateMemberGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberGroupList) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberGroupList); i++ {
		if swag.IsZero(m.MemberGroupList[i]) { // not required
			continue
		}

		if m.MemberGroupList[i] != nil {
			if err := m.MemberGroupList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateNoteList(formats strfmt.Registry) error {
	if swag.IsZero(m.NoteList) { // not required
		return nil
	}

	for i := 0; i < len(m.NoteList); i++ {
		if swag.IsZero(m.NoteList[i]) { // not required
			continue
		}

		if m.NoteList[i] != nil {
			if err := m.NoteList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("noteList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("noteList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateOptionChoiceSet(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionChoiceSet) { // not required
		return nil
	}

	if err := validate.UniqueItems("optionChoiceSet", "body", m.OptionChoiceSet); err != nil {
		return err
	}

	for i := 0; i < len(m.OptionChoiceSet); i++ {
		if swag.IsZero(m.OptionChoiceSet[i]) { // not required
			continue
		}

		if m.OptionChoiceSet[i] != nil {
			if err := m.OptionChoiceSet[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionChoiceSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optionChoiceSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validatePhoneList(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneList) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneList); i++ {
		if swag.IsZero(m.PhoneList[i]) { // not required
			continue
		}

		if m.PhoneList[i] != nil {
			if err := m.PhoneList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phoneList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validatePolicyHolderContactList(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyHolderContactList) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyHolderContactList); i++ {
		if swag.IsZero(m.PolicyHolderContactList[i]) { // not required
			continue
		}

		if m.PolicyHolderContactList[i] != nil {
			if err := m.PolicyHolderContactList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyHolderContactList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyHolderContactList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validatePolicyServiceRuleList(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyServiceRuleList) { // not required
		return nil
	}

	for i := 0; i < len(m.PolicyServiceRuleList); i++ {
		if swag.IsZero(m.PolicyServiceRuleList[i]) { // not required
			continue
		}

		if m.PolicyServiceRuleList[i] != nil {
			if err := m.PolicyServiceRuleList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyServiceRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyServiceRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateRateScaleList(formats strfmt.Registry) error {
	if swag.IsZero(m.RateScaleList) { // not required
		return nil
	}

	for i := 0; i < len(m.RateScaleList); i++ {
		if swag.IsZero(m.RateScaleList[i]) { // not required
			continue
		}

		if m.RateScaleList[i] != nil {
			if err := m.RateScaleList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateSalaryMaintenanceRuleList(formats strfmt.Registry) error {
	if swag.IsZero(m.SalaryMaintenanceRuleList) { // not required
		return nil
	}

	for i := 0; i < len(m.SalaryMaintenanceRuleList); i++ {
		if swag.IsZero(m.SalaryMaintenanceRuleList[i]) { // not required
			continue
		}

		if m.SalaryMaintenanceRuleList[i] != nil {
			if err := m.SalaryMaintenanceRuleList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("salaryMaintenanceRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("salaryMaintenanceRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateServicerList(formats strfmt.Registry) error {
	if swag.IsZero(m.ServicerList) { // not required
		return nil
	}

	for i := 0; i < len(m.ServicerList); i++ {
		if swag.IsZero(m.ServicerList[i]) { // not required
			continue
		}

		if m.ServicerList[i] != nil {
			if err := m.ServicerList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servicerList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servicerList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) validateSponsor(formats strfmt.Registry) error {
	if swag.IsZero(m.Sponsor) { // not required
		return nil
	}

	if m.Sponsor != nil {
		if err := m.Sponsor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sponsor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sponsor")
			}
			return err
		}
	}

	return nil
}

var policyDTOResSystemBenefitListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AA_CH_CIB","AA_EE_CIB","AA_SP_CIB","ACLI","AGG_SL","AMS","ASO_STD","BIB","CASH","CERT","CH_ACC","CH_CAN","CH_CIB","CH_DEN","CH_DEN_ASO","CH_GAP","CH_HOS_IND","CH_VIS","CO_PFML","CT_PFML","DEN_CH","DEN_EE","DEN_FAM","DEN_SP","DEP_ADD","DE_PFML","DLI","EAP","EE_ACC","EE_ADD","EE_CAN","EE_CIB","EE_DEN","EE_DEN_ASO","EE_GAP","EE_HOS_IND","EE_LIF","EE_VIS","FF_ACC","FF_CAN","FF_DEN","FF_DEN_ASO","FF_GAP","FF_HOS_IND","FF_VIS","FLEX_LTD","FLEX_STD","FLI","FLX_CH_VIS","FLX_EE_VIS","FLX_FF_VIS","FLX_SP_VIS","HEALTH_NAVIGATOR","IA_VSTD","LTD_B","LTD_P","MAXWELL","MA_PFML","MN_PFML","NY_PFL","OR_PFML","PP_CH_DEN","PP_EE_DEN","PP_FF_DEN","PP_SP_DEN","SA_V_CH_ADD","SA_V_EE_ADD","SA_V_FF_ADD","SA_V_SP_ADD","SPEC_SL_E1DEP","SPEC_SL_ECH","SPEC_SL_EE","SPEC_SL_EFAM","SPEC_SL_ESP","SP_ACC","SP_ACC_DIS","SP_CAN","SP_CIB","SP_DEN","SP_DEN_ASO","SP_GAP","SP_HOS_IND","SP_VIS","STD","TRAV_ACC","VISION","V_CH_ADD","V_CH_DEN","V_CH_LIF","V_DLI","V_EE_ADD","V_EE_DEN","V_EE_LIF","V_FF_DEN","V_LTD","V_SP_ADD","V_SP_DEN","V_SP_LIF","V_STD","WA_PFML"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResSystemBenefitListItemsEnum = append(policyDTOResSystemBenefitListItemsEnum, v)
	}
}

func (m *PolicyDTORes) validateSystemBenefitListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResSystemBenefitListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateSystemBenefitList(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemBenefitList) { // not required
		return nil
	}

	for i := 0; i < len(m.SystemBenefitList); i++ {

		// value enum
		if err := m.validateSystemBenefitListItemsEnum("systemBenefitList"+"."+strconv.Itoa(i), "body", m.SystemBenefitList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PolicyDTORes) validateTpaContactList(formats strfmt.Registry) error {
	if swag.IsZero(m.TpaContactList) { // not required
		return nil
	}

	for i := 0; i < len(m.TpaContactList); i++ {
		if swag.IsZero(m.TpaContactList[i]) { // not required
			continue
		}

		if m.TpaContactList[i] != nil {
			if err := m.TpaContactList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tpaContactList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tpaContactList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var policyDTOResTpaPackageListItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["$10_PREPAID_ADMIN_EXPENSE","$10_SMALL_GRP_LIFE_FEE","$15_ADMIN_FEE_EXPENSE","AA_CHILD_CRITICAL_ILLNESS","AA_CRITICAL_ILLNESS_COMM_RULE_EF","AA_EMPLOYEE_CRITICAL_ILLNESS","AA_SPOUSE_CRITICAL_ILLNESS","ABSENCE_ADA","ABSENCE_ADA_ALLOWANCE_WITHHELD_TPA","ABSENCE_ADA_COMMISSIONS_WITHHELD_TPA","ABSENCE_MANAGEMENT_SERVICES_ABSADA","ABSENCE_MANAGEMENT_SERVICES_STDFMLA","ABSENCE_MANAGEMENT_SERVICES_TPA_ALLOWANCE","ABSENCE_MANAGEMENT_SERVICES_TPA_COMM_WITHHELD","ACCIDENT_COMM_RULE_EF","ACCIDENT_TPA_ALLOWANCE","ACCIDENT_TPA_COMM_WITHHELD","ADDITIONAL_CONTRIBUTORY_LIFE","AGG_SL","ASO_REIMBURSEMENTS_REGULAR_BILLING","BUSINESS_INCOME_BENEFIT","CANCER_COMM_RULE_EF","CANCER_TPA_ALLOWANCE","CANCER_TPA_COMM_WITHHELD","CASH_BENEFIT","CA_PPD_REGULAR_BILLING","CDC_TG_TPA_COMMISSIONS_WITHHELD","CDC_TPA_ALLOWANCE_WITHHELD","CDC_VOL_TPA_COMMISSIONS_WITHHELD","CHILD_ACCIDENT","CHILD_CANCER","CHILD_CRITICAL_ILLNESS","CHILD_DENTAL","CHILD_GAP","CHILD_HOSPITAL_INDEMNITY","CO_PAID_FAMILY_AND_MEDICAL_LEAVE","CO_PFML_ASO_TPA_ALLOWANCE","CO_PFML_FI_TPA_ALLOWANCE","CO_PFML_TPA_COMMISSIONS_WITHHELD","CRITICAL_ILLNESS_TPA_ALLOWANCE","CRITICAL_ILLNESS_TPA_COMM_WITHHELD","CT_PAID_FAMILY_AND_MEDICAL_LEAVE","CT_PFML_ASO_TPA_ALLOWANCE","CT_PFML_FI_TPA_ALLOWANCE","CT_PFML_TPA_COMMISSIONS_WITHHELD","DENTAL_ASO_REGULAR_BILLING","DENTAL_ASO_TPA_ALLOW_WHD","DENTAL_ASO_TPA_COMM_WHD","DENTAL_CHILD","DENTAL_CHILD_ASO","DENTAL_EMPLOYEE","DENTAL_EMPLOYEE_ASO","DENTAL_FAMILY","DENTAL_FAMILY_ASO","DENTAL_SPOUSE","DENTAL_SPOUSE_ASO","DEPENDENT_ADD","DEPENDENT_LIFE","DE_PAID_FAMILY_AND_MEDICAL_LEAVE","DE_PFML_ASO_TPA_ALLOWANCE","DE_PFML_FI_TPA_ALLOWANCE","DE_PFML_TPA_COMMISSIONS_WITHHELD","EE_DENTAL_TPA_ALLOWANCE","EE_LIFE_TPA_ALLOWANCE","EMPLOYEE_ACCIDENT","EMPLOYEE_ADD","EMPLOYEE_ASSISTANCE_PLAN","EMPLOYEE_ASSISTANCE_PLAN_TPA_ALLOWANCE","EMPLOYEE_ASSISTANCE_PLAN_TPA_COMM_WITHHELD","EMPLOYEE_CANCER","EMPLOYEE_CRITICAL_ILLNESS","EMPLOYEE_DENTAL","EMPLOYEE_GAP","EMPLOYEE_HOSPITAL_INDEMNITY","EMPLOYEE_LIFE","ENROLLMENT_FEE","FAMILY_ACCIDENT","FAMILY_CANCER","FAMILY_DENTAL","FAMILY_GAP","FAMILY_HOSPITAL_INDEMNITY","FAMILY_LEAVE_INSURANCE","FLI_TPA_ALLOWANCE_WITHHELD","FLI_TPA_COMMISSION_WITHHELD","GAP_TPA_ALLOWANCE","GAP_TPA_COMM_WITHHELD","HEALTH_NAVIGATOR","HEALTH_NAVIGATOR_BILLING","HEALTH_NAVIGATOR_TPA_ALLOWANCE","HEALTH_NAVIGATOR_TPA_COMM_WITHHELD","HOSPITAL_INDEMNITY_COMM_RULE_EF","HOSPITAL_INDEMNITY_TPA_ALLOW_WITHHELD","HOSPITAL_INDEMNITY_TPA_COMMISSIONS_WITHHELD","IA_CRITICAL_ILLNESS_COMM_RULE_EF","IA_VOLUNTARY_STD","IA_VOL_STD_COMM_RULE_EF","IA_VOL_STD_TPA_ALLOWANCE","IA_VOL_STD_TPA_COMM_WITHHELD","IMPLEMENTATION_FEE","INSURED_CH_BUY_UP_VISION","INSURED_CH_VISION","INSURED_EE_BUY_UP_VISION","INSURED_EE_VISION","INSURED_FF_BUY_UP_VISION","INSURED_FF_VISION","INSURED_SP_BUY_UP_VISION","INSURED_SP_VISION","INSURED_VISION_TPA_ALLOWANCE","LIFE_TPA_COMM_WITHHELD","LIST_BILL_FEE","LONG_TERM_DISABILITY_BENEFIT","LONG_TERM_DISABILITY_PAYROLL","LTD_BUY_UP","LTD_TPA_ALLOWANCE","LTD_TPA_COMM_WITHHELD","MAXWELL_HEALTH","MAXWELL_HEALTH_FEE","MA_PAID_FAMILY_AND_MEDICAL_LEAVE","MA_PFML_ASO_TPA_ALLOWANCE","MA_PFML_FI_TPA_ALLOWANCE","MA_PFML_TPA_COMMISSIONS_WITHHELD","MEMBER_DIRECT_BILLING_IN_ADVANCE","MEMBER_DIRECT_BILLING_IN_ARREARS","MN_PAID_FAMILY_AND_MEDICAL_LEAVE","MN_PFML_ASO_TPA_ALLOWANCE","MN_PFML_FI_TPA_ALLOWANCE","MN_PFML_TPA_COMMISSIONS_WITHHELD","MONTHLY_IN_ARREARS_BILLING","NOTIONAL_BILLING","NY_PAID_FAMILY_LEAVE","NY_PAID_FAMILY_LEAVE_TPA_ALLOWANCE_WITHHELD","NY_PAID_FAMILY_LEAVE_TPA_COMMISSION_WITHHELD","OR_PAID_FAMILY_AND_MEDICAL_LEAVE","OR_PFML_ASO_TPA_ALLOWANCE","OR_PFML_FI_TPA_ALLOWANCE","OR_PFML_TPA_COMMISSIONS_WITHHELD","PREPAID_CHILD_DENTAL","PREPAID_COMMISSION_WITHHELD","PREPAID_EMPLOYEE_DENTAL","PREPAID_FAMILY_DENTAL","PREPAID_SPOUSE_DENTAL","PREPAID_TPA_ALLOWANCE","QUARTERLY_IN_ARREARS_BILLING","RECONCILIATION_BILLING","REGULAR_BILLING","SHORT_TERM_DISABILITY","SIMPLE_BENEFIT_SOLUTIONS","SMALL_GROUP_CERT_FEE","SPEC_SL_E1DEP","SPEC_SL_ECH","SPEC_SL_EE","SPEC_SL_EFAM","SPEC_SL_ESP","SPOUSE_ACCIDENT","SPOUSE_ACCIDENT_DISABILITY","SPOUSE_CANCER","SPOUSE_CRITICAL_ILLNESS","SPOUSE_DENTAL","SPOUSE_GAP","SPOUSE_HOSPITAL_INDEMNITY","STAND_ALONE_CHILD_VOL_ADD","STAND_ALONE_EMPLOYEE_VOL_ADD","STAND_ALONE_FAMILY_VOL_ADD","STAND_ALONE_SPOUSE_VOL_ADD","STAND_ALONE_VOL_ADD_TPA_ALLOWANCE","STAND_ALONE_VOL_ADD_TPA_COMM_WITHHELD","STD_BUY_UP","STD_NY_DBL_TPA_ALLOWANCE","STD_NY_DBL_TPA_COMM_WITHHELD","STD_TPA_ALLOWANCE","STD_TPA_COMM_WITHHELD","STOP_LOSS_AGG_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_AGG_COMM_WITHHELD_TPA","STOP_LOSS_AGG_TPA_ALLOWANCE_WITHHELD","STOP_LOSS_ANNUAL_BILLING","STOP_LOSS_MONTHLY_BILLING","STOP_LOSS_SPEC_BROKER_BROKER_FEE_WITHHELD","STOP_LOSS_SPEC_COMMISSION_WITHHELD_TPA","STOP_LOSS_SPEC_TPA_ALLOWANCE_WITHHELD","SUN_ADVISOR","SUN_ADVISOR_TPA_ALLOWANCE","SUN_ADVISOR_TPA_COMM_WITHHELD","TG_DEN_TPA_COMM_WITHHELD","TPA_COMMISSIONS_WITHHELD","TRAVEL_ACCIDENT","VISION","VOLUNTARY_CHILD_ADD","VOLUNTARY_CHILD_DENTAL","VOLUNTARY_CHILD_LIFE","VOLUNTARY_DEPENDENT_LIFE","VOLUNTARY_EMPLOYEE_ADD","VOLUNTARY_EMPLOYEE_DENTAL","VOLUNTARY_EMPLOYEE_LIFE","VOLUNTARY_FAMILY_DENTAL","VOLUNTARY_LTD","VOLUNTARY_SPOUSE_ADD","VOLUNTARY_SPOUSE_DENTAL","VOLUNTARY_SPOUSE_LIFE","VOLUNTARY_STD","VOL_DENTAL_TPA_ALLOWANCE","VOL_DEN_TPA_COMM_WITHHELD","VOL_LIFE_TPA_ALLOWANCE","VOL_LIFE_TPA_COMM_WITHHELD","VOL_LTD_TPA_ALLOWANCE","VOL_LTD_TPA_COMM_WITHHELD","VOL_STD_TPA_ALLOWANCE","VOL_STD_TPA_COMM_WITHHELD","WA_PAID_FAMILY_AND_MEDICAL_LEAVE","WA_PFML_TPA_ALLOWANCE","WA_PFML_TPA_COMMISSIONS_WITHHELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		policyDTOResTpaPackageListItemsEnum = append(policyDTOResTpaPackageListItemsEnum, v)
	}
}

func (m *PolicyDTORes) validateTpaPackageListItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, policyDTOResTpaPackageListItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PolicyDTORes) validateTpaPackageList(formats strfmt.Registry) error {
	if swag.IsZero(m.TpaPackageList) { // not required
		return nil
	}

	for i := 0; i < len(m.TpaPackageList); i++ {

		// value enum
		if err := m.validateTpaPackageListItemsEnum("tpaPackageList"+"."+strconv.Itoa(i), "body", m.TpaPackageList[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *PolicyDTORes) validateUnderWritingRuleList(formats strfmt.Registry) error {
	if swag.IsZero(m.UnderWritingRuleList) { // not required
		return nil
	}

	for i := 0; i < len(m.UnderWritingRuleList); i++ {
		if swag.IsZero(m.UnderWritingRuleList[i]) { // not required
			continue
		}

		if m.UnderWritingRuleList[i] != nil {
			if err := m.UnderWritingRuleList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("underWritingRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("underWritingRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this policy d t o res based on the context it is used
func (m *PolicyDTORes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedCompanyList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillingContactList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommissionRuleList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompensationEntityDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExpenseRuleDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupOfficeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNoteList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptionChoiceSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyHolderContactList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicyServiceRuleList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateScaleList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSalaryMaintenanceRuleList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServicerList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSponsor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTpaContactList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnderWritingRuleList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyDTORes) contextValidateAddressList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddressList); i++ {

		if m.AddressList[i] != nil {

			if swag.IsZero(m.AddressList[i]) { // not required
				return nil
			}

			if err := m.AddressList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addressList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addressList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateAgentList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentList); i++ {

		if m.AgentList[i] != nil {

			if swag.IsZero(m.AgentList[i]) { // not required
				return nil
			}

			if err := m.AgentList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateAssociatedCompanyList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedCompanyList); i++ {

		if m.AssociatedCompanyList[i] != nil {

			if swag.IsZero(m.AssociatedCompanyList[i]) { // not required
				return nil
			}

			if err := m.AssociatedCompanyList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedCompanyList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedCompanyList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateBillGroupList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BillGroupList); i++ {

		if m.BillGroupList[i] != nil {

			if swag.IsZero(m.BillGroupList[i]) { // not required
				return nil
			}

			if err := m.BillGroupList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateBillingContactList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BillingContactList); i++ {

		if m.BillingContactList[i] != nil {

			if swag.IsZero(m.BillingContactList[i]) { // not required
				return nil
			}

			if err := m.BillingContactList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("billingContactList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("billingContactList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateCommissionRuleList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CommissionRuleList); i++ {

		if m.CommissionRuleList[i] != nil {

			if swag.IsZero(m.CommissionRuleList[i]) { // not required
				return nil
			}

			if err := m.CommissionRuleList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commissionRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("commissionRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateCompensationEntityDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CompensationEntityDTOList); i++ {

		if m.CompensationEntityDTOList[i] != nil {

			if swag.IsZero(m.CompensationEntityDTOList[i]) { // not required
				return nil
			}

			if err := m.CompensationEntityDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("compensationEntityDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("compensationEntityDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {

		if swag.IsZero(m.Contact) { // not required
			return nil
		}

		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contact")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDTORes) contextValidateEmailList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailList); i++ {

		if m.EmailList[i] != nil {

			if swag.IsZero(m.EmailList[i]) { // not required
				return nil
			}

			if err := m.EmailList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateExpenseRuleDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExpenseRuleDTOList); i++ {

		if m.ExpenseRuleDTOList[i] != nil {

			if swag.IsZero(m.ExpenseRuleDTOList[i]) { // not required
				return nil
			}

			if err := m.ExpenseRuleDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expenseRuleDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("expenseRuleDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateGroupOfficeList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.GroupOfficeList); i++ {

		if m.GroupOfficeList[i] != nil {

			if swag.IsZero(m.GroupOfficeList[i]) { // not required
				return nil
			}

			if err := m.GroupOfficeList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groupOfficeList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("groupOfficeList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateInstallStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.InstallStatus != nil {

		if swag.IsZero(m.InstallStatus) { // not required
			return nil
		}

		if err := m.InstallStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("installStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("installStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDTORes) contextValidateMemberGroupList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MemberGroupList); i++ {

		if m.MemberGroupList[i] != nil {

			if swag.IsZero(m.MemberGroupList[i]) { // not required
				return nil
			}

			if err := m.MemberGroupList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberGroupList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateNoteList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NoteList); i++ {

		if m.NoteList[i] != nil {

			if swag.IsZero(m.NoteList[i]) { // not required
				return nil
			}

			if err := m.NoteList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("noteList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("noteList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateOptionChoiceSet(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OptionChoiceSet); i++ {

		if m.OptionChoiceSet[i] != nil {

			if swag.IsZero(m.OptionChoiceSet[i]) { // not required
				return nil
			}

			if err := m.OptionChoiceSet[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionChoiceSet" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optionChoiceSet" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidatePhoneList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhoneList); i++ {

		if m.PhoneList[i] != nil {

			if swag.IsZero(m.PhoneList[i]) { // not required
				return nil
			}

			if err := m.PhoneList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phoneList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidatePolicyHolderContactList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyHolderContactList); i++ {

		if m.PolicyHolderContactList[i] != nil {

			if swag.IsZero(m.PolicyHolderContactList[i]) { // not required
				return nil
			}

			if err := m.PolicyHolderContactList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyHolderContactList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyHolderContactList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidatePolicyServiceRuleList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PolicyServiceRuleList); i++ {

		if m.PolicyServiceRuleList[i] != nil {

			if swag.IsZero(m.PolicyServiceRuleList[i]) { // not required
				return nil
			}

			if err := m.PolicyServiceRuleList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policyServiceRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("policyServiceRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateRateScaleList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RateScaleList); i++ {

		if m.RateScaleList[i] != nil {

			if swag.IsZero(m.RateScaleList[i]) { // not required
				return nil
			}

			if err := m.RateScaleList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateSalaryMaintenanceRuleList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SalaryMaintenanceRuleList); i++ {

		if m.SalaryMaintenanceRuleList[i] != nil {

			if swag.IsZero(m.SalaryMaintenanceRuleList[i]) { // not required
				return nil
			}

			if err := m.SalaryMaintenanceRuleList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("salaryMaintenanceRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("salaryMaintenanceRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateServicerList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ServicerList); i++ {

		if m.ServicerList[i] != nil {

			if swag.IsZero(m.ServicerList[i]) { // not required
				return nil
			}

			if err := m.ServicerList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("servicerList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("servicerList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateSponsor(ctx context.Context, formats strfmt.Registry) error {

	if m.Sponsor != nil {

		if swag.IsZero(m.Sponsor) { // not required
			return nil
		}

		if err := m.Sponsor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sponsor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sponsor")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyDTORes) contextValidateTpaContactList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TpaContactList); i++ {

		if m.TpaContactList[i] != nil {

			if swag.IsZero(m.TpaContactList[i]) { // not required
				return nil
			}

			if err := m.TpaContactList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tpaContactList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tpaContactList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PolicyDTORes) contextValidateUnderWritingRuleList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UnderWritingRuleList); i++ {

		if m.UnderWritingRuleList[i] != nil {

			if swag.IsZero(m.UnderWritingRuleList[i]) { // not required
				return nil
			}

			if err := m.UnderWritingRuleList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("underWritingRuleList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("underWritingRuleList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyDTORes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyDTORes) UnmarshalBinary(b []byte) error {
	var res PolicyDTORes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
