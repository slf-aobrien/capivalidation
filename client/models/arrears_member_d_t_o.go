// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArrearsMemberDTO ArrearsMemberDTO
//
// swagger:model ArrearsMemberDTO
type ArrearsMemberDTO struct {

	// arrears member coverage list
	ArrearsMemberCoverageList []*ArrearsMemberCoverageDTO `json:"arrearsMemberCoverageList"`

	// bill amount due total
	BillAmountDueTotal float64 `json:"billAmountDueTotal,omitempty"`

	// case member key
	CaseMemberKey int64 `json:"caseMemberKey,omitempty"`

	// employee total
	EmployeeTotal float64 `json:"employeeTotal,omitempty"`

	// employer total
	EmployerTotal float64 `json:"employerTotal,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// member number
	MemberNumber string `json:"memberNumber,omitempty"`

	// middle name
	MiddleName string `json:"middleName,omitempty"`

	// past due amount total
	PastDueAmountTotal float64 `json:"pastDueAmountTotal,omitempty"`

	// suffix
	Suffix string `json:"suffix,omitempty"`

	// waived message
	WaivedMessage string `json:"waivedMessage,omitempty"`
}

// Validate validates this arrears member d t o
func (m *ArrearsMemberDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrearsMemberCoverageList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArrearsMemberDTO) validateArrearsMemberCoverageList(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrearsMemberCoverageList) { // not required
		return nil
	}

	for i := 0; i < len(m.ArrearsMemberCoverageList); i++ {
		if swag.IsZero(m.ArrearsMemberCoverageList[i]) { // not required
			continue
		}

		if m.ArrearsMemberCoverageList[i] != nil {
			if err := m.ArrearsMemberCoverageList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsMemberCoverageList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsMemberCoverageList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this arrears member d t o based on the context it is used
func (m *ArrearsMemberDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArrearsMemberCoverageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArrearsMemberDTO) contextValidateArrearsMemberCoverageList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArrearsMemberCoverageList); i++ {

		if m.ArrearsMemberCoverageList[i] != nil {

			if swag.IsZero(m.ArrearsMemberCoverageList[i]) { // not required
				return nil
			}

			if err := m.ArrearsMemberCoverageList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsMemberCoverageList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsMemberCoverageList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArrearsMemberDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArrearsMemberDTO) UnmarshalBinary(b []byte) error {
	var res ArrearsMemberDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
