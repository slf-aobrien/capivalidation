// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnderwritingRuleTranchDTO UnderwritingRuleTranchDTO
//
// swagger:model UnderwritingRuleTranchDTO
type UnderwritingRuleTranchDTO struct {

	// begin age
	BeginAge string `json:"beginAge,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// end age
	EndAge string `json:"endAge,omitempty"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// free cover
	FreeCover *FreeCoverDTO `json:"freeCover,omitempty"`

	// gf cd
	GfCd string `json:"gfCd,omitempty"`

	// initial calculation
	InitialCalculation string `json:"initialCalculation,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// late entrant
	LateEntrant string `json:"lateEntrant,omitempty"`

	// member count rule
	MemberCountRule bool `json:"memberCountRule,omitempty"`

	// open enrollment
	OpenEnrollment string `json:"openEnrollment,omitempty"`

	// replace existing
	ReplaceExisting bool `json:"replaceExisting,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// underwriting detail
	UnderwritingDetail *UnderwritingDetailDTO `json:"underwritingDetail,omitempty"`
}

// Validate validates this underwriting rule tranch d t o
func (m *UnderwritingRuleTranchDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFreeCover(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnderwritingDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnderwritingRuleTranchDTO) validateFreeCover(formats strfmt.Registry) error {
	if swag.IsZero(m.FreeCover) { // not required
		return nil
	}

	if m.FreeCover != nil {
		if err := m.FreeCover.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeCover")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("freeCover")
			}
			return err
		}
	}

	return nil
}

func (m *UnderwritingRuleTranchDTO) validateUnderwritingDetail(formats strfmt.Registry) error {
	if swag.IsZero(m.UnderwritingDetail) { // not required
		return nil
	}

	if m.UnderwritingDetail != nil {
		if err := m.UnderwritingDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("underwritingDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("underwritingDetail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this underwriting rule tranch d t o based on the context it is used
func (m *UnderwritingRuleTranchDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFreeCover(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnderwritingDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnderwritingRuleTranchDTO) contextValidateFreeCover(ctx context.Context, formats strfmt.Registry) error {

	if m.FreeCover != nil {

		if swag.IsZero(m.FreeCover) { // not required
			return nil
		}

		if err := m.FreeCover.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeCover")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("freeCover")
			}
			return err
		}
	}

	return nil
}

func (m *UnderwritingRuleTranchDTO) contextValidateUnderwritingDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.UnderwritingDetail != nil {

		if swag.IsZero(m.UnderwritingDetail) { // not required
			return nil
		}

		if err := m.UnderwritingDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("underwritingDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("underwritingDetail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnderwritingRuleTranchDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnderwritingRuleTranchDTO) UnmarshalBinary(b []byte) error {
	var res UnderwritingRuleTranchDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
