// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateExpenseRuleUsingPUTReader is a Reader for the UpdateExpenseRuleUsingPUT structure.
type UpdateExpenseRuleUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateExpenseRuleUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateExpenseRuleUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateExpenseRuleUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewUpdateExpenseRuleUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateExpenseRuleUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateExpenseRuleUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/updateExpenseRule] updateExpenseRuleUsingPUT", response, response.Code())
	}
}

// NewUpdateExpenseRuleUsingPUTOK creates a UpdateExpenseRuleUsingPUTOK with default headers values
func NewUpdateExpenseRuleUsingPUTOK() *UpdateExpenseRuleUsingPUTOK {
	return &UpdateExpenseRuleUsingPUTOK{}
}

/*
UpdateExpenseRuleUsingPUTOK describes a response with status code 200, with default header values.

OK
*/
type UpdateExpenseRuleUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update expense rule using p u t o k response has a 2xx status code
func (o *UpdateExpenseRuleUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update expense rule using p u t o k response has a 3xx status code
func (o *UpdateExpenseRuleUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update expense rule using p u t o k response has a 4xx status code
func (o *UpdateExpenseRuleUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update expense rule using p u t o k response has a 5xx status code
func (o *UpdateExpenseRuleUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update expense rule using p u t o k response a status code equal to that given
func (o *UpdateExpenseRuleUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update expense rule using p u t o k response
func (o *UpdateExpenseRuleUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateExpenseRuleUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateExpenseRuleUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateExpenseRuleUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateExpenseRuleUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateExpenseRuleUsingPUTCreated creates a UpdateExpenseRuleUsingPUTCreated with default headers values
func NewUpdateExpenseRuleUsingPUTCreated() *UpdateExpenseRuleUsingPUTCreated {
	return &UpdateExpenseRuleUsingPUTCreated{}
}

/*
UpdateExpenseRuleUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateExpenseRuleUsingPUTCreated struct {
}

// IsSuccess returns true when this update expense rule using p u t created response has a 2xx status code
func (o *UpdateExpenseRuleUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update expense rule using p u t created response has a 3xx status code
func (o *UpdateExpenseRuleUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update expense rule using p u t created response has a 4xx status code
func (o *UpdateExpenseRuleUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update expense rule using p u t created response has a 5xx status code
func (o *UpdateExpenseRuleUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update expense rule using p u t created response a status code equal to that given
func (o *UpdateExpenseRuleUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update expense rule using p u t created response
func (o *UpdateExpenseRuleUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateExpenseRuleUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTCreated", 201)
}

func (o *UpdateExpenseRuleUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTCreated", 201)
}

func (o *UpdateExpenseRuleUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateExpenseRuleUsingPUTUnauthorized creates a UpdateExpenseRuleUsingPUTUnauthorized with default headers values
func NewUpdateExpenseRuleUsingPUTUnauthorized() *UpdateExpenseRuleUsingPUTUnauthorized {
	return &UpdateExpenseRuleUsingPUTUnauthorized{}
}

/*
UpdateExpenseRuleUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateExpenseRuleUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update expense rule using p u t unauthorized response has a 2xx status code
func (o *UpdateExpenseRuleUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update expense rule using p u t unauthorized response has a 3xx status code
func (o *UpdateExpenseRuleUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update expense rule using p u t unauthorized response has a 4xx status code
func (o *UpdateExpenseRuleUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update expense rule using p u t unauthorized response has a 5xx status code
func (o *UpdateExpenseRuleUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update expense rule using p u t unauthorized response a status code equal to that given
func (o *UpdateExpenseRuleUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update expense rule using p u t unauthorized response
func (o *UpdateExpenseRuleUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateExpenseRuleUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateExpenseRuleUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateExpenseRuleUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateExpenseRuleUsingPUTForbidden creates a UpdateExpenseRuleUsingPUTForbidden with default headers values
func NewUpdateExpenseRuleUsingPUTForbidden() *UpdateExpenseRuleUsingPUTForbidden {
	return &UpdateExpenseRuleUsingPUTForbidden{}
}

/*
UpdateExpenseRuleUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateExpenseRuleUsingPUTForbidden struct {
}

// IsSuccess returns true when this update expense rule using p u t forbidden response has a 2xx status code
func (o *UpdateExpenseRuleUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update expense rule using p u t forbidden response has a 3xx status code
func (o *UpdateExpenseRuleUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update expense rule using p u t forbidden response has a 4xx status code
func (o *UpdateExpenseRuleUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update expense rule using p u t forbidden response has a 5xx status code
func (o *UpdateExpenseRuleUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update expense rule using p u t forbidden response a status code equal to that given
func (o *UpdateExpenseRuleUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update expense rule using p u t forbidden response
func (o *UpdateExpenseRuleUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateExpenseRuleUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTForbidden", 403)
}

func (o *UpdateExpenseRuleUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTForbidden", 403)
}

func (o *UpdateExpenseRuleUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateExpenseRuleUsingPUTNotFound creates a UpdateExpenseRuleUsingPUTNotFound with default headers values
func NewUpdateExpenseRuleUsingPUTNotFound() *UpdateExpenseRuleUsingPUTNotFound {
	return &UpdateExpenseRuleUsingPUTNotFound{}
}

/*
UpdateExpenseRuleUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateExpenseRuleUsingPUTNotFound struct {
}

// IsSuccess returns true when this update expense rule using p u t not found response has a 2xx status code
func (o *UpdateExpenseRuleUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update expense rule using p u t not found response has a 3xx status code
func (o *UpdateExpenseRuleUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update expense rule using p u t not found response has a 4xx status code
func (o *UpdateExpenseRuleUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update expense rule using p u t not found response has a 5xx status code
func (o *UpdateExpenseRuleUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update expense rule using p u t not found response a status code equal to that given
func (o *UpdateExpenseRuleUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update expense rule using p u t not found response
func (o *UpdateExpenseRuleUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateExpenseRuleUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTNotFound", 404)
}

func (o *UpdateExpenseRuleUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateExpenseRule][%d] updateExpenseRuleUsingPUTNotFound", 404)
}

func (o *UpdateExpenseRuleUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
