// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateGenderUsingPUTReader is a Reader for the UpdateGenderUsingPUT structure.
type UpdateGenderUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateGenderUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateGenderUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateGenderUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateGenderUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateGenderUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateGenderUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateGenderUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateGenderUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/dependent/update/gender] updateGenderUsingPUT", response, response.Code())
	}
}

// NewUpdateGenderUsingPUTOK creates a UpdateGenderUsingPUTOK with default headers values
func NewUpdateGenderUsingPUTOK() *UpdateGenderUsingPUTOK {
	return &UpdateGenderUsingPUTOK{}
}

/*
UpdateGenderUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateGenderUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update gender using p u t o k response has a 2xx status code
func (o *UpdateGenderUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gender using p u t o k response has a 3xx status code
func (o *UpdateGenderUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t o k response has a 4xx status code
func (o *UpdateGenderUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gender using p u t o k response has a 5xx status code
func (o *UpdateGenderUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update gender using p u t o k response a status code equal to that given
func (o *UpdateGenderUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update gender using p u t o k response
func (o *UpdateGenderUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateGenderUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTOK %s", 200, payload)
}

func (o *UpdateGenderUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTOK %s", 200, payload)
}

func (o *UpdateGenderUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateGenderUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateGenderUsingPUTCreated creates a UpdateGenderUsingPUTCreated with default headers values
func NewUpdateGenderUsingPUTCreated() *UpdateGenderUsingPUTCreated {
	return &UpdateGenderUsingPUTCreated{}
}

/*
UpdateGenderUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateGenderUsingPUTCreated struct {
}

// IsSuccess returns true when this update gender using p u t created response has a 2xx status code
func (o *UpdateGenderUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update gender using p u t created response has a 3xx status code
func (o *UpdateGenderUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t created response has a 4xx status code
func (o *UpdateGenderUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gender using p u t created response has a 5xx status code
func (o *UpdateGenderUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update gender using p u t created response a status code equal to that given
func (o *UpdateGenderUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update gender using p u t created response
func (o *UpdateGenderUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateGenderUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTCreated", 201)
}

func (o *UpdateGenderUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTCreated", 201)
}

func (o *UpdateGenderUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGenderUsingPUTBadRequest creates a UpdateGenderUsingPUTBadRequest with default headers values
func NewUpdateGenderUsingPUTBadRequest() *UpdateGenderUsingPUTBadRequest {
	return &UpdateGenderUsingPUTBadRequest{}
}

/*
UpdateGenderUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateGenderUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update gender using p u t bad request response has a 2xx status code
func (o *UpdateGenderUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gender using p u t bad request response has a 3xx status code
func (o *UpdateGenderUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t bad request response has a 4xx status code
func (o *UpdateGenderUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gender using p u t bad request response has a 5xx status code
func (o *UpdateGenderUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update gender using p u t bad request response a status code equal to that given
func (o *UpdateGenderUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update gender using p u t bad request response
func (o *UpdateGenderUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateGenderUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTBadRequest", 400)
}

func (o *UpdateGenderUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTBadRequest", 400)
}

func (o *UpdateGenderUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGenderUsingPUTUnauthorized creates a UpdateGenderUsingPUTUnauthorized with default headers values
func NewUpdateGenderUsingPUTUnauthorized() *UpdateGenderUsingPUTUnauthorized {
	return &UpdateGenderUsingPUTUnauthorized{}
}

/*
UpdateGenderUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateGenderUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update gender using p u t unauthorized response has a 2xx status code
func (o *UpdateGenderUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gender using p u t unauthorized response has a 3xx status code
func (o *UpdateGenderUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t unauthorized response has a 4xx status code
func (o *UpdateGenderUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gender using p u t unauthorized response has a 5xx status code
func (o *UpdateGenderUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update gender using p u t unauthorized response a status code equal to that given
func (o *UpdateGenderUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update gender using p u t unauthorized response
func (o *UpdateGenderUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateGenderUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTUnauthorized", 401)
}

func (o *UpdateGenderUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTUnauthorized", 401)
}

func (o *UpdateGenderUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGenderUsingPUTForbidden creates a UpdateGenderUsingPUTForbidden with default headers values
func NewUpdateGenderUsingPUTForbidden() *UpdateGenderUsingPUTForbidden {
	return &UpdateGenderUsingPUTForbidden{}
}

/*
UpdateGenderUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateGenderUsingPUTForbidden struct {
}

// IsSuccess returns true when this update gender using p u t forbidden response has a 2xx status code
func (o *UpdateGenderUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gender using p u t forbidden response has a 3xx status code
func (o *UpdateGenderUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t forbidden response has a 4xx status code
func (o *UpdateGenderUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gender using p u t forbidden response has a 5xx status code
func (o *UpdateGenderUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update gender using p u t forbidden response a status code equal to that given
func (o *UpdateGenderUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update gender using p u t forbidden response
func (o *UpdateGenderUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateGenderUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTForbidden", 403)
}

func (o *UpdateGenderUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTForbidden", 403)
}

func (o *UpdateGenderUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGenderUsingPUTNotFound creates a UpdateGenderUsingPUTNotFound with default headers values
func NewUpdateGenderUsingPUTNotFound() *UpdateGenderUsingPUTNotFound {
	return &UpdateGenderUsingPUTNotFound{}
}

/*
UpdateGenderUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateGenderUsingPUTNotFound struct {
}

// IsSuccess returns true when this update gender using p u t not found response has a 2xx status code
func (o *UpdateGenderUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gender using p u t not found response has a 3xx status code
func (o *UpdateGenderUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t not found response has a 4xx status code
func (o *UpdateGenderUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update gender using p u t not found response has a 5xx status code
func (o *UpdateGenderUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update gender using p u t not found response a status code equal to that given
func (o *UpdateGenderUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update gender using p u t not found response
func (o *UpdateGenderUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateGenderUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTNotFound", 404)
}

func (o *UpdateGenderUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTNotFound", 404)
}

func (o *UpdateGenderUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateGenderUsingPUTInternalServerError creates a UpdateGenderUsingPUTInternalServerError with default headers values
func NewUpdateGenderUsingPUTInternalServerError() *UpdateGenderUsingPUTInternalServerError {
	return &UpdateGenderUsingPUTInternalServerError{}
}

/*
UpdateGenderUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateGenderUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update gender using p u t internal server error response has a 2xx status code
func (o *UpdateGenderUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update gender using p u t internal server error response has a 3xx status code
func (o *UpdateGenderUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update gender using p u t internal server error response has a 4xx status code
func (o *UpdateGenderUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update gender using p u t internal server error response has a 5xx status code
func (o *UpdateGenderUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update gender using p u t internal server error response a status code equal to that given
func (o *UpdateGenderUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update gender using p u t internal server error response
func (o *UpdateGenderUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateGenderUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTInternalServerError", 500)
}

func (o *UpdateGenderUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/gender][%d] updateGenderUsingPUTInternalServerError", 500)
}

func (o *UpdateGenderUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
