// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemberUpdateDTO MemberUpdateDTO
//
// swagger:model MemberUpdateDTO
type MemberUpdateDTO struct {

	// department effective date
	DepartmentEffectiveDate string `json:"departmentEffectiveDate,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// original member
	OriginalMember *MemberDTOReq `json:"originalMember,omitempty"`

	// salary effective date
	SalaryEffectiveDate string `json:"salaryEffectiveDate,omitempty"`

	// updated member
	UpdatedMember *MemberDTOReq `json:"updatedMember,omitempty"`
}

// Validate validates this member update d t o
func (m *MemberUpdateDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginalMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedMember(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberUpdateDTO) validateOriginalMember(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalMember) { // not required
		return nil
	}

	if m.OriginalMember != nil {
		if err := m.OriginalMember.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalMember")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalMember")
			}
			return err
		}
	}

	return nil
}

func (m *MemberUpdateDTO) validateUpdatedMember(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedMember) { // not required
		return nil
	}

	if m.UpdatedMember != nil {
		if err := m.UpdatedMember.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedMember")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedMember")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this member update d t o based on the context it is used
func (m *MemberUpdateDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginalMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberUpdateDTO) contextValidateOriginalMember(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalMember != nil {

		if swag.IsZero(m.OriginalMember) { // not required
			return nil
		}

		if err := m.OriginalMember.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originalMember")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originalMember")
			}
			return err
		}
	}

	return nil
}

func (m *MemberUpdateDTO) contextValidateUpdatedMember(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedMember != nil {

		if swag.IsZero(m.UpdatedMember) { // not required
			return nil
		}

		if err := m.UpdatedMember.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedMember")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedMember")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberUpdateDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberUpdateDTO) UnmarshalBinary(b []byte) error {
	var res MemberUpdateDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
