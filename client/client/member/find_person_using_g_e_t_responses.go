// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// FindPersonUsingGETReader is a Reader for the FindPersonUsingGET structure.
type FindPersonUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FindPersonUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFindPersonUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFindPersonUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFindPersonUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFindPersonUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFindPersonUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFindPersonUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/member/personFind] findPersonUsingGET", response, response.Code())
	}
}

// NewFindPersonUsingGETOK creates a FindPersonUsingGETOK with default headers values
func NewFindPersonUsingGETOK() *FindPersonUsingGETOK {
	return &FindPersonUsingGETOK{}
}

/*
FindPersonUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type FindPersonUsingGETOK struct {
	Payload *models.ResponseWrapperListPersonDTO
}

// IsSuccess returns true when this find person using g e t o k response has a 2xx status code
func (o *FindPersonUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this find person using g e t o k response has a 3xx status code
func (o *FindPersonUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find person using g e t o k response has a 4xx status code
func (o *FindPersonUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this find person using g e t o k response has a 5xx status code
func (o *FindPersonUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this find person using g e t o k response a status code equal to that given
func (o *FindPersonUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the find person using g e t o k response
func (o *FindPersonUsingGETOK) Code() int {
	return 200
}

func (o *FindPersonUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETOK %s", 200, payload)
}

func (o *FindPersonUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETOK %s", 200, payload)
}

func (o *FindPersonUsingGETOK) GetPayload() *models.ResponseWrapperListPersonDTO {
	return o.Payload
}

func (o *FindPersonUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListPersonDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFindPersonUsingGETBadRequest creates a FindPersonUsingGETBadRequest with default headers values
func NewFindPersonUsingGETBadRequest() *FindPersonUsingGETBadRequest {
	return &FindPersonUsingGETBadRequest{}
}

/*
FindPersonUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type FindPersonUsingGETBadRequest struct {
}

// IsSuccess returns true when this find person using g e t bad request response has a 2xx status code
func (o *FindPersonUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find person using g e t bad request response has a 3xx status code
func (o *FindPersonUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find person using g e t bad request response has a 4xx status code
func (o *FindPersonUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this find person using g e t bad request response has a 5xx status code
func (o *FindPersonUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this find person using g e t bad request response a status code equal to that given
func (o *FindPersonUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the find person using g e t bad request response
func (o *FindPersonUsingGETBadRequest) Code() int {
	return 400
}

func (o *FindPersonUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETBadRequest", 400)
}

func (o *FindPersonUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETBadRequest", 400)
}

func (o *FindPersonUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindPersonUsingGETUnauthorized creates a FindPersonUsingGETUnauthorized with default headers values
func NewFindPersonUsingGETUnauthorized() *FindPersonUsingGETUnauthorized {
	return &FindPersonUsingGETUnauthorized{}
}

/*
FindPersonUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FindPersonUsingGETUnauthorized struct {
}

// IsSuccess returns true when this find person using g e t unauthorized response has a 2xx status code
func (o *FindPersonUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find person using g e t unauthorized response has a 3xx status code
func (o *FindPersonUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find person using g e t unauthorized response has a 4xx status code
func (o *FindPersonUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this find person using g e t unauthorized response has a 5xx status code
func (o *FindPersonUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this find person using g e t unauthorized response a status code equal to that given
func (o *FindPersonUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the find person using g e t unauthorized response
func (o *FindPersonUsingGETUnauthorized) Code() int {
	return 401
}

func (o *FindPersonUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETUnauthorized", 401)
}

func (o *FindPersonUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETUnauthorized", 401)
}

func (o *FindPersonUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindPersonUsingGETForbidden creates a FindPersonUsingGETForbidden with default headers values
func NewFindPersonUsingGETForbidden() *FindPersonUsingGETForbidden {
	return &FindPersonUsingGETForbidden{}
}

/*
FindPersonUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FindPersonUsingGETForbidden struct {
}

// IsSuccess returns true when this find person using g e t forbidden response has a 2xx status code
func (o *FindPersonUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find person using g e t forbidden response has a 3xx status code
func (o *FindPersonUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find person using g e t forbidden response has a 4xx status code
func (o *FindPersonUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this find person using g e t forbidden response has a 5xx status code
func (o *FindPersonUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this find person using g e t forbidden response a status code equal to that given
func (o *FindPersonUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the find person using g e t forbidden response
func (o *FindPersonUsingGETForbidden) Code() int {
	return 403
}

func (o *FindPersonUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETForbidden", 403)
}

func (o *FindPersonUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETForbidden", 403)
}

func (o *FindPersonUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindPersonUsingGETNotFound creates a FindPersonUsingGETNotFound with default headers values
func NewFindPersonUsingGETNotFound() *FindPersonUsingGETNotFound {
	return &FindPersonUsingGETNotFound{}
}

/*
FindPersonUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type FindPersonUsingGETNotFound struct {
}

// IsSuccess returns true when this find person using g e t not found response has a 2xx status code
func (o *FindPersonUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find person using g e t not found response has a 3xx status code
func (o *FindPersonUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find person using g e t not found response has a 4xx status code
func (o *FindPersonUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this find person using g e t not found response has a 5xx status code
func (o *FindPersonUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this find person using g e t not found response a status code equal to that given
func (o *FindPersonUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the find person using g e t not found response
func (o *FindPersonUsingGETNotFound) Code() int {
	return 404
}

func (o *FindPersonUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETNotFound", 404)
}

func (o *FindPersonUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETNotFound", 404)
}

func (o *FindPersonUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewFindPersonUsingGETInternalServerError creates a FindPersonUsingGETInternalServerError with default headers values
func NewFindPersonUsingGETInternalServerError() *FindPersonUsingGETInternalServerError {
	return &FindPersonUsingGETInternalServerError{}
}

/*
FindPersonUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type FindPersonUsingGETInternalServerError struct {
}

// IsSuccess returns true when this find person using g e t internal server error response has a 2xx status code
func (o *FindPersonUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this find person using g e t internal server error response has a 3xx status code
func (o *FindPersonUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this find person using g e t internal server error response has a 4xx status code
func (o *FindPersonUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this find person using g e t internal server error response has a 5xx status code
func (o *FindPersonUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this find person using g e t internal server error response a status code equal to that given
func (o *FindPersonUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the find person using g e t internal server error response
func (o *FindPersonUsingGETInternalServerError) Code() int {
	return 500
}

func (o *FindPersonUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETInternalServerError", 500)
}

func (o *FindPersonUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/member/personFind][%d] findPersonUsingGETInternalServerError", 500)
}

func (o *FindPersonUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
