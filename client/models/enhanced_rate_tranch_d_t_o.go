// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnhancedRateTranchDTO EnhancedRateTranchDTO
//
// swagger:model EnhancedRateTranchDTO
type EnhancedRateTranchDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// option choice
	OptionChoice *OptionChoiceDTO `json:"optionChoice,omitempty"`

	// process renewal period
	ProcessRenewalPeriod bool `json:"processRenewalPeriod,omitempty"`

	// rate scale detail list
	RateScaleDetailList []*RateScaleDetailDTO `json:"rateScaleDetailList"`

	// tobacco status
	// Enum: ["NON_SMOKER","NOT_APPLICABLE","SMOKER"]
	TobaccoStatus string `json:"tobaccoStatus,omitempty"`
}

// Validate validates this enhanced rate tranch d t o
func (m *EnhancedRateTranchDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOptionChoice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateScaleDetailList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTobaccoStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnhancedRateTranchDTO) validateOptionChoice(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionChoice) { // not required
		return nil
	}

	if m.OptionChoice != nil {
		if err := m.OptionChoice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionChoice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optionChoice")
			}
			return err
		}
	}

	return nil
}

func (m *EnhancedRateTranchDTO) validateRateScaleDetailList(formats strfmt.Registry) error {
	if swag.IsZero(m.RateScaleDetailList) { // not required
		return nil
	}

	for i := 0; i < len(m.RateScaleDetailList); i++ {
		if swag.IsZero(m.RateScaleDetailList[i]) { // not required
			continue
		}

		if m.RateScaleDetailList[i] != nil {
			if err := m.RateScaleDetailList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var enhancedRateTranchDTOTypeTobaccoStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NON_SMOKER","NOT_APPLICABLE","SMOKER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		enhancedRateTranchDTOTypeTobaccoStatusPropEnum = append(enhancedRateTranchDTOTypeTobaccoStatusPropEnum, v)
	}
}

const (

	// EnhancedRateTranchDTOTobaccoStatusNONSMOKER captures enum value "NON_SMOKER"
	EnhancedRateTranchDTOTobaccoStatusNONSMOKER string = "NON_SMOKER"

	// EnhancedRateTranchDTOTobaccoStatusNOTAPPLICABLE captures enum value "NOT_APPLICABLE"
	EnhancedRateTranchDTOTobaccoStatusNOTAPPLICABLE string = "NOT_APPLICABLE"

	// EnhancedRateTranchDTOTobaccoStatusSMOKER captures enum value "SMOKER"
	EnhancedRateTranchDTOTobaccoStatusSMOKER string = "SMOKER"
)

// prop value enum
func (m *EnhancedRateTranchDTO) validateTobaccoStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, enhancedRateTranchDTOTypeTobaccoStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnhancedRateTranchDTO) validateTobaccoStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.TobaccoStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateTobaccoStatusEnum("tobaccoStatus", "body", m.TobaccoStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this enhanced rate tranch d t o based on the context it is used
func (m *EnhancedRateTranchDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptionChoice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateScaleDetailList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnhancedRateTranchDTO) contextValidateOptionChoice(ctx context.Context, formats strfmt.Registry) error {

	if m.OptionChoice != nil {

		if swag.IsZero(m.OptionChoice) { // not required
			return nil
		}

		if err := m.OptionChoice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("optionChoice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("optionChoice")
			}
			return err
		}
	}

	return nil
}

func (m *EnhancedRateTranchDTO) contextValidateRateScaleDetailList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RateScaleDetailList); i++ {

		if m.RateScaleDetailList[i] != nil {

			if swag.IsZero(m.RateScaleDetailList[i]) { // not required
				return nil
			}

			if err := m.RateScaleDetailList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rateScaleDetailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnhancedRateTranchDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnhancedRateTranchDTO) UnmarshalBinary(b []byte) error {
	var res EnhancedRateTranchDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
