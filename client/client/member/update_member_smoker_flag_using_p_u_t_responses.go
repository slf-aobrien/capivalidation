// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateMemberSmokerFlagUsingPUTReader is a Reader for the UpdateMemberSmokerFlagUsingPUT structure.
type UpdateMemberSmokerFlagUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateMemberSmokerFlagUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateMemberSmokerFlagUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateMemberSmokerFlagUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateMemberSmokerFlagUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateMemberSmokerFlagUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateMemberSmokerFlagUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateMemberSmokerFlagUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateMemberSmokerFlagUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/member/update/member/smokerFlag] updateMemberSmokerFlagUsingPUT", response, response.Code())
	}
}

// NewUpdateMemberSmokerFlagUsingPUTOK creates a UpdateMemberSmokerFlagUsingPUTOK with default headers values
func NewUpdateMemberSmokerFlagUsingPUTOK() *UpdateMemberSmokerFlagUsingPUTOK {
	return &UpdateMemberSmokerFlagUsingPUTOK{}
}

/*
UpdateMemberSmokerFlagUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateMemberSmokerFlagUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update member smoker flag using p u t o k response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update member smoker flag using p u t o k response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t o k response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update member smoker flag using p u t o k response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update member smoker flag using p u t o k response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update member smoker flag using p u t o k response
func (o *UpdateMemberSmokerFlagUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateMemberSmokerFlagUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTOK %s", 200, payload)
}

func (o *UpdateMemberSmokerFlagUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTOK %s", 200, payload)
}

func (o *UpdateMemberSmokerFlagUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateMemberSmokerFlagUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateMemberSmokerFlagUsingPUTCreated creates a UpdateMemberSmokerFlagUsingPUTCreated with default headers values
func NewUpdateMemberSmokerFlagUsingPUTCreated() *UpdateMemberSmokerFlagUsingPUTCreated {
	return &UpdateMemberSmokerFlagUsingPUTCreated{}
}

/*
UpdateMemberSmokerFlagUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateMemberSmokerFlagUsingPUTCreated struct {
}

// IsSuccess returns true when this update member smoker flag using p u t created response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update member smoker flag using p u t created response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t created response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update member smoker flag using p u t created response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update member smoker flag using p u t created response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update member smoker flag using p u t created response
func (o *UpdateMemberSmokerFlagUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateMemberSmokerFlagUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTCreated", 201)
}

func (o *UpdateMemberSmokerFlagUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTCreated", 201)
}

func (o *UpdateMemberSmokerFlagUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSmokerFlagUsingPUTBadRequest creates a UpdateMemberSmokerFlagUsingPUTBadRequest with default headers values
func NewUpdateMemberSmokerFlagUsingPUTBadRequest() *UpdateMemberSmokerFlagUsingPUTBadRequest {
	return &UpdateMemberSmokerFlagUsingPUTBadRequest{}
}

/*
UpdateMemberSmokerFlagUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateMemberSmokerFlagUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update member smoker flag using p u t bad request response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member smoker flag using p u t bad request response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t bad request response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member smoker flag using p u t bad request response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update member smoker flag using p u t bad request response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update member smoker flag using p u t bad request response
func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTBadRequest", 400)
}

func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTBadRequest", 400)
}

func (o *UpdateMemberSmokerFlagUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSmokerFlagUsingPUTUnauthorized creates a UpdateMemberSmokerFlagUsingPUTUnauthorized with default headers values
func NewUpdateMemberSmokerFlagUsingPUTUnauthorized() *UpdateMemberSmokerFlagUsingPUTUnauthorized {
	return &UpdateMemberSmokerFlagUsingPUTUnauthorized{}
}

/*
UpdateMemberSmokerFlagUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateMemberSmokerFlagUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update member smoker flag using p u t unauthorized response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member smoker flag using p u t unauthorized response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t unauthorized response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member smoker flag using p u t unauthorized response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update member smoker flag using p u t unauthorized response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update member smoker flag using p u t unauthorized response
func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTUnauthorized", 401)
}

func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTUnauthorized", 401)
}

func (o *UpdateMemberSmokerFlagUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSmokerFlagUsingPUTForbidden creates a UpdateMemberSmokerFlagUsingPUTForbidden with default headers values
func NewUpdateMemberSmokerFlagUsingPUTForbidden() *UpdateMemberSmokerFlagUsingPUTForbidden {
	return &UpdateMemberSmokerFlagUsingPUTForbidden{}
}

/*
UpdateMemberSmokerFlagUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateMemberSmokerFlagUsingPUTForbidden struct {
}

// IsSuccess returns true when this update member smoker flag using p u t forbidden response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member smoker flag using p u t forbidden response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t forbidden response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member smoker flag using p u t forbidden response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update member smoker flag using p u t forbidden response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update member smoker flag using p u t forbidden response
func (o *UpdateMemberSmokerFlagUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateMemberSmokerFlagUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTForbidden", 403)
}

func (o *UpdateMemberSmokerFlagUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTForbidden", 403)
}

func (o *UpdateMemberSmokerFlagUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSmokerFlagUsingPUTNotFound creates a UpdateMemberSmokerFlagUsingPUTNotFound with default headers values
func NewUpdateMemberSmokerFlagUsingPUTNotFound() *UpdateMemberSmokerFlagUsingPUTNotFound {
	return &UpdateMemberSmokerFlagUsingPUTNotFound{}
}

/*
UpdateMemberSmokerFlagUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateMemberSmokerFlagUsingPUTNotFound struct {
}

// IsSuccess returns true when this update member smoker flag using p u t not found response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member smoker flag using p u t not found response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t not found response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update member smoker flag using p u t not found response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update member smoker flag using p u t not found response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update member smoker flag using p u t not found response
func (o *UpdateMemberSmokerFlagUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateMemberSmokerFlagUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTNotFound", 404)
}

func (o *UpdateMemberSmokerFlagUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTNotFound", 404)
}

func (o *UpdateMemberSmokerFlagUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateMemberSmokerFlagUsingPUTInternalServerError creates a UpdateMemberSmokerFlagUsingPUTInternalServerError with default headers values
func NewUpdateMemberSmokerFlagUsingPUTInternalServerError() *UpdateMemberSmokerFlagUsingPUTInternalServerError {
	return &UpdateMemberSmokerFlagUsingPUTInternalServerError{}
}

/*
UpdateMemberSmokerFlagUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateMemberSmokerFlagUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update member smoker flag using p u t internal server error response has a 2xx status code
func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update member smoker flag using p u t internal server error response has a 3xx status code
func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update member smoker flag using p u t internal server error response has a 4xx status code
func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update member smoker flag using p u t internal server error response has a 5xx status code
func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update member smoker flag using p u t internal server error response a status code equal to that given
func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update member smoker flag using p u t internal server error response
func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTInternalServerError", 500)
}

func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/member/update/member/smokerFlag][%d] updateMemberSmokerFlagUsingPUTInternalServerError", 500)
}

func (o *UpdateMemberSmokerFlagUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
