// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// GetVersionUsingGETReader is a Reader for the GetVersionUsingGET structure.
type GetVersionUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetVersionUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetVersionUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetVersionUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetVersionUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetVersionUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetVersionUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/admin/version] getVersionUsingGET", response, response.Code())
	}
}

// NewGetVersionUsingGETOK creates a GetVersionUsingGETOK with default headers values
func NewGetVersionUsingGETOK() *GetVersionUsingGETOK {
	return &GetVersionUsingGETOK{}
}

/*
GetVersionUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetVersionUsingGETOK struct {
	Payload string
}

// IsSuccess returns true when this get version using g e t o k response has a 2xx status code
func (o *GetVersionUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get version using g e t o k response has a 3xx status code
func (o *GetVersionUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version using g e t o k response has a 4xx status code
func (o *GetVersionUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get version using g e t o k response has a 5xx status code
func (o *GetVersionUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get version using g e t o k response a status code equal to that given
func (o *GetVersionUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get version using g e t o k response
func (o *GetVersionUsingGETOK) Code() int {
	return 200
}

func (o *GetVersionUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETOK %s", 200, payload)
}

func (o *GetVersionUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETOK %s", 200, payload)
}

func (o *GetVersionUsingGETOK) GetPayload() string {
	return o.Payload
}

func (o *GetVersionUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetVersionUsingGETUnauthorized creates a GetVersionUsingGETUnauthorized with default headers values
func NewGetVersionUsingGETUnauthorized() *GetVersionUsingGETUnauthorized {
	return &GetVersionUsingGETUnauthorized{}
}

/*
GetVersionUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetVersionUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get version using g e t unauthorized response has a 2xx status code
func (o *GetVersionUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version using g e t unauthorized response has a 3xx status code
func (o *GetVersionUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version using g e t unauthorized response has a 4xx status code
func (o *GetVersionUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version using g e t unauthorized response has a 5xx status code
func (o *GetVersionUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get version using g e t unauthorized response a status code equal to that given
func (o *GetVersionUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get version using g e t unauthorized response
func (o *GetVersionUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetVersionUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETUnauthorized", 401)
}

func (o *GetVersionUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETUnauthorized", 401)
}

func (o *GetVersionUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionUsingGETForbidden creates a GetVersionUsingGETForbidden with default headers values
func NewGetVersionUsingGETForbidden() *GetVersionUsingGETForbidden {
	return &GetVersionUsingGETForbidden{}
}

/*
GetVersionUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetVersionUsingGETForbidden struct {
}

// IsSuccess returns true when this get version using g e t forbidden response has a 2xx status code
func (o *GetVersionUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version using g e t forbidden response has a 3xx status code
func (o *GetVersionUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version using g e t forbidden response has a 4xx status code
func (o *GetVersionUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version using g e t forbidden response has a 5xx status code
func (o *GetVersionUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get version using g e t forbidden response a status code equal to that given
func (o *GetVersionUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get version using g e t forbidden response
func (o *GetVersionUsingGETForbidden) Code() int {
	return 403
}

func (o *GetVersionUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETForbidden", 403)
}

func (o *GetVersionUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETForbidden", 403)
}

func (o *GetVersionUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionUsingGETNotFound creates a GetVersionUsingGETNotFound with default headers values
func NewGetVersionUsingGETNotFound() *GetVersionUsingGETNotFound {
	return &GetVersionUsingGETNotFound{}
}

/*
GetVersionUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetVersionUsingGETNotFound struct {
}

// IsSuccess returns true when this get version using g e t not found response has a 2xx status code
func (o *GetVersionUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version using g e t not found response has a 3xx status code
func (o *GetVersionUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version using g e t not found response has a 4xx status code
func (o *GetVersionUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get version using g e t not found response has a 5xx status code
func (o *GetVersionUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get version using g e t not found response a status code equal to that given
func (o *GetVersionUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get version using g e t not found response
func (o *GetVersionUsingGETNotFound) Code() int {
	return 404
}

func (o *GetVersionUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETNotFound", 404)
}

func (o *GetVersionUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETNotFound", 404)
}

func (o *GetVersionUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetVersionUsingGETInternalServerError creates a GetVersionUsingGETInternalServerError with default headers values
func NewGetVersionUsingGETInternalServerError() *GetVersionUsingGETInternalServerError {
	return &GetVersionUsingGETInternalServerError{}
}

/*
GetVersionUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetVersionUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get version using g e t internal server error response has a 2xx status code
func (o *GetVersionUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get version using g e t internal server error response has a 3xx status code
func (o *GetVersionUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get version using g e t internal server error response has a 4xx status code
func (o *GetVersionUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get version using g e t internal server error response has a 5xx status code
func (o *GetVersionUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get version using g e t internal server error response a status code equal to that given
func (o *GetVersionUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get version using g e t internal server error response
func (o *GetVersionUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetVersionUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETInternalServerError", 500)
}

func (o *GetVersionUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/admin/version][%d] getVersionUsingGETInternalServerError", 500)
}

func (o *GetVersionUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
