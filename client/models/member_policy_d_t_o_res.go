// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemberPolicyDTORes MemberPolicyDTORes
//
// swagger:model MemberPolicyDTORes
type MemberPolicyDTORes struct {

	// benefit list
	BenefitList []*BenefitDTORes `json:"benefitList"`

	// bill group
	BillGroup *BillGroupDTORes `json:"billGroup,omitempty"`

	// bill sort key
	BillSortKey string `json:"billSortKey,omitempty"`

	// case member key
	CaseMemberKey string `json:"caseMemberKey,omitempty"`

	// cobra effective date
	CobraEffectiveDate string `json:"cobraEffectiveDate,omitempty"`

	// cobra termination date
	CobraTerminationDate string `json:"cobraTerminationDate,omitempty"`

	// department
	Department string `json:"department,omitempty"`

	// department details
	DepartmentDetails *DepartmentDTO `json:"departmentDetails,omitempty"`

	// dependent list
	DependentList []*DependentDTORes `json:"dependentList"`

	// employment status
	EmploymentStatus string `json:"employmentStatus,omitempty"`

	// employment status effective date
	EmploymentStatusEffectiveDate string `json:"employmentStatusEffectiveDate,omitempty"`

	// facility Id
	FacilityID string `json:"facilityId,omitempty"`

	// hire date
	HireDate string `json:"hireDate,omitempty"`

	// join policy date
	JoinPolicyDate string `json:"joinPolicyDate,omitempty"`

	// member group
	MemberGroup *MemberGroupDTORes `json:"memberGroup,omitempty"`

	// member status
	MemberStatus string `json:"memberStatus,omitempty"`

	// member status effective date
	MemberStatusEffectiveDate string `json:"memberStatusEffectiveDate,omitempty"`

	// member status expire date
	MemberStatusExpireDate string `json:"memberStatusExpireDate,omitempty"`

	// member status reason
	MemberStatusReason string `json:"memberStatusReason,omitempty"`

	// payroll number
	PayrollNumber string `json:"payrollNumber,omitempty"`

	// policy
	Policy *PolicyDTORes `json:"policy,omitempty"`

	// record status
	RecordStatus string `json:"recordStatus,omitempty"`

	// salary
	Salary *SalaryDTO `json:"salary,omitempty"`

	// smoker status
	SmokerStatus string `json:"smokerStatus,omitempty"`
}

// Validate validates this member policy d t o res
func (m *MemberPolicyDTORes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBenefitList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBillGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartmentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependentList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberPolicyDTORes) validateBenefitList(formats strfmt.Registry) error {
	if swag.IsZero(m.BenefitList) { // not required
		return nil
	}

	for i := 0; i < len(m.BenefitList); i++ {
		if swag.IsZero(m.BenefitList[i]) { // not required
			continue
		}

		if m.BenefitList[i] != nil {
			if err := m.BenefitList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benefitList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benefitList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberPolicyDTORes) validateBillGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.BillGroup) { // not required
		return nil
	}

	if m.BillGroup != nil {
		if err := m.BillGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billGroup")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) validateDepartmentDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartmentDetails) { // not required
		return nil
	}

	if m.DepartmentDetails != nil {
		if err := m.DepartmentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("departmentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("departmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) validateDependentList(formats strfmt.Registry) error {
	if swag.IsZero(m.DependentList) { // not required
		return nil
	}

	for i := 0; i < len(m.DependentList); i++ {
		if swag.IsZero(m.DependentList[i]) { // not required
			continue
		}

		if m.DependentList[i] != nil {
			if err := m.DependentList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependentList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberPolicyDTORes) validateMemberGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberGroup) { // not required
		return nil
	}

	if m.MemberGroup != nil {
		if err := m.MemberGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memberGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memberGroup")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) validatePolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.Policy) { // not required
		return nil
	}

	if m.Policy != nil {
		if err := m.Policy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) validateSalary(formats strfmt.Registry) error {
	if swag.IsZero(m.Salary) { // not required
		return nil
	}

	if m.Salary != nil {
		if err := m.Salary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("salary")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this member policy d t o res based on the context it is used
func (m *MemberPolicyDTORes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBenefitList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBillGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDepartmentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDependentList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSalary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberPolicyDTORes) contextValidateBenefitList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BenefitList); i++ {

		if m.BenefitList[i] != nil {

			if swag.IsZero(m.BenefitList[i]) { // not required
				return nil
			}

			if err := m.BenefitList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benefitList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benefitList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberPolicyDTORes) contextValidateBillGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.BillGroup != nil {

		if swag.IsZero(m.BillGroup) { // not required
			return nil
		}

		if err := m.BillGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billGroup")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) contextValidateDepartmentDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.DepartmentDetails != nil {

		if swag.IsZero(m.DepartmentDetails) { // not required
			return nil
		}

		if err := m.DepartmentDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("departmentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("departmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) contextValidateDependentList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DependentList); i++ {

		if m.DependentList[i] != nil {

			if swag.IsZero(m.DependentList[i]) { // not required
				return nil
			}

			if err := m.DependentList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependentList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dependentList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberPolicyDTORes) contextValidateMemberGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.MemberGroup != nil {

		if swag.IsZero(m.MemberGroup) { // not required
			return nil
		}

		if err := m.MemberGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("memberGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("memberGroup")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) contextValidatePolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.Policy != nil {

		if swag.IsZero(m.Policy) { // not required
			return nil
		}

		if err := m.Policy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policy")
			}
			return err
		}
	}

	return nil
}

func (m *MemberPolicyDTORes) contextValidateSalary(ctx context.Context, formats strfmt.Registry) error {

	if m.Salary != nil {

		if swag.IsZero(m.Salary) { // not required
			return nil
		}

		if err := m.Salary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("salary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("salary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberPolicyDTORes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberPolicyDTORes) UnmarshalBinary(b []byte) error {
	var res MemberPolicyDTORes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
