// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"client/models"
)

// NewAddDependentBenefitExclusionsUsingPOSTParams creates a new AddDependentBenefitExclusionsUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddDependentBenefitExclusionsUsingPOSTParams() *AddDependentBenefitExclusionsUsingPOSTParams {
	return &AddDependentBenefitExclusionsUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddDependentBenefitExclusionsUsingPOSTParamsWithTimeout creates a new AddDependentBenefitExclusionsUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewAddDependentBenefitExclusionsUsingPOSTParamsWithTimeout(timeout time.Duration) *AddDependentBenefitExclusionsUsingPOSTParams {
	return &AddDependentBenefitExclusionsUsingPOSTParams{
		timeout: timeout,
	}
}

// NewAddDependentBenefitExclusionsUsingPOSTParamsWithContext creates a new AddDependentBenefitExclusionsUsingPOSTParams object
// with the ability to set a context for a request.
func NewAddDependentBenefitExclusionsUsingPOSTParamsWithContext(ctx context.Context) *AddDependentBenefitExclusionsUsingPOSTParams {
	return &AddDependentBenefitExclusionsUsingPOSTParams{
		Context: ctx,
	}
}

// NewAddDependentBenefitExclusionsUsingPOSTParamsWithHTTPClient creates a new AddDependentBenefitExclusionsUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddDependentBenefitExclusionsUsingPOSTParamsWithHTTPClient(client *http.Client) *AddDependentBenefitExclusionsUsingPOSTParams {
	return &AddDependentBenefitExclusionsUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
AddDependentBenefitExclusionsUsingPOSTParams contains all the parameters to send to the API endpoint

	for the add dependent benefit exclusions using p o s t operation.

	Typically these are written to a http.Request.
*/
type AddDependentBenefitExclusionsUsingPOSTParams struct {

	/* BenefitExclusionList.

	   benefitExclusionList
	*/
	BenefitExclusionList []*models.BenefitExclusionDTO

	/* CaseMemberKey.

	   caseMemberKey
	*/
	CaseMemberKey string

	/* ClientID.

	   clientId
	*/
	ClientID string

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate string

	/* PerformReallocation.

	   performReallocation
	*/
	PerformReallocation *bool

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add dependent benefit exclusions using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithDefaults() *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add dependent benefit exclusions using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithTimeout(timeout time.Duration) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithContext(ctx context.Context) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithHTTPClient(client *http.Client) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBenefitExclusionList adds the benefitExclusionList to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithBenefitExclusionList(benefitExclusionList []*models.BenefitExclusionDTO) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetBenefitExclusionList(benefitExclusionList)
	return o
}

// SetBenefitExclusionList adds the benefitExclusionList to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetBenefitExclusionList(benefitExclusionList []*models.BenefitExclusionDTO) {
	o.BenefitExclusionList = benefitExclusionList
}

// WithCaseMemberKey adds the caseMemberKey to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithCaseMemberKey(caseMemberKey string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetCaseMemberKey(caseMemberKey)
	return o
}

// SetCaseMemberKey adds the caseMemberKey to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetCaseMemberKey(caseMemberKey string) {
	o.CaseMemberKey = caseMemberKey
}

// WithClientID adds the clientID to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithClientID(clientID string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetClientID(clientID string) {
	o.ClientID = clientID
}

// WithEffectiveDate adds the effectiveDate to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithEffectiveDate(effectiveDate string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithPerformReallocation adds the performReallocation to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithPerformReallocation(performReallocation *bool) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetPerformReallocation(performReallocation)
	return o
}

// SetPerformReallocation adds the performReallocation to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetPerformReallocation(performReallocation *bool) {
	o.PerformReallocation = performReallocation
}

// WithRequestApplication adds the requestApplication to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithRequestApplication(requestApplication string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithRequestUser(requestUser string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WithVarianceFormat adds the varianceFormat to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithVarianceFormat(varianceFormat string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetVarianceFormat(varianceFormat string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WithVarianceLevel(varianceLevel string) *AddDependentBenefitExclusionsUsingPOSTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the add dependent benefit exclusions using p o s t params
func (o *AddDependentBenefitExclusionsUsingPOSTParams) SetVarianceLevel(varianceLevel string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *AddDependentBenefitExclusionsUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.BenefitExclusionList != nil {
		if err := r.SetBodyParam(o.BenefitExclusionList); err != nil {
			return err
		}
	}

	// query param caseMemberKey
	qrCaseMemberKey := o.CaseMemberKey
	qCaseMemberKey := qrCaseMemberKey
	if qCaseMemberKey != "" {

		if err := r.SetQueryParam("caseMemberKey", qCaseMemberKey); err != nil {
			return err
		}
	}

	// query param clientId
	qrClientID := o.ClientID
	qClientID := qrClientID
	if qClientID != "" {

		if err := r.SetQueryParam("clientId", qClientID); err != nil {
			return err
		}
	}

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	if o.PerformReallocation != nil {

		// query param performReallocation
		var qrPerformReallocation bool

		if o.PerformReallocation != nil {
			qrPerformReallocation = *o.PerformReallocation
		}
		qPerformReallocation := swag.FormatBool(qrPerformReallocation)
		if qPerformReallocation != "" {

			if err := r.SetQueryParam("performReallocation", qPerformReallocation); err != nil {
				return err
			}
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	// query param varianceFormat
	qrVarianceFormat := o.VarianceFormat
	qVarianceFormat := qrVarianceFormat
	if qVarianceFormat != "" {

		if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
			return err
		}
	}

	// query param varianceLevel
	qrVarianceLevel := o.VarianceLevel
	qVarianceLevel := qrVarianceLevel
	if qVarianceLevel != "" {

		if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
