// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TraditionalBillPageDTO TraditionalBillPageDTO
//
// swagger:model TraditionalBillPageDTO
type TraditionalBillPageDTO struct {

	// traditional adjustments d t o list
	TraditionalAdjustmentsDTOList []*AdjustmentsDTO `json:"traditionalAdjustmentsDTOList"`

	// traditional member department d t o list
	TraditionalMemberDepartmentDTOList []*TraditionalMemberDepartmentDTO `json:"traditionalMemberDepartmentDTOList"`

	// traditional remittance d t o
	TraditionalRemittanceDTO *TraditionalRemittanceDTO `json:"traditionalRemittanceDTO,omitempty"`

	// traditional summary d t o list
	TraditionalSummaryDTOList []*TraditionalSummaryDTO `json:"traditionalSummaryDTOList"`
}

// Validate validates this traditional bill page d t o
func (m *TraditionalBillPageDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTraditionalAdjustmentsDTOList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraditionalMemberDepartmentDTOList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraditionalRemittanceDTO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraditionalSummaryDTOList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TraditionalBillPageDTO) validateTraditionalAdjustmentsDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.TraditionalAdjustmentsDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.TraditionalAdjustmentsDTOList); i++ {
		if swag.IsZero(m.TraditionalAdjustmentsDTOList[i]) { // not required
			continue
		}

		if m.TraditionalAdjustmentsDTOList[i] != nil {
			if err := m.TraditionalAdjustmentsDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traditionalAdjustmentsDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traditionalAdjustmentsDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TraditionalBillPageDTO) validateTraditionalMemberDepartmentDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.TraditionalMemberDepartmentDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.TraditionalMemberDepartmentDTOList); i++ {
		if swag.IsZero(m.TraditionalMemberDepartmentDTOList[i]) { // not required
			continue
		}

		if m.TraditionalMemberDepartmentDTOList[i] != nil {
			if err := m.TraditionalMemberDepartmentDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traditionalMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traditionalMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TraditionalBillPageDTO) validateTraditionalRemittanceDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.TraditionalRemittanceDTO) { // not required
		return nil
	}

	if m.TraditionalRemittanceDTO != nil {
		if err := m.TraditionalRemittanceDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("traditionalRemittanceDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("traditionalRemittanceDTO")
			}
			return err
		}
	}

	return nil
}

func (m *TraditionalBillPageDTO) validateTraditionalSummaryDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.TraditionalSummaryDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.TraditionalSummaryDTOList); i++ {
		if swag.IsZero(m.TraditionalSummaryDTOList[i]) { // not required
			continue
		}

		if m.TraditionalSummaryDTOList[i] != nil {
			if err := m.TraditionalSummaryDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traditionalSummaryDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traditionalSummaryDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this traditional bill page d t o based on the context it is used
func (m *TraditionalBillPageDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTraditionalAdjustmentsDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraditionalMemberDepartmentDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraditionalRemittanceDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraditionalSummaryDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TraditionalBillPageDTO) contextValidateTraditionalAdjustmentsDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TraditionalAdjustmentsDTOList); i++ {

		if m.TraditionalAdjustmentsDTOList[i] != nil {

			if swag.IsZero(m.TraditionalAdjustmentsDTOList[i]) { // not required
				return nil
			}

			if err := m.TraditionalAdjustmentsDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traditionalAdjustmentsDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traditionalAdjustmentsDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TraditionalBillPageDTO) contextValidateTraditionalMemberDepartmentDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TraditionalMemberDepartmentDTOList); i++ {

		if m.TraditionalMemberDepartmentDTOList[i] != nil {

			if swag.IsZero(m.TraditionalMemberDepartmentDTOList[i]) { // not required
				return nil
			}

			if err := m.TraditionalMemberDepartmentDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traditionalMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traditionalMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TraditionalBillPageDTO) contextValidateTraditionalRemittanceDTO(ctx context.Context, formats strfmt.Registry) error {

	if m.TraditionalRemittanceDTO != nil {

		if swag.IsZero(m.TraditionalRemittanceDTO) { // not required
			return nil
		}

		if err := m.TraditionalRemittanceDTO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("traditionalRemittanceDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("traditionalRemittanceDTO")
			}
			return err
		}
	}

	return nil
}

func (m *TraditionalBillPageDTO) contextValidateTraditionalSummaryDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TraditionalSummaryDTOList); i++ {

		if m.TraditionalSummaryDTOList[i] != nil {

			if swag.IsZero(m.TraditionalSummaryDTOList[i]) { // not required
				return nil
			}

			if err := m.TraditionalSummaryDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traditionalSummaryDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traditionalSummaryDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TraditionalBillPageDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TraditionalBillPageDTO) UnmarshalBinary(b []byte) error {
	var res TraditionalBillPageDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
