// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RiskBenefitSentenceDTO RiskBenefitSentenceDTO
//
// swagger:model RiskBenefitSentenceDTO
type RiskBenefitSentenceDTO struct {

	// age reduction
	AgeReduction *AgeReductionDTO `json:"ageReduction,omitempty"`

	// associated benefit
	AssociatedBenefit string `json:"associatedBenefit,omitempty"`

	// basis
	Basis string `json:"basis,omitempty"`

	// basis amount
	BasisAmount string `json:"basisAmount,omitempty"`

	// basis multiplier
	BasisMultiplier string `json:"basisMultiplier,omitempty"`

	// clear code
	ClearCode string `json:"clearCode,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// label alias name
	LabelAliasName string `json:"labelAliasName,omitempty"`

	// nomination type
	NominationType string `json:"nominationType,omitempty"`

	// operation code
	OperationCode string `json:"operationCode,omitempty"`

	// reason
	Reason string `json:"reason,omitempty"`

	// result basis name
	ResultBasisName string `json:"resultBasisName,omitempty"`

	// result hold name
	ResultHoldName string `json:"resultHoldName,omitempty"`

	// salary type
	SalaryType string `json:"salaryType,omitempty"`

	// scale description
	ScaleDescription string `json:"scaleDescription,omitempty"`

	// sequence number
	SequenceNumber string `json:"sequenceNumber,omitempty"`
}

// Validate validates this risk benefit sentence d t o
func (m *RiskBenefitSentenceDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgeReduction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskBenefitSentenceDTO) validateAgeReduction(formats strfmt.Registry) error {
	if swag.IsZero(m.AgeReduction) { // not required
		return nil
	}

	if m.AgeReduction != nil {
		if err := m.AgeReduction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ageReduction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ageReduction")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this risk benefit sentence d t o based on the context it is used
func (m *RiskBenefitSentenceDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgeReduction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskBenefitSentenceDTO) contextValidateAgeReduction(ctx context.Context, formats strfmt.Registry) error {

	if m.AgeReduction != nil {

		if swag.IsZero(m.AgeReduction) { // not required
			return nil
		}

		if err := m.AgeReduction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ageReduction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ageReduction")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RiskBenefitSentenceDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskBenefitSentenceDTO) UnmarshalBinary(b []byte) error {
	var res RiskBenefitSentenceDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
