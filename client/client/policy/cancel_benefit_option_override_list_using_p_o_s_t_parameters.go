// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCancelBenefitOptionOverrideListUsingPOSTParams creates a new CancelBenefitOptionOverrideListUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCancelBenefitOptionOverrideListUsingPOSTParams() *CancelBenefitOptionOverrideListUsingPOSTParams {
	return &CancelBenefitOptionOverrideListUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCancelBenefitOptionOverrideListUsingPOSTParamsWithTimeout creates a new CancelBenefitOptionOverrideListUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewCancelBenefitOptionOverrideListUsingPOSTParamsWithTimeout(timeout time.Duration) *CancelBenefitOptionOverrideListUsingPOSTParams {
	return &CancelBenefitOptionOverrideListUsingPOSTParams{
		timeout: timeout,
	}
}

// NewCancelBenefitOptionOverrideListUsingPOSTParamsWithContext creates a new CancelBenefitOptionOverrideListUsingPOSTParams object
// with the ability to set a context for a request.
func NewCancelBenefitOptionOverrideListUsingPOSTParamsWithContext(ctx context.Context) *CancelBenefitOptionOverrideListUsingPOSTParams {
	return &CancelBenefitOptionOverrideListUsingPOSTParams{
		Context: ctx,
	}
}

// NewCancelBenefitOptionOverrideListUsingPOSTParamsWithHTTPClient creates a new CancelBenefitOptionOverrideListUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewCancelBenefitOptionOverrideListUsingPOSTParamsWithHTTPClient(client *http.Client) *CancelBenefitOptionOverrideListUsingPOSTParams {
	return &CancelBenefitOptionOverrideListUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
CancelBenefitOptionOverrideListUsingPOSTParams contains all the parameters to send to the API endpoint

	for the cancel benefit option override list using p o s t operation.

	Typically these are written to a http.Request.
*/
type CancelBenefitOptionOverrideListUsingPOSTParams struct {

	/* BenefitDescription.

	   benefitDescription
	*/
	BenefitDescription *string

	/* DeleteAll.

	   deleteAll
	*/
	DeleteAll *bool

	// Description.
	Description *string

	// EffectiveDate.
	EffectiveDate *string

	// ExpirationDate.
	ExpirationDate *string

	/* IsBenefitOverridden.

	   isBenefitOverridden
	*/
	IsBenefitOverridden *bool

	// LabelAliasName.
	LabelAliasName *string

	/* MemberGroupDescription.

	   memberGroupDescription
	*/
	MemberGroupDescription *string

	// OptionChoiceList0AdjustmentFactor.
	OptionChoiceList0AdjustmentFactor *string

	// OptionChoiceList0Code.
	OptionChoiceList0Code *string

	// OptionChoiceList0Description.
	OptionChoiceList0Description *string

	// OptionChoiceList0Key.
	OptionChoiceList0Key *string

	// OptionChoiceList0Line.
	OptionChoiceList0Line *string

	// Overridden.
	Overridden *bool

	// PolicyNumber.
	PolicyNumber *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat *string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cancel benefit option override list using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithDefaults() *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cancel benefit option override list using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithTimeout(timeout time.Duration) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithContext(ctx context.Context) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithHTTPClient(client *http.Client) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBenefitDescription adds the benefitDescription to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithBenefitDescription(benefitDescription *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetBenefitDescription(benefitDescription)
	return o
}

// SetBenefitDescription adds the benefitDescription to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetBenefitDescription(benefitDescription *string) {
	o.BenefitDescription = benefitDescription
}

// WithDeleteAll adds the deleteAll to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithDeleteAll(deleteAll *bool) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetDeleteAll(deleteAll)
	return o
}

// SetDeleteAll adds the deleteAll to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetDeleteAll(deleteAll *bool) {
	o.DeleteAll = deleteAll
}

// WithDescription adds the description to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithDescription(description *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetDescription(description *string) {
	o.Description = description
}

// WithEffectiveDate adds the effectiveDate to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithEffectiveDate(effectiveDate *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithExpirationDate adds the expirationDate to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithExpirationDate(expirationDate *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetExpirationDate(expirationDate)
	return o
}

// SetExpirationDate adds the expirationDate to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetExpirationDate(expirationDate *string) {
	o.ExpirationDate = expirationDate
}

// WithIsBenefitOverridden adds the isBenefitOverridden to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithIsBenefitOverridden(isBenefitOverridden *bool) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetIsBenefitOverridden(isBenefitOverridden)
	return o
}

// SetIsBenefitOverridden adds the isBenefitOverridden to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetIsBenefitOverridden(isBenefitOverridden *bool) {
	o.IsBenefitOverridden = isBenefitOverridden
}

// WithLabelAliasName adds the labelAliasName to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithLabelAliasName(labelAliasName *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetLabelAliasName(labelAliasName)
	return o
}

// SetLabelAliasName adds the labelAliasName to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetLabelAliasName(labelAliasName *string) {
	o.LabelAliasName = labelAliasName
}

// WithMemberGroupDescription adds the memberGroupDescription to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithMemberGroupDescription(memberGroupDescription *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetMemberGroupDescription(memberGroupDescription)
	return o
}

// SetMemberGroupDescription adds the memberGroupDescription to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetMemberGroupDescription(memberGroupDescription *string) {
	o.MemberGroupDescription = memberGroupDescription
}

// WithOptionChoiceList0AdjustmentFactor adds the optionChoiceList0AdjustmentFactor to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithOptionChoiceList0AdjustmentFactor(optionChoiceList0AdjustmentFactor *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetOptionChoiceList0AdjustmentFactor(optionChoiceList0AdjustmentFactor)
	return o
}

// SetOptionChoiceList0AdjustmentFactor adds the optionChoiceList0AdjustmentFactor to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetOptionChoiceList0AdjustmentFactor(optionChoiceList0AdjustmentFactor *string) {
	o.OptionChoiceList0AdjustmentFactor = optionChoiceList0AdjustmentFactor
}

// WithOptionChoiceList0Code adds the optionChoiceList0Code to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithOptionChoiceList0Code(optionChoiceList0Code *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetOptionChoiceList0Code(optionChoiceList0Code)
	return o
}

// SetOptionChoiceList0Code adds the optionChoiceList0Code to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetOptionChoiceList0Code(optionChoiceList0Code *string) {
	o.OptionChoiceList0Code = optionChoiceList0Code
}

// WithOptionChoiceList0Description adds the optionChoiceList0Description to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithOptionChoiceList0Description(optionChoiceList0Description *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetOptionChoiceList0Description(optionChoiceList0Description)
	return o
}

// SetOptionChoiceList0Description adds the optionChoiceList0Description to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetOptionChoiceList0Description(optionChoiceList0Description *string) {
	o.OptionChoiceList0Description = optionChoiceList0Description
}

// WithOptionChoiceList0Key adds the optionChoiceList0Key to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithOptionChoiceList0Key(optionChoiceList0Key *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetOptionChoiceList0Key(optionChoiceList0Key)
	return o
}

// SetOptionChoiceList0Key adds the optionChoiceList0Key to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetOptionChoiceList0Key(optionChoiceList0Key *string) {
	o.OptionChoiceList0Key = optionChoiceList0Key
}

// WithOptionChoiceList0Line adds the optionChoiceList0Line to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithOptionChoiceList0Line(optionChoiceList0Line *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetOptionChoiceList0Line(optionChoiceList0Line)
	return o
}

// SetOptionChoiceList0Line adds the optionChoiceList0Line to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetOptionChoiceList0Line(optionChoiceList0Line *string) {
	o.OptionChoiceList0Line = optionChoiceList0Line
}

// WithOverridden adds the overridden to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithOverridden(overridden *bool) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetOverridden(overridden)
	return o
}

// SetOverridden adds the overridden to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetOverridden(overridden *bool) {
	o.Overridden = overridden
}

// WithPolicyNumber adds the policyNumber to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithPolicyNumber(policyNumber *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetPolicyNumber(policyNumber *string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithRequestApplication(requestApplication *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithRequestUser(requestUser *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithVarianceFormat adds the varianceFormat to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithVarianceFormat(varianceFormat *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetVarianceFormat(varianceFormat *string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WithVarianceLevel(varianceLevel *string) *CancelBenefitOptionOverrideListUsingPOSTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the cancel benefit option override list using p o s t params
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *CancelBenefitOptionOverrideListUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BenefitDescription != nil {

		// query param benefitDescription
		var qrBenefitDescription string

		if o.BenefitDescription != nil {
			qrBenefitDescription = *o.BenefitDescription
		}
		qBenefitDescription := qrBenefitDescription
		if qBenefitDescription != "" {

			if err := r.SetQueryParam("benefitDescription", qBenefitDescription); err != nil {
				return err
			}
		}
	}

	if o.DeleteAll != nil {

		// query param deleteAll
		var qrDeleteAll bool

		if o.DeleteAll != nil {
			qrDeleteAll = *o.DeleteAll
		}
		qDeleteAll := swag.FormatBool(qrDeleteAll)
		if qDeleteAll != "" {

			if err := r.SetQueryParam("deleteAll", qDeleteAll); err != nil {
				return err
			}
		}
	}

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.ExpirationDate != nil {

		// query param expirationDate
		var qrExpirationDate string

		if o.ExpirationDate != nil {
			qrExpirationDate = *o.ExpirationDate
		}
		qExpirationDate := qrExpirationDate
		if qExpirationDate != "" {

			if err := r.SetQueryParam("expirationDate", qExpirationDate); err != nil {
				return err
			}
		}
	}

	if o.IsBenefitOverridden != nil {

		// query param isBenefitOverridden
		var qrIsBenefitOverridden bool

		if o.IsBenefitOverridden != nil {
			qrIsBenefitOverridden = *o.IsBenefitOverridden
		}
		qIsBenefitOverridden := swag.FormatBool(qrIsBenefitOverridden)
		if qIsBenefitOverridden != "" {

			if err := r.SetQueryParam("isBenefitOverridden", qIsBenefitOverridden); err != nil {
				return err
			}
		}
	}

	if o.LabelAliasName != nil {

		// query param labelAliasName
		var qrLabelAliasName string

		if o.LabelAliasName != nil {
			qrLabelAliasName = *o.LabelAliasName
		}
		qLabelAliasName := qrLabelAliasName
		if qLabelAliasName != "" {

			if err := r.SetQueryParam("labelAliasName", qLabelAliasName); err != nil {
				return err
			}
		}
	}

	if o.MemberGroupDescription != nil {

		// query param memberGroupDescription
		var qrMemberGroupDescription string

		if o.MemberGroupDescription != nil {
			qrMemberGroupDescription = *o.MemberGroupDescription
		}
		qMemberGroupDescription := qrMemberGroupDescription
		if qMemberGroupDescription != "" {

			if err := r.SetQueryParam("memberGroupDescription", qMemberGroupDescription); err != nil {
				return err
			}
		}
	}

	if o.OptionChoiceList0AdjustmentFactor != nil {

		// query param optionChoiceList[0].adjustmentFactor
		var qrOptionChoiceList0AdjustmentFactor string

		if o.OptionChoiceList0AdjustmentFactor != nil {
			qrOptionChoiceList0AdjustmentFactor = *o.OptionChoiceList0AdjustmentFactor
		}
		qOptionChoiceList0AdjustmentFactor := qrOptionChoiceList0AdjustmentFactor
		if qOptionChoiceList0AdjustmentFactor != "" {

			if err := r.SetQueryParam("optionChoiceList[0].adjustmentFactor", qOptionChoiceList0AdjustmentFactor); err != nil {
				return err
			}
		}
	}

	if o.OptionChoiceList0Code != nil {

		// query param optionChoiceList[0].code
		var qrOptionChoiceList0Code string

		if o.OptionChoiceList0Code != nil {
			qrOptionChoiceList0Code = *o.OptionChoiceList0Code
		}
		qOptionChoiceList0Code := qrOptionChoiceList0Code
		if qOptionChoiceList0Code != "" {

			if err := r.SetQueryParam("optionChoiceList[0].code", qOptionChoiceList0Code); err != nil {
				return err
			}
		}
	}

	if o.OptionChoiceList0Description != nil {

		// query param optionChoiceList[0].description
		var qrOptionChoiceList0Description string

		if o.OptionChoiceList0Description != nil {
			qrOptionChoiceList0Description = *o.OptionChoiceList0Description
		}
		qOptionChoiceList0Description := qrOptionChoiceList0Description
		if qOptionChoiceList0Description != "" {

			if err := r.SetQueryParam("optionChoiceList[0].description", qOptionChoiceList0Description); err != nil {
				return err
			}
		}
	}

	if o.OptionChoiceList0Key != nil {

		// query param optionChoiceList[0].key
		var qrOptionChoiceList0Key string

		if o.OptionChoiceList0Key != nil {
			qrOptionChoiceList0Key = *o.OptionChoiceList0Key
		}
		qOptionChoiceList0Key := qrOptionChoiceList0Key
		if qOptionChoiceList0Key != "" {

			if err := r.SetQueryParam("optionChoiceList[0].key", qOptionChoiceList0Key); err != nil {
				return err
			}
		}
	}

	if o.OptionChoiceList0Line != nil {

		// query param optionChoiceList[0].line
		var qrOptionChoiceList0Line string

		if o.OptionChoiceList0Line != nil {
			qrOptionChoiceList0Line = *o.OptionChoiceList0Line
		}
		qOptionChoiceList0Line := qrOptionChoiceList0Line
		if qOptionChoiceList0Line != "" {

			if err := r.SetQueryParam("optionChoiceList[0].line", qOptionChoiceList0Line); err != nil {
				return err
			}
		}
	}

	if o.Overridden != nil {

		// query param overridden
		var qrOverridden bool

		if o.Overridden != nil {
			qrOverridden = *o.Overridden
		}
		qOverridden := swag.FormatBool(qrOverridden)
		if qOverridden != "" {

			if err := r.SetQueryParam("overridden", qOverridden); err != nil {
				return err
			}
		}
	}

	if o.PolicyNumber != nil {

		// query param policyNumber
		var qrPolicyNumber string

		if o.PolicyNumber != nil {
			qrPolicyNumber = *o.PolicyNumber
		}
		qPolicyNumber := qrPolicyNumber
		if qPolicyNumber != "" {

			if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}

	if o.VarianceFormat != nil {

		// query param varianceFormat
		var qrVarianceFormat string

		if o.VarianceFormat != nil {
			qrVarianceFormat = *o.VarianceFormat
		}
		qVarianceFormat := qrVarianceFormat
		if qVarianceFormat != "" {

			if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
				return err
			}
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
