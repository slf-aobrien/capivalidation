// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyInfo PolicyInfo
//
// swagger:model PolicyInfo
type PolicyInfo struct {

	// account no
	AccountNo string `json:"accountNo,omitempty"`

	// admin sys
	AdminSys string `json:"adminSys,omitempty"`

	// cmcn date
	CmcnDate string `json:"cmcnDate,omitempty"`

	// part no
	PartNo string `json:"partNo,omitempty"`

	// plan name
	PlanName string `json:"planName,omitempty"`

	// policy number
	PolicyNumber string `json:"policyNumber,omitempty"`

	// schm ids
	SchmIds *SchemeIds `json:"schmIds,omitempty"`
}

// Validate validates this policy info
func (m *PolicyInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchmIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyInfo) validateSchmIds(formats strfmt.Registry) error {
	if swag.IsZero(m.SchmIds) { // not required
		return nil
	}

	if m.SchmIds != nil {
		if err := m.SchmIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schmIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schmIds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy info based on the context it is used
func (m *PolicyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSchmIds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyInfo) contextValidateSchmIds(ctx context.Context, formats strfmt.Registry) error {

	if m.SchmIds != nil {

		if swag.IsZero(m.SchmIds) { // not required
			return nil
		}

		if err := m.SchmIds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schmIds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schmIds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyInfo) UnmarshalBinary(b []byte) error {
	var res PolicyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
