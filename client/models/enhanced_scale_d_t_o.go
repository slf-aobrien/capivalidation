// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EnhancedScaleDTO EnhancedScaleDTO
//
// swagger:model EnhancedScaleDTO
type EnhancedScaleDTO struct {

	// description
	Description string `json:"description,omitempty"`

	// enhanced rate tranch list
	EnhancedRateTranchList []*EnhancedRateTranchDTO `json:"enhancedRateTranchList"`

	// frequency
	Frequency string `json:"frequency,omitempty"`

	// interpolation
	Interpolation string `json:"interpolation,omitempty"`

	// new enhanced scale
	NewEnhancedScale bool `json:"newEnhancedScale,omitempty"`

	// rate change
	RateChange bool `json:"rateChange,omitempty"`

	// rate effective date
	RateEffectiveDate string `json:"rateEffectiveDate,omitempty"`

	// scale Id
	ScaleID string `json:"scaleId,omitempty"`

	// system benefit
	SystemBenefit string `json:"systemBenefit,omitempty"`

	// system scale Id
	SystemScaleID string `json:"systemScaleId,omitempty"`

	// unit
	Unit string `json:"unit,omitempty"`
}

// Validate validates this enhanced scale d t o
func (m *EnhancedScaleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnhancedRateTranchList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnhancedScaleDTO) validateEnhancedRateTranchList(formats strfmt.Registry) error {
	if swag.IsZero(m.EnhancedRateTranchList) { // not required
		return nil
	}

	for i := 0; i < len(m.EnhancedRateTranchList); i++ {
		if swag.IsZero(m.EnhancedRateTranchList[i]) { // not required
			continue
		}

		if m.EnhancedRateTranchList[i] != nil {
			if err := m.EnhancedRateTranchList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enhancedRateTranchList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enhancedRateTranchList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this enhanced scale d t o based on the context it is used
func (m *EnhancedScaleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnhancedRateTranchList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnhancedScaleDTO) contextValidateEnhancedRateTranchList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnhancedRateTranchList); i++ {

		if m.EnhancedRateTranchList[i] != nil {

			if swag.IsZero(m.EnhancedRateTranchList[i]) { // not required
				return nil
			}

			if err := m.EnhancedRateTranchList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enhancedRateTranchList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("enhancedRateTranchList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnhancedScaleDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnhancedScaleDTO) UnmarshalBinary(b []byte) error {
	var res EnhancedScaleDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
