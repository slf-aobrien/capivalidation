// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdatePolicyDateUsingPUTReader is a Reader for the UpdatePolicyDateUsingPUT structure.
type UpdatePolicyDateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePolicyDateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePolicyDateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdatePolicyDateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePolicyDateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePolicyDateUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePolicyDateUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePolicyDateUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePolicyDateUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/policyDate] updatePolicyDateUsingPUT", response, response.Code())
	}
}

// NewUpdatePolicyDateUsingPUTOK creates a UpdatePolicyDateUsingPUTOK with default headers values
func NewUpdatePolicyDateUsingPUTOK() *UpdatePolicyDateUsingPUTOK {
	return &UpdatePolicyDateUsingPUTOK{}
}

/*
UpdatePolicyDateUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdatePolicyDateUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update policy date using p u t o k response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update policy date using p u t o k response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t o k response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy date using p u t o k response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy date using p u t o k response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update policy date using p u t o k response
func (o *UpdatePolicyDateUsingPUTOK) Code() int {
	return 200
}

func (o *UpdatePolicyDateUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTOK %s", 200, payload)
}

func (o *UpdatePolicyDateUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTOK %s", 200, payload)
}

func (o *UpdatePolicyDateUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdatePolicyDateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyDateUsingPUTCreated creates a UpdatePolicyDateUsingPUTCreated with default headers values
func NewUpdatePolicyDateUsingPUTCreated() *UpdatePolicyDateUsingPUTCreated {
	return &UpdatePolicyDateUsingPUTCreated{}
}

/*
UpdatePolicyDateUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdatePolicyDateUsingPUTCreated struct {
}

// IsSuccess returns true when this update policy date using p u t created response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update policy date using p u t created response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t created response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy date using p u t created response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy date using p u t created response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update policy date using p u t created response
func (o *UpdatePolicyDateUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdatePolicyDateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTCreated", 201)
}

func (o *UpdatePolicyDateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTCreated", 201)
}

func (o *UpdatePolicyDateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyDateUsingPUTBadRequest creates a UpdatePolicyDateUsingPUTBadRequest with default headers values
func NewUpdatePolicyDateUsingPUTBadRequest() *UpdatePolicyDateUsingPUTBadRequest {
	return &UpdatePolicyDateUsingPUTBadRequest{}
}

/*
UpdatePolicyDateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdatePolicyDateUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update policy date using p u t bad request response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy date using p u t bad request response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t bad request response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy date using p u t bad request response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy date using p u t bad request response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update policy date using p u t bad request response
func (o *UpdatePolicyDateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdatePolicyDateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTBadRequest", 400)
}

func (o *UpdatePolicyDateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTBadRequest", 400)
}

func (o *UpdatePolicyDateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyDateUsingPUTUnauthorized creates a UpdatePolicyDateUsingPUTUnauthorized with default headers values
func NewUpdatePolicyDateUsingPUTUnauthorized() *UpdatePolicyDateUsingPUTUnauthorized {
	return &UpdatePolicyDateUsingPUTUnauthorized{}
}

/*
UpdatePolicyDateUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdatePolicyDateUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update policy date using p u t unauthorized response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy date using p u t unauthorized response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t unauthorized response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy date using p u t unauthorized response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy date using p u t unauthorized response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update policy date using p u t unauthorized response
func (o *UpdatePolicyDateUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdatePolicyDateUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTUnauthorized", 401)
}

func (o *UpdatePolicyDateUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTUnauthorized", 401)
}

func (o *UpdatePolicyDateUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyDateUsingPUTForbidden creates a UpdatePolicyDateUsingPUTForbidden with default headers values
func NewUpdatePolicyDateUsingPUTForbidden() *UpdatePolicyDateUsingPUTForbidden {
	return &UpdatePolicyDateUsingPUTForbidden{}
}

/*
UpdatePolicyDateUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdatePolicyDateUsingPUTForbidden struct {
}

// IsSuccess returns true when this update policy date using p u t forbidden response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy date using p u t forbidden response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t forbidden response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy date using p u t forbidden response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy date using p u t forbidden response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update policy date using p u t forbidden response
func (o *UpdatePolicyDateUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdatePolicyDateUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTForbidden", 403)
}

func (o *UpdatePolicyDateUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTForbidden", 403)
}

func (o *UpdatePolicyDateUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyDateUsingPUTNotFound creates a UpdatePolicyDateUsingPUTNotFound with default headers values
func NewUpdatePolicyDateUsingPUTNotFound() *UpdatePolicyDateUsingPUTNotFound {
	return &UpdatePolicyDateUsingPUTNotFound{}
}

/*
UpdatePolicyDateUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdatePolicyDateUsingPUTNotFound struct {
}

// IsSuccess returns true when this update policy date using p u t not found response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy date using p u t not found response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t not found response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy date using p u t not found response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy date using p u t not found response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update policy date using p u t not found response
func (o *UpdatePolicyDateUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdatePolicyDateUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTNotFound", 404)
}

func (o *UpdatePolicyDateUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTNotFound", 404)
}

func (o *UpdatePolicyDateUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyDateUsingPUTInternalServerError creates a UpdatePolicyDateUsingPUTInternalServerError with default headers values
func NewUpdatePolicyDateUsingPUTInternalServerError() *UpdatePolicyDateUsingPUTInternalServerError {
	return &UpdatePolicyDateUsingPUTInternalServerError{}
}

/*
UpdatePolicyDateUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdatePolicyDateUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update policy date using p u t internal server error response has a 2xx status code
func (o *UpdatePolicyDateUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy date using p u t internal server error response has a 3xx status code
func (o *UpdatePolicyDateUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy date using p u t internal server error response has a 4xx status code
func (o *UpdatePolicyDateUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy date using p u t internal server error response has a 5xx status code
func (o *UpdatePolicyDateUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update policy date using p u t internal server error response a status code equal to that given
func (o *UpdatePolicyDateUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update policy date using p u t internal server error response
func (o *UpdatePolicyDateUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdatePolicyDateUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTInternalServerError", 500)
}

func (o *UpdatePolicyDateUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/policyDate][%d] updatePolicyDateUsingPUTInternalServerError", 500)
}

func (o *UpdatePolicyDateUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
