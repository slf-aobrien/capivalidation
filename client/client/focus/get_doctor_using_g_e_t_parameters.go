// Code generated by go-swagger; DO NOT EDIT.

package focus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetDoctorUsingGETParams creates a new GetDoctorUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetDoctorUsingGETParams() *GetDoctorUsingGETParams {
	return &GetDoctorUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetDoctorUsingGETParamsWithTimeout creates a new GetDoctorUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetDoctorUsingGETParamsWithTimeout(timeout time.Duration) *GetDoctorUsingGETParams {
	return &GetDoctorUsingGETParams{
		timeout: timeout,
	}
}

// NewGetDoctorUsingGETParamsWithContext creates a new GetDoctorUsingGETParams object
// with the ability to set a context for a request.
func NewGetDoctorUsingGETParamsWithContext(ctx context.Context) *GetDoctorUsingGETParams {
	return &GetDoctorUsingGETParams{
		Context: ctx,
	}
}

// NewGetDoctorUsingGETParamsWithHTTPClient creates a new GetDoctorUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetDoctorUsingGETParamsWithHTTPClient(client *http.Client) *GetDoctorUsingGETParams {
	return &GetDoctorUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetDoctorUsingGETParams contains all the parameters to send to the API endpoint

	for the get doctor using g e t operation.

	Typically these are written to a http.Request.
*/
type GetDoctorUsingGETParams struct {

	/* FacilityNumber.

	   facilityNumber
	*/
	FacilityNumber string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get doctor using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDoctorUsingGETParams) WithDefaults() *GetDoctorUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get doctor using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetDoctorUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) WithTimeout(timeout time.Duration) *GetDoctorUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) WithContext(ctx context.Context) *GetDoctorUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) WithHTTPClient(client *http.Client) *GetDoctorUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFacilityNumber adds the facilityNumber to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) WithFacilityNumber(facilityNumber string) *GetDoctorUsingGETParams {
	o.SetFacilityNumber(facilityNumber)
	return o
}

// SetFacilityNumber adds the facilityNumber to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) SetFacilityNumber(facilityNumber string) {
	o.FacilityNumber = facilityNumber
}

// WithRequestApplication adds the requestApplication to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) WithRequestApplication(requestApplication string) *GetDoctorUsingGETParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) WithRequestUser(requestUser string) *GetDoctorUsingGETParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the get doctor using g e t params
func (o *GetDoctorUsingGETParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WriteToRequest writes these params to a swagger request
func (o *GetDoctorUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param facilityNumber
	qrFacilityNumber := o.FacilityNumber
	qFacilityNumber := qrFacilityNumber
	if qFacilityNumber != "" {

		if err := r.SetQueryParam("facilityNumber", qFacilityNumber); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
