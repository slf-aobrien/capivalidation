// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAccreditationUsingGET2Params creates a new GetAccreditationUsingGET2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAccreditationUsingGET2Params() *GetAccreditationUsingGET2Params {
	return &GetAccreditationUsingGET2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccreditationUsingGET2ParamsWithTimeout creates a new GetAccreditationUsingGET2Params object
// with the ability to set a timeout on a request.
func NewGetAccreditationUsingGET2ParamsWithTimeout(timeout time.Duration) *GetAccreditationUsingGET2Params {
	return &GetAccreditationUsingGET2Params{
		timeout: timeout,
	}
}

// NewGetAccreditationUsingGET2ParamsWithContext creates a new GetAccreditationUsingGET2Params object
// with the ability to set a context for a request.
func NewGetAccreditationUsingGET2ParamsWithContext(ctx context.Context) *GetAccreditationUsingGET2Params {
	return &GetAccreditationUsingGET2Params{
		Context: ctx,
	}
}

// NewGetAccreditationUsingGET2ParamsWithHTTPClient creates a new GetAccreditationUsingGET2Params object
// with the ability to set a custom HTTPClient for a request.
func NewGetAccreditationUsingGET2ParamsWithHTTPClient(client *http.Client) *GetAccreditationUsingGET2Params {
	return &GetAccreditationUsingGET2Params{
		HTTPClient: client,
	}
}

/*
GetAccreditationUsingGET2Params contains all the parameters to send to the API endpoint

	for the get accreditation using g e t 2 operation.

	Typically these are written to a http.Request.
*/
type GetAccreditationUsingGET2Params struct {

	/* Description.

	   description
	*/
	Description *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* StateCd.

	   stateCd
	*/
	StateCd *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get accreditation using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccreditationUsingGET2Params) WithDefaults() *GetAccreditationUsingGET2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get accreditation using g e t 2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccreditationUsingGET2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithTimeout(timeout time.Duration) *GetAccreditationUsingGET2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithContext(ctx context.Context) *GetAccreditationUsingGET2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithHTTPClient(client *http.Client) *GetAccreditationUsingGET2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDescription adds the description to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithDescription(description *string) *GetAccreditationUsingGET2Params {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetDescription(description *string) {
	o.Description = description
}

// WithRequestApplication adds the requestApplication to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithRequestApplication(requestApplication *string) *GetAccreditationUsingGET2Params {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithRequestUser(requestUser *string) *GetAccreditationUsingGET2Params {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithStateCd adds the stateCd to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) WithStateCd(stateCd *string) *GetAccreditationUsingGET2Params {
	o.SetStateCd(stateCd)
	return o
}

// SetStateCd adds the stateCd to the get accreditation using g e t 2 params
func (o *GetAccreditationUsingGET2Params) SetStateCd(stateCd *string) {
	o.StateCd = stateCd
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccreditationUsingGET2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Description != nil {

		// query param description
		var qrDescription string

		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {

			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}

	if o.StateCd != nil {

		// query param stateCd
		var qrStateCd string

		if o.StateCd != nil {
			qrStateCd = *o.StateCd
		}
		qStateCd := qrStateCd
		if qStateCd != "" {

			if err := r.SetQueryParam("stateCd", qStateCd); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
