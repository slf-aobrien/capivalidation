// Code generated by go-swagger; DO NOT EDIT.

package focus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// NewInsertDoctorUsingPOSTParams creates a new InsertDoctorUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInsertDoctorUsingPOSTParams() *InsertDoctorUsingPOSTParams {
	return &InsertDoctorUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInsertDoctorUsingPOSTParamsWithTimeout creates a new InsertDoctorUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewInsertDoctorUsingPOSTParamsWithTimeout(timeout time.Duration) *InsertDoctorUsingPOSTParams {
	return &InsertDoctorUsingPOSTParams{
		timeout: timeout,
	}
}

// NewInsertDoctorUsingPOSTParamsWithContext creates a new InsertDoctorUsingPOSTParams object
// with the ability to set a context for a request.
func NewInsertDoctorUsingPOSTParamsWithContext(ctx context.Context) *InsertDoctorUsingPOSTParams {
	return &InsertDoctorUsingPOSTParams{
		Context: ctx,
	}
}

// NewInsertDoctorUsingPOSTParamsWithHTTPClient creates a new InsertDoctorUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewInsertDoctorUsingPOSTParamsWithHTTPClient(client *http.Client) *InsertDoctorUsingPOSTParams {
	return &InsertDoctorUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
InsertDoctorUsingPOSTParams contains all the parameters to send to the API endpoint

	for the insert doctor using p o s t operation.

	Typically these are written to a http.Request.
*/
type InsertDoctorUsingPOSTParams struct {

	/* Doctor.

	   doctor
	*/
	Doctor *models.DoctorDTO

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the insert doctor using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InsertDoctorUsingPOSTParams) WithDefaults() *InsertDoctorUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the insert doctor using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InsertDoctorUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) WithTimeout(timeout time.Duration) *InsertDoctorUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) WithContext(ctx context.Context) *InsertDoctorUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) WithHTTPClient(client *http.Client) *InsertDoctorUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDoctor adds the doctor to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) WithDoctor(doctor *models.DoctorDTO) *InsertDoctorUsingPOSTParams {
	o.SetDoctor(doctor)
	return o
}

// SetDoctor adds the doctor to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) SetDoctor(doctor *models.DoctorDTO) {
	o.Doctor = doctor
}

// WithRequestApplication adds the requestApplication to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) WithRequestApplication(requestApplication string) *InsertDoctorUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) WithRequestUser(requestUser string) *InsertDoctorUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the insert doctor using p o s t params
func (o *InsertDoctorUsingPOSTParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WriteToRequest writes these params to a swagger request
func (o *InsertDoctorUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Doctor != nil {
		if err := r.SetBodyParam(o.Doctor); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
