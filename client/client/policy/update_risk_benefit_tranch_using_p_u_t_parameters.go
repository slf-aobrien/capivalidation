// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"client/models"
)

// NewUpdateRiskBenefitTranchUsingPUTParams creates a new UpdateRiskBenefitTranchUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateRiskBenefitTranchUsingPUTParams() *UpdateRiskBenefitTranchUsingPUTParams {
	return &UpdateRiskBenefitTranchUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateRiskBenefitTranchUsingPUTParamsWithTimeout creates a new UpdateRiskBenefitTranchUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateRiskBenefitTranchUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateRiskBenefitTranchUsingPUTParams {
	return &UpdateRiskBenefitTranchUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateRiskBenefitTranchUsingPUTParamsWithContext creates a new UpdateRiskBenefitTranchUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateRiskBenefitTranchUsingPUTParamsWithContext(ctx context.Context) *UpdateRiskBenefitTranchUsingPUTParams {
	return &UpdateRiskBenefitTranchUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateRiskBenefitTranchUsingPUTParamsWithHTTPClient creates a new UpdateRiskBenefitTranchUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateRiskBenefitTranchUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateRiskBenefitTranchUsingPUTParams {
	return &UpdateRiskBenefitTranchUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateRiskBenefitTranchUsingPUTParams contains all the parameters to send to the API endpoint

	for the update risk benefit tranch using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateRiskBenefitTranchUsingPUTParams struct {

	/* BenefitDescription.

	   benefitDescription
	*/
	BenefitDescription *string

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	/* IsOverridden.

	   isOverridden
	*/
	IsOverridden *bool

	/* IsReplaceExisting.

	   isReplaceExisting
	*/
	IsReplaceExisting *bool

	/* MemberGroupDescription.

	   memberGroupDescription
	*/
	MemberGroupDescription *string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* RiskBenefitTranchDto.

	   riskBenefitTranchDto
	*/
	RiskBenefitTranchDto *models.RiskBenefitTranchDTO

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat *string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update risk benefit tranch using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithDefaults() *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update risk benefit tranch using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithContext(ctx context.Context) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBenefitDescription adds the benefitDescription to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithBenefitDescription(benefitDescription *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetBenefitDescription(benefitDescription)
	return o
}

// SetBenefitDescription adds the benefitDescription to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetBenefitDescription(benefitDescription *string) {
	o.BenefitDescription = benefitDescription
}

// WithEffectiveDate adds the effectiveDate to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithEffectiveDate(effectiveDate *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithIsOverridden adds the isOverridden to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithIsOverridden(isOverridden *bool) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetIsOverridden(isOverridden)
	return o
}

// SetIsOverridden adds the isOverridden to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetIsOverridden(isOverridden *bool) {
	o.IsOverridden = isOverridden
}

// WithIsReplaceExisting adds the isReplaceExisting to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithIsReplaceExisting(isReplaceExisting *bool) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetIsReplaceExisting(isReplaceExisting)
	return o
}

// SetIsReplaceExisting adds the isReplaceExisting to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetIsReplaceExisting(isReplaceExisting *bool) {
	o.IsReplaceExisting = isReplaceExisting
}

// WithMemberGroupDescription adds the memberGroupDescription to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithMemberGroupDescription(memberGroupDescription *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetMemberGroupDescription(memberGroupDescription)
	return o
}

// SetMemberGroupDescription adds the memberGroupDescription to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetMemberGroupDescription(memberGroupDescription *string) {
	o.MemberGroupDescription = memberGroupDescription
}

// WithPolicyNumber adds the policyNumber to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithPolicyNumber(policyNumber *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetPolicyNumber(policyNumber *string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithRequestApplication(requestApplication *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithRequestUser(requestUser *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithRiskBenefitTranchDto adds the riskBenefitTranchDto to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithRiskBenefitTranchDto(riskBenefitTranchDto *models.RiskBenefitTranchDTO) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetRiskBenefitTranchDto(riskBenefitTranchDto)
	return o
}

// SetRiskBenefitTranchDto adds the riskBenefitTranchDto to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetRiskBenefitTranchDto(riskBenefitTranchDto *models.RiskBenefitTranchDTO) {
	o.RiskBenefitTranchDto = riskBenefitTranchDto
}

// WithVarianceFormat adds the varianceFormat to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithVarianceFormat(varianceFormat *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetVarianceFormat(varianceFormat *string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) WithVarianceLevel(varianceLevel *string) *UpdateRiskBenefitTranchUsingPUTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the update risk benefit tranch using p u t params
func (o *UpdateRiskBenefitTranchUsingPUTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateRiskBenefitTranchUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BenefitDescription != nil {

		// query param benefitDescription
		var qrBenefitDescription string

		if o.BenefitDescription != nil {
			qrBenefitDescription = *o.BenefitDescription
		}
		qBenefitDescription := qrBenefitDescription
		if qBenefitDescription != "" {

			if err := r.SetQueryParam("benefitDescription", qBenefitDescription); err != nil {
				return err
			}
		}
	}

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.IsOverridden != nil {

		// query param isOverridden
		var qrIsOverridden bool

		if o.IsOverridden != nil {
			qrIsOverridden = *o.IsOverridden
		}
		qIsOverridden := swag.FormatBool(qrIsOverridden)
		if qIsOverridden != "" {

			if err := r.SetQueryParam("isOverridden", qIsOverridden); err != nil {
				return err
			}
		}
	}

	if o.IsReplaceExisting != nil {

		// query param isReplaceExisting
		var qrIsReplaceExisting bool

		if o.IsReplaceExisting != nil {
			qrIsReplaceExisting = *o.IsReplaceExisting
		}
		qIsReplaceExisting := swag.FormatBool(qrIsReplaceExisting)
		if qIsReplaceExisting != "" {

			if err := r.SetQueryParam("isReplaceExisting", qIsReplaceExisting); err != nil {
				return err
			}
		}
	}

	if o.MemberGroupDescription != nil {

		// query param memberGroupDescription
		var qrMemberGroupDescription string

		if o.MemberGroupDescription != nil {
			qrMemberGroupDescription = *o.MemberGroupDescription
		}
		qMemberGroupDescription := qrMemberGroupDescription
		if qMemberGroupDescription != "" {

			if err := r.SetQueryParam("memberGroupDescription", qMemberGroupDescription); err != nil {
				return err
			}
		}
	}

	if o.PolicyNumber != nil {

		// query param policyNumber
		var qrPolicyNumber string

		if o.PolicyNumber != nil {
			qrPolicyNumber = *o.PolicyNumber
		}
		qPolicyNumber := qrPolicyNumber
		if qPolicyNumber != "" {

			if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}
	if o.RiskBenefitTranchDto != nil {
		if err := r.SetBodyParam(o.RiskBenefitTranchDto); err != nil {
			return err
		}
	}

	if o.VarianceFormat != nil {

		// query param varianceFormat
		var qrVarianceFormat string

		if o.VarianceFormat != nil {
			qrVarianceFormat = *o.VarianceFormat
		}
		qVarianceFormat := qrVarianceFormat
		if qVarianceFormat != "" {

			if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
				return err
			}
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
