// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstallStatusDTOReq InstallStatusDTOReq
//
// swagger:model InstallStatusDTOReq
type InstallStatusDTOReq struct {

	// active issued date
	ActiveIssuedDate string `json:"activeIssuedDate,omitempty"`

	// amendment hold
	AmendmentHold bool `json:"amendmentHold,omitempty"`

	// approved date
	ApprovedDate string `json:"approvedDate,omitempty"`

	// build pending date
	BuildPendingDate string `json:"buildPendingDate,omitempty"`

	// install status
	// Enum: ["ACTIVE_ISSUED","APPROVED","BUILD_PENDING"]
	InstallStatus string `json:"installStatus,omitempty"`

	// status change servicer
	StatusChangeServicer *PersonServicerDTOReq `json:"statusChangeServicer,omitempty"`
}

// Validate validates this install status d t o req
func (m *InstallStatusDTOReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstallStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangeServicer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var installStatusDTOReqTypeInstallStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE_ISSUED","APPROVED","BUILD_PENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		installStatusDTOReqTypeInstallStatusPropEnum = append(installStatusDTOReqTypeInstallStatusPropEnum, v)
	}
}

const (

	// InstallStatusDTOReqInstallStatusACTIVEISSUED captures enum value "ACTIVE_ISSUED"
	InstallStatusDTOReqInstallStatusACTIVEISSUED string = "ACTIVE_ISSUED"

	// InstallStatusDTOReqInstallStatusAPPROVED captures enum value "APPROVED"
	InstallStatusDTOReqInstallStatusAPPROVED string = "APPROVED"

	// InstallStatusDTOReqInstallStatusBUILDPENDING captures enum value "BUILD_PENDING"
	InstallStatusDTOReqInstallStatusBUILDPENDING string = "BUILD_PENDING"
)

// prop value enum
func (m *InstallStatusDTOReq) validateInstallStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, installStatusDTOReqTypeInstallStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InstallStatusDTOReq) validateInstallStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstallStatusEnum("installStatus", "body", m.InstallStatus); err != nil {
		return err
	}

	return nil
}

func (m *InstallStatusDTOReq) validateStatusChangeServicer(formats strfmt.Registry) error {
	if swag.IsZero(m.StatusChangeServicer) { // not required
		return nil
	}

	if m.StatusChangeServicer != nil {
		if err := m.StatusChangeServicer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangeServicer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangeServicer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this install status d t o req based on the context it is used
func (m *InstallStatusDTOReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatusChangeServicer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstallStatusDTOReq) contextValidateStatusChangeServicer(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusChangeServicer != nil {

		if swag.IsZero(m.StatusChangeServicer) { // not required
			return nil
		}

		if err := m.StatusChangeServicer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangeServicer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangeServicer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstallStatusDTOReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstallStatusDTOReq) UnmarshalBinary(b []byte) error {
	var res InstallStatusDTOReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
