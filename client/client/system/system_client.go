// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new system API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new system API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationAebCasSystemGetAccreditationV1JSON sets the Accept header to "application/aeb.cas.system.get.accreditation.v1+json".
func WithAcceptApplicationAebCasSystemGetAccreditationV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.system.get.accreditation.v1+json"}
}

// WithAcceptApplicationAebCasSystemGetBatchcycleV1XML sets the Accept header to "application/aeb.cas.system.get.batchcycle.v1+xml".
func WithAcceptApplicationAebCasSystemGetBatchcycleV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.system.get.batchcycle.v1+xml"}
}

// WithAcceptApplicationAebCasSystemGetErrorV1XML sets the Accept header to "application/aeb.cas.system.get.error.v1+xml".
func WithAcceptApplicationAebCasSystemGetErrorV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.system.get.error.v1+xml"}
}

// WithAcceptApplicationAebCasSystemGetTpaV1XML sets the Accept header to "application/aeb.cas.system.get.tpa.v1+xml".
func WithAcceptApplicationAebCasSystemGetTpaV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.system.get.tpa.v1+xml"}
}

// WithAcceptApplicationAebCasSystemGetVariancedetailsV1XML sets the Accept header to "application/aeb.cas.system.get.variancedetails.v1+xml".
func WithAcceptApplicationAebCasSystemGetVariancedetailsV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.system.get.variancedetails.v1+xml"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	FindRateUsingGET(params *FindRateUsingGETParams, opts ...ClientOption) (*FindRateUsingGETOK, error)

	GetAccreditationUsingGET2(params *GetAccreditationUsingGET2Params, opts ...ClientOption) (*GetAccreditationUsingGET2OK, error)

	GetBatchCycleUsingGET(params *GetBatchCycleUsingGETParams, opts ...ClientOption) (*GetBatchCycleUsingGETOK, error)

	GetDomainUsingGET(params *GetDomainUsingGETParams, opts ...ClientOption) (*GetDomainUsingGETOK, error)

	GetEnumUsingGET(params *GetEnumUsingGETParams, opts ...ClientOption) (*GetEnumUsingGETOK, error)

	GetHoldaysDatesUsingGET(params *GetHoldaysDatesUsingGETParams, opts ...ClientOption) (*GetHoldaysDatesUsingGETOK, error)

	GetSystemErrorMessageUsingGET(params *GetSystemErrorMessageUsingGETParams, opts ...ClientOption) (*GetSystemErrorMessageUsingGETOK, error)

	TpaListUsingGET(params *TpaListUsingGETParams, opts ...ClientOption) (*TpaListUsingGETOK, error)

	VarianceDetailsUsingGET(params *VarianceDetailsUsingGETParams, opts ...ClientOption) (*VarianceDetailsUsingGETOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
FindRateUsingGET rates list method

None
*/
func (a *Client) FindRateUsingGET(params *FindRateUsingGETParams, opts ...ClientOption) (*FindRateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindRateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findRateUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/rates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindRateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindRateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findRateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccreditationUsingGET2 gets sunlife us dc compassintegrationapplication service system accreditation method

None
*/
func (a *Client) GetAccreditationUsingGET2(params *GetAccreditationUsingGET2Params, opts ...ClientOption) (*GetAccreditationUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccreditationUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccreditationUsingGET_2",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.system.get.accreditation.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccreditationUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccreditationUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccreditationUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBatchCycleUsingGET sunlives us dc compassintegrationapplication service system batch cycle method

None
*/
func (a *Client) GetBatchCycleUsingGET(params *GetBatchCycleUsingGETParams, opts ...ClientOption) (*GetBatchCycleUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBatchCycleUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBatchCycleUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/batchCycle",
		ProducesMediaTypes: []string{"application/aeb.cas.system.get.batchcycle.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBatchCycleUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBatchCycleUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBatchCycleUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDomainUsingGET domains values get method

None
*/
func (a *Client) GetDomainUsingGET(params *GetDomainUsingGETParams, opts ...ClientOption) (*GetDomainUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDomainUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/domain",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDomainUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDomainUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEnumUsingGET gets c a s domain values per enum declared in c a s

Provide Enum name to get the domain values for the Enum.
*/
func (a *Client) GetEnumUsingGET(params *GetEnumUsingGETParams, opts ...ClientOption) (*GetEnumUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEnumUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEnumUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/enum",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEnumUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEnumUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEnumUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHoldaysDatesUsingGET gets holdays dates
*/
func (a *Client) GetHoldaysDatesUsingGET(params *GetHoldaysDatesUsingGETParams, opts ...ClientOption) (*GetHoldaysDatesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHoldaysDatesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHoldaysDatesUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/holidays",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHoldaysDatesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHoldaysDatesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHoldaysDatesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSystemErrorMessageUsingGET sunlives us dc compassintegrationapplication service system error method

None
*/
func (a *Client) GetSystemErrorMessageUsingGET(params *GetSystemErrorMessageUsingGETParams, opts ...ClientOption) (*GetSystemErrorMessageUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSystemErrorMessageUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSystemErrorMessageUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/error",
		ProducesMediaTypes: []string{"application/aeb.cas.system.get.error.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSystemErrorMessageUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSystemErrorMessageUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSystemErrorMessageUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TpaListUsingGET ts p a list method

None
*/
func (a *Client) TpaListUsingGET(params *TpaListUsingGETParams, opts ...ClientOption) (*TpaListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTpaListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "tpaListUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/tpa",
		ProducesMediaTypes: []string{"application/aeb.cas.system.get.tpa.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TpaListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TpaListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for tpaListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VarianceDetailsUsingGET variances details get method

None
*/
func (a *Client) VarianceDetailsUsingGET(params *VarianceDetailsUsingGETParams, opts ...ClientOption) (*VarianceDetailsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVarianceDetailsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "varianceDetailsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/system/varianceDetails",
		ProducesMediaTypes: []string{"application/aeb.cas.system.get.variancedetails.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VarianceDetailsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VarianceDetailsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for varianceDetailsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
