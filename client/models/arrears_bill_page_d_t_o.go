// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ArrearsBillPageDTO ArrearsBillPageDTO
//
// swagger:model ArrearsBillPageDTO
type ArrearsBillPageDTO struct {

	// arrears adjustments d t o list
	ArrearsAdjustmentsDTOList []*AdjustmentsDTO `json:"arrearsAdjustmentsDTOList"`

	// arrears member department d t o list
	ArrearsMemberDepartmentDTOList []*ArrearsMemberDepartmentDTO `json:"arrearsMemberDepartmentDTOList"`

	// arrears remittance d t o
	ArrearsRemittanceDTO *ArrearsRemittanceDTO `json:"arrearsRemittanceDTO,omitempty"`

	// arrears summary d t o list
	ArrearsSummaryDTOList []*ArrearsSummaryDTO `json:"arrearsSummaryDTOList"`
}

// Validate validates this arrears bill page d t o
func (m *ArrearsBillPageDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrearsAdjustmentsDTOList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrearsMemberDepartmentDTOList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrearsRemittanceDTO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateArrearsSummaryDTOList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArrearsBillPageDTO) validateArrearsAdjustmentsDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrearsAdjustmentsDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.ArrearsAdjustmentsDTOList); i++ {
		if swag.IsZero(m.ArrearsAdjustmentsDTOList[i]) { // not required
			continue
		}

		if m.ArrearsAdjustmentsDTOList[i] != nil {
			if err := m.ArrearsAdjustmentsDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsAdjustmentsDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsAdjustmentsDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArrearsBillPageDTO) validateArrearsMemberDepartmentDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrearsMemberDepartmentDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.ArrearsMemberDepartmentDTOList); i++ {
		if swag.IsZero(m.ArrearsMemberDepartmentDTOList[i]) { // not required
			continue
		}

		if m.ArrearsMemberDepartmentDTOList[i] != nil {
			if err := m.ArrearsMemberDepartmentDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArrearsBillPageDTO) validateArrearsRemittanceDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrearsRemittanceDTO) { // not required
		return nil
	}

	if m.ArrearsRemittanceDTO != nil {
		if err := m.ArrearsRemittanceDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arrearsRemittanceDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arrearsRemittanceDTO")
			}
			return err
		}
	}

	return nil
}

func (m *ArrearsBillPageDTO) validateArrearsSummaryDTOList(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrearsSummaryDTOList) { // not required
		return nil
	}

	for i := 0; i < len(m.ArrearsSummaryDTOList); i++ {
		if swag.IsZero(m.ArrearsSummaryDTOList[i]) { // not required
			continue
		}

		if m.ArrearsSummaryDTOList[i] != nil {
			if err := m.ArrearsSummaryDTOList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsSummaryDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsSummaryDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this arrears bill page d t o based on the context it is used
func (m *ArrearsBillPageDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArrearsAdjustmentsDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArrearsMemberDepartmentDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArrearsRemittanceDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateArrearsSummaryDTOList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ArrearsBillPageDTO) contextValidateArrearsAdjustmentsDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArrearsAdjustmentsDTOList); i++ {

		if m.ArrearsAdjustmentsDTOList[i] != nil {

			if swag.IsZero(m.ArrearsAdjustmentsDTOList[i]) { // not required
				return nil
			}

			if err := m.ArrearsAdjustmentsDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsAdjustmentsDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsAdjustmentsDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArrearsBillPageDTO) contextValidateArrearsMemberDepartmentDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArrearsMemberDepartmentDTOList); i++ {

		if m.ArrearsMemberDepartmentDTOList[i] != nil {

			if swag.IsZero(m.ArrearsMemberDepartmentDTOList[i]) { // not required
				return nil
			}

			if err := m.ArrearsMemberDepartmentDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsMemberDepartmentDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ArrearsBillPageDTO) contextValidateArrearsRemittanceDTO(ctx context.Context, formats strfmt.Registry) error {

	if m.ArrearsRemittanceDTO != nil {

		if swag.IsZero(m.ArrearsRemittanceDTO) { // not required
			return nil
		}

		if err := m.ArrearsRemittanceDTO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("arrearsRemittanceDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("arrearsRemittanceDTO")
			}
			return err
		}
	}

	return nil
}

func (m *ArrearsBillPageDTO) contextValidateArrearsSummaryDTOList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ArrearsSummaryDTOList); i++ {

		if m.ArrearsSummaryDTOList[i] != nil {

			if swag.IsZero(m.ArrearsSummaryDTOList[i]) { // not required
				return nil
			}

			if err := m.ArrearsSummaryDTOList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("arrearsSummaryDTOList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("arrearsSummaryDTOList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ArrearsBillPageDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArrearsBillPageDTO) UnmarshalBinary(b []byte) error {
	var res ArrearsBillPageDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
