// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdatePolicyContactUsingPUTParams creates a new UpdatePolicyContactUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdatePolicyContactUsingPUTParams() *UpdatePolicyContactUsingPUTParams {
	return &UpdatePolicyContactUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdatePolicyContactUsingPUTParamsWithTimeout creates a new UpdatePolicyContactUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdatePolicyContactUsingPUTParamsWithTimeout(timeout time.Duration) *UpdatePolicyContactUsingPUTParams {
	return &UpdatePolicyContactUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdatePolicyContactUsingPUTParamsWithContext creates a new UpdatePolicyContactUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdatePolicyContactUsingPUTParamsWithContext(ctx context.Context) *UpdatePolicyContactUsingPUTParams {
	return &UpdatePolicyContactUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdatePolicyContactUsingPUTParamsWithHTTPClient creates a new UpdatePolicyContactUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdatePolicyContactUsingPUTParamsWithHTTPClient(client *http.Client) *UpdatePolicyContactUsingPUTParams {
	return &UpdatePolicyContactUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdatePolicyContactUsingPUTParams contains all the parameters to send to the API endpoint

	for the update policy contact using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdatePolicyContactUsingPUTParams struct {

	// AddressCity.
	AddressCity *string

	// AddressCountry.
	AddressCountry *string

	// AddressEffectiveDate.
	AddressEffectiveDate *string

	// AddressExpireDate.
	AddressExpireDate *string

	// AddressID.
	AddressID *string

	// AddressLine1.
	AddressLine1 *string

	// AddressLine2.
	AddressLine2 *string

	// AddressLine3.
	AddressLine3 *string

	// AddressState.
	AddressState *string

	// AddressType.
	AddressType *string

	// AddressZip.
	AddressZip *string

	// ContactType.
	ContactType *string

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	// EmailEmailAddress.
	EmailEmailAddress *string

	// EmailID.
	EmailID *string

	// EmailType.
	EmailType *string

	/* ExpirationDate.

	   expirationDate
	*/
	ExpirationDate *string

	// FaxEffectiveDate.
	FaxEffectiveDate *string

	// FaxExpireDate.
	FaxExpireDate *string

	// FaxExtension.
	FaxExtension *string

	// FaxID.
	FaxID *string

	// FaxPhoneNumber.
	FaxPhoneNumber *string

	// FaxType.
	FaxType *string

	// InterfaceID.
	InterfaceID *string

	// Key.
	Key *string

	// PersonAuditID.
	PersonAuditID *string

	// PersonBirthDate.
	PersonBirthDate *string

	// PersonBirthDateAsDate.
	//
	// Format: date-time
	PersonBirthDateAsDate *strfmt.DateTime

	// PersonClientID.
	PersonClientID *string

	// PersonFirstName.
	PersonFirstName *string

	// PersonGender.
	PersonGender *string

	// PersonHeight.
	PersonHeight *string

	// PersonLastName.
	PersonLastName *string

	// PersonMaritalStatus.
	PersonMaritalStatus *string

	// PersonMiddleName.
	PersonMiddleName *string

	// PersonNamePrefix.
	PersonNamePrefix *string

	// PersonNameSuffix.
	PersonNameSuffix *string

	// PersonPassportNumber.
	PersonPassportNumber *string

	// PersonPreferredLanguage.
	PersonPreferredLanguage *string

	// PersonSocialSecurityNumber.
	PersonSocialSecurityNumber *string

	// PersonWeight.
	PersonWeight *string

	// PhoneEffectiveDate.
	PhoneEffectiveDate *string

	// PhoneExpireDate.
	PhoneExpireDate *string

	// PhoneExtension.
	PhoneExtension *string

	// PhoneID.
	PhoneID *string

	// PhonePhoneNumber.
	PhonePhoneNumber *string

	// PhoneType.
	PhoneType *string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat *string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update policy contact using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdatePolicyContactUsingPUTParams) WithDefaults() *UpdatePolicyContactUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update policy contact using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdatePolicyContactUsingPUTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithTimeout(timeout time.Duration) *UpdatePolicyContactUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithContext(ctx context.Context) *UpdatePolicyContactUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithHTTPClient(client *http.Client) *UpdatePolicyContactUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddressCity adds the addressCity to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressCity(addressCity *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressCity(addressCity)
	return o
}

// SetAddressCity adds the addressCity to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressCity(addressCity *string) {
	o.AddressCity = addressCity
}

// WithAddressCountry adds the addressCountry to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressCountry(addressCountry *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressCountry(addressCountry)
	return o
}

// SetAddressCountry adds the addressCountry to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressCountry(addressCountry *string) {
	o.AddressCountry = addressCountry
}

// WithAddressEffectiveDate adds the addressEffectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressEffectiveDate(addressEffectiveDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressEffectiveDate(addressEffectiveDate)
	return o
}

// SetAddressEffectiveDate adds the addressEffectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressEffectiveDate(addressEffectiveDate *string) {
	o.AddressEffectiveDate = addressEffectiveDate
}

// WithAddressExpireDate adds the addressExpireDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressExpireDate(addressExpireDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressExpireDate(addressExpireDate)
	return o
}

// SetAddressExpireDate adds the addressExpireDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressExpireDate(addressExpireDate *string) {
	o.AddressExpireDate = addressExpireDate
}

// WithAddressID adds the addressID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressID(addressID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressID(addressID)
	return o
}

// SetAddressID adds the addressId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressID(addressID *string) {
	o.AddressID = addressID
}

// WithAddressLine1 adds the addressLine1 to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressLine1(addressLine1 *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressLine1(addressLine1)
	return o
}

// SetAddressLine1 adds the addressLine1 to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressLine1(addressLine1 *string) {
	o.AddressLine1 = addressLine1
}

// WithAddressLine2 adds the addressLine2 to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressLine2(addressLine2 *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressLine2(addressLine2)
	return o
}

// SetAddressLine2 adds the addressLine2 to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressLine2(addressLine2 *string) {
	o.AddressLine2 = addressLine2
}

// WithAddressLine3 adds the addressLine3 to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressLine3(addressLine3 *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressLine3(addressLine3)
	return o
}

// SetAddressLine3 adds the addressLine3 to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressLine3(addressLine3 *string) {
	o.AddressLine3 = addressLine3
}

// WithAddressState adds the addressState to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressState(addressState *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressState(addressState)
	return o
}

// SetAddressState adds the addressState to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressState(addressState *string) {
	o.AddressState = addressState
}

// WithAddressType adds the addressType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressType(addressType *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressType(addressType)
	return o
}

// SetAddressType adds the addressType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressType(addressType *string) {
	o.AddressType = addressType
}

// WithAddressZip adds the addressZip to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithAddressZip(addressZip *string) *UpdatePolicyContactUsingPUTParams {
	o.SetAddressZip(addressZip)
	return o
}

// SetAddressZip adds the addressZip to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetAddressZip(addressZip *string) {
	o.AddressZip = addressZip
}

// WithContactType adds the contactType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithContactType(contactType *string) *UpdatePolicyContactUsingPUTParams {
	o.SetContactType(contactType)
	return o
}

// SetContactType adds the contactType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetContactType(contactType *string) {
	o.ContactType = contactType
}

// WithEffectiveDate adds the effectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithEffectiveDate(effectiveDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithEmailEmailAddress adds the emailEmailAddress to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithEmailEmailAddress(emailEmailAddress *string) *UpdatePolicyContactUsingPUTParams {
	o.SetEmailEmailAddress(emailEmailAddress)
	return o
}

// SetEmailEmailAddress adds the emailEmailAddress to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetEmailEmailAddress(emailEmailAddress *string) {
	o.EmailEmailAddress = emailEmailAddress
}

// WithEmailID adds the emailID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithEmailID(emailID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetEmailID(emailID)
	return o
}

// SetEmailID adds the emailId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetEmailID(emailID *string) {
	o.EmailID = emailID
}

// WithEmailType adds the emailType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithEmailType(emailType *string) *UpdatePolicyContactUsingPUTParams {
	o.SetEmailType(emailType)
	return o
}

// SetEmailType adds the emailType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetEmailType(emailType *string) {
	o.EmailType = emailType
}

// WithExpirationDate adds the expirationDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithExpirationDate(expirationDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetExpirationDate(expirationDate)
	return o
}

// SetExpirationDate adds the expirationDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetExpirationDate(expirationDate *string) {
	o.ExpirationDate = expirationDate
}

// WithFaxEffectiveDate adds the faxEffectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithFaxEffectiveDate(faxEffectiveDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetFaxEffectiveDate(faxEffectiveDate)
	return o
}

// SetFaxEffectiveDate adds the faxEffectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetFaxEffectiveDate(faxEffectiveDate *string) {
	o.FaxEffectiveDate = faxEffectiveDate
}

// WithFaxExpireDate adds the faxExpireDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithFaxExpireDate(faxExpireDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetFaxExpireDate(faxExpireDate)
	return o
}

// SetFaxExpireDate adds the faxExpireDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetFaxExpireDate(faxExpireDate *string) {
	o.FaxExpireDate = faxExpireDate
}

// WithFaxExtension adds the faxExtension to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithFaxExtension(faxExtension *string) *UpdatePolicyContactUsingPUTParams {
	o.SetFaxExtension(faxExtension)
	return o
}

// SetFaxExtension adds the faxExtension to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetFaxExtension(faxExtension *string) {
	o.FaxExtension = faxExtension
}

// WithFaxID adds the faxID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithFaxID(faxID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetFaxID(faxID)
	return o
}

// SetFaxID adds the faxId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetFaxID(faxID *string) {
	o.FaxID = faxID
}

// WithFaxPhoneNumber adds the faxPhoneNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithFaxPhoneNumber(faxPhoneNumber *string) *UpdatePolicyContactUsingPUTParams {
	o.SetFaxPhoneNumber(faxPhoneNumber)
	return o
}

// SetFaxPhoneNumber adds the faxPhoneNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetFaxPhoneNumber(faxPhoneNumber *string) {
	o.FaxPhoneNumber = faxPhoneNumber
}

// WithFaxType adds the faxType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithFaxType(faxType *string) *UpdatePolicyContactUsingPUTParams {
	o.SetFaxType(faxType)
	return o
}

// SetFaxType adds the faxType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetFaxType(faxType *string) {
	o.FaxType = faxType
}

// WithInterfaceID adds the interfaceID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithInterfaceID(interfaceID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetInterfaceID(interfaceID)
	return o
}

// SetInterfaceID adds the interfaceId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetInterfaceID(interfaceID *string) {
	o.InterfaceID = interfaceID
}

// WithKey adds the key to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithKey(key *string) *UpdatePolicyContactUsingPUTParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetKey(key *string) {
	o.Key = key
}

// WithPersonAuditID adds the personAuditID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonAuditID(personAuditID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonAuditID(personAuditID)
	return o
}

// SetPersonAuditID adds the personAuditId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonAuditID(personAuditID *string) {
	o.PersonAuditID = personAuditID
}

// WithPersonBirthDate adds the personBirthDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonBirthDate(personBirthDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonBirthDate(personBirthDate)
	return o
}

// SetPersonBirthDate adds the personBirthDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonBirthDate(personBirthDate *string) {
	o.PersonBirthDate = personBirthDate
}

// WithPersonBirthDateAsDate adds the personBirthDateAsDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonBirthDateAsDate(personBirthDateAsDate *strfmt.DateTime) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonBirthDateAsDate(personBirthDateAsDate)
	return o
}

// SetPersonBirthDateAsDate adds the personBirthDateAsDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonBirthDateAsDate(personBirthDateAsDate *strfmt.DateTime) {
	o.PersonBirthDateAsDate = personBirthDateAsDate
}

// WithPersonClientID adds the personClientID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonClientID(personClientID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonClientID(personClientID)
	return o
}

// SetPersonClientID adds the personClientId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonClientID(personClientID *string) {
	o.PersonClientID = personClientID
}

// WithPersonFirstName adds the personFirstName to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonFirstName(personFirstName *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonFirstName(personFirstName)
	return o
}

// SetPersonFirstName adds the personFirstName to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonFirstName(personFirstName *string) {
	o.PersonFirstName = personFirstName
}

// WithPersonGender adds the personGender to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonGender(personGender *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonGender(personGender)
	return o
}

// SetPersonGender adds the personGender to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonGender(personGender *string) {
	o.PersonGender = personGender
}

// WithPersonHeight adds the personHeight to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonHeight(personHeight *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonHeight(personHeight)
	return o
}

// SetPersonHeight adds the personHeight to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonHeight(personHeight *string) {
	o.PersonHeight = personHeight
}

// WithPersonLastName adds the personLastName to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonLastName(personLastName *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonLastName(personLastName)
	return o
}

// SetPersonLastName adds the personLastName to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonLastName(personLastName *string) {
	o.PersonLastName = personLastName
}

// WithPersonMaritalStatus adds the personMaritalStatus to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonMaritalStatus(personMaritalStatus *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonMaritalStatus(personMaritalStatus)
	return o
}

// SetPersonMaritalStatus adds the personMaritalStatus to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonMaritalStatus(personMaritalStatus *string) {
	o.PersonMaritalStatus = personMaritalStatus
}

// WithPersonMiddleName adds the personMiddleName to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonMiddleName(personMiddleName *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonMiddleName(personMiddleName)
	return o
}

// SetPersonMiddleName adds the personMiddleName to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonMiddleName(personMiddleName *string) {
	o.PersonMiddleName = personMiddleName
}

// WithPersonNamePrefix adds the personNamePrefix to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonNamePrefix(personNamePrefix *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonNamePrefix(personNamePrefix)
	return o
}

// SetPersonNamePrefix adds the personNamePrefix to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonNamePrefix(personNamePrefix *string) {
	o.PersonNamePrefix = personNamePrefix
}

// WithPersonNameSuffix adds the personNameSuffix to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonNameSuffix(personNameSuffix *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonNameSuffix(personNameSuffix)
	return o
}

// SetPersonNameSuffix adds the personNameSuffix to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonNameSuffix(personNameSuffix *string) {
	o.PersonNameSuffix = personNameSuffix
}

// WithPersonPassportNumber adds the personPassportNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonPassportNumber(personPassportNumber *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonPassportNumber(personPassportNumber)
	return o
}

// SetPersonPassportNumber adds the personPassportNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonPassportNumber(personPassportNumber *string) {
	o.PersonPassportNumber = personPassportNumber
}

// WithPersonPreferredLanguage adds the personPreferredLanguage to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonPreferredLanguage(personPreferredLanguage *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonPreferredLanguage(personPreferredLanguage)
	return o
}

// SetPersonPreferredLanguage adds the personPreferredLanguage to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonPreferredLanguage(personPreferredLanguage *string) {
	o.PersonPreferredLanguage = personPreferredLanguage
}

// WithPersonSocialSecurityNumber adds the personSocialSecurityNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonSocialSecurityNumber(personSocialSecurityNumber *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonSocialSecurityNumber(personSocialSecurityNumber)
	return o
}

// SetPersonSocialSecurityNumber adds the personSocialSecurityNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonSocialSecurityNumber(personSocialSecurityNumber *string) {
	o.PersonSocialSecurityNumber = personSocialSecurityNumber
}

// WithPersonWeight adds the personWeight to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPersonWeight(personWeight *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPersonWeight(personWeight)
	return o
}

// SetPersonWeight adds the personWeight to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPersonWeight(personWeight *string) {
	o.PersonWeight = personWeight
}

// WithPhoneEffectiveDate adds the phoneEffectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPhoneEffectiveDate(phoneEffectiveDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPhoneEffectiveDate(phoneEffectiveDate)
	return o
}

// SetPhoneEffectiveDate adds the phoneEffectiveDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPhoneEffectiveDate(phoneEffectiveDate *string) {
	o.PhoneEffectiveDate = phoneEffectiveDate
}

// WithPhoneExpireDate adds the phoneExpireDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPhoneExpireDate(phoneExpireDate *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPhoneExpireDate(phoneExpireDate)
	return o
}

// SetPhoneExpireDate adds the phoneExpireDate to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPhoneExpireDate(phoneExpireDate *string) {
	o.PhoneExpireDate = phoneExpireDate
}

// WithPhoneExtension adds the phoneExtension to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPhoneExtension(phoneExtension *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPhoneExtension(phoneExtension)
	return o
}

// SetPhoneExtension adds the phoneExtension to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPhoneExtension(phoneExtension *string) {
	o.PhoneExtension = phoneExtension
}

// WithPhoneID adds the phoneID to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPhoneID(phoneID *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPhoneID(phoneID)
	return o
}

// SetPhoneID adds the phoneId to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPhoneID(phoneID *string) {
	o.PhoneID = phoneID
}

// WithPhonePhoneNumber adds the phonePhoneNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPhonePhoneNumber(phonePhoneNumber *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPhonePhoneNumber(phonePhoneNumber)
	return o
}

// SetPhonePhoneNumber adds the phonePhoneNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPhonePhoneNumber(phonePhoneNumber *string) {
	o.PhonePhoneNumber = phonePhoneNumber
}

// WithPhoneType adds the phoneType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPhoneType(phoneType *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPhoneType(phoneType)
	return o
}

// SetPhoneType adds the phoneType to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPhoneType(phoneType *string) {
	o.PhoneType = phoneType
}

// WithPolicyNumber adds the policyNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithPolicyNumber(policyNumber *string) *UpdatePolicyContactUsingPUTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetPolicyNumber(policyNumber *string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithRequestApplication(requestApplication *string) *UpdatePolicyContactUsingPUTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithRequestUser(requestUser *string) *UpdatePolicyContactUsingPUTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithVarianceFormat adds the varianceFormat to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithVarianceFormat(varianceFormat *string) *UpdatePolicyContactUsingPUTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetVarianceFormat(varianceFormat *string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) WithVarianceLevel(varianceLevel *string) *UpdatePolicyContactUsingPUTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the update policy contact using p u t params
func (o *UpdatePolicyContactUsingPUTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *UpdatePolicyContactUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddressCity != nil {

		// query param address.city
		var qrAddressCity string

		if o.AddressCity != nil {
			qrAddressCity = *o.AddressCity
		}
		qAddressCity := qrAddressCity
		if qAddressCity != "" {

			if err := r.SetQueryParam("address.city", qAddressCity); err != nil {
				return err
			}
		}
	}

	if o.AddressCountry != nil {

		// query param address.country
		var qrAddressCountry string

		if o.AddressCountry != nil {
			qrAddressCountry = *o.AddressCountry
		}
		qAddressCountry := qrAddressCountry
		if qAddressCountry != "" {

			if err := r.SetQueryParam("address.country", qAddressCountry); err != nil {
				return err
			}
		}
	}

	if o.AddressEffectiveDate != nil {

		// query param address.effectiveDate
		var qrAddressEffectiveDate string

		if o.AddressEffectiveDate != nil {
			qrAddressEffectiveDate = *o.AddressEffectiveDate
		}
		qAddressEffectiveDate := qrAddressEffectiveDate
		if qAddressEffectiveDate != "" {

			if err := r.SetQueryParam("address.effectiveDate", qAddressEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.AddressExpireDate != nil {

		// query param address.expireDate
		var qrAddressExpireDate string

		if o.AddressExpireDate != nil {
			qrAddressExpireDate = *o.AddressExpireDate
		}
		qAddressExpireDate := qrAddressExpireDate
		if qAddressExpireDate != "" {

			if err := r.SetQueryParam("address.expireDate", qAddressExpireDate); err != nil {
				return err
			}
		}
	}

	if o.AddressID != nil {

		// query param address.id
		var qrAddressID string

		if o.AddressID != nil {
			qrAddressID = *o.AddressID
		}
		qAddressID := qrAddressID
		if qAddressID != "" {

			if err := r.SetQueryParam("address.id", qAddressID); err != nil {
				return err
			}
		}
	}

	if o.AddressLine1 != nil {

		// query param address.line1
		var qrAddressLine1 string

		if o.AddressLine1 != nil {
			qrAddressLine1 = *o.AddressLine1
		}
		qAddressLine1 := qrAddressLine1
		if qAddressLine1 != "" {

			if err := r.SetQueryParam("address.line1", qAddressLine1); err != nil {
				return err
			}
		}
	}

	if o.AddressLine2 != nil {

		// query param address.line2
		var qrAddressLine2 string

		if o.AddressLine2 != nil {
			qrAddressLine2 = *o.AddressLine2
		}
		qAddressLine2 := qrAddressLine2
		if qAddressLine2 != "" {

			if err := r.SetQueryParam("address.line2", qAddressLine2); err != nil {
				return err
			}
		}
	}

	if o.AddressLine3 != nil {

		// query param address.line3
		var qrAddressLine3 string

		if o.AddressLine3 != nil {
			qrAddressLine3 = *o.AddressLine3
		}
		qAddressLine3 := qrAddressLine3
		if qAddressLine3 != "" {

			if err := r.SetQueryParam("address.line3", qAddressLine3); err != nil {
				return err
			}
		}
	}

	if o.AddressState != nil {

		// query param address.state
		var qrAddressState string

		if o.AddressState != nil {
			qrAddressState = *o.AddressState
		}
		qAddressState := qrAddressState
		if qAddressState != "" {

			if err := r.SetQueryParam("address.state", qAddressState); err != nil {
				return err
			}
		}
	}

	if o.AddressType != nil {

		// query param address.type
		var qrAddressType string

		if o.AddressType != nil {
			qrAddressType = *o.AddressType
		}
		qAddressType := qrAddressType
		if qAddressType != "" {

			if err := r.SetQueryParam("address.type", qAddressType); err != nil {
				return err
			}
		}
	}

	if o.AddressZip != nil {

		// query param address.zip
		var qrAddressZip string

		if o.AddressZip != nil {
			qrAddressZip = *o.AddressZip
		}
		qAddressZip := qrAddressZip
		if qAddressZip != "" {

			if err := r.SetQueryParam("address.zip", qAddressZip); err != nil {
				return err
			}
		}
	}

	if o.ContactType != nil {

		// query param contactType
		var qrContactType string

		if o.ContactType != nil {
			qrContactType = *o.ContactType
		}
		qContactType := qrContactType
		if qContactType != "" {

			if err := r.SetQueryParam("contactType", qContactType); err != nil {
				return err
			}
		}
	}

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.EmailEmailAddress != nil {

		// query param email.emailAddress
		var qrEmailEmailAddress string

		if o.EmailEmailAddress != nil {
			qrEmailEmailAddress = *o.EmailEmailAddress
		}
		qEmailEmailAddress := qrEmailEmailAddress
		if qEmailEmailAddress != "" {

			if err := r.SetQueryParam("email.emailAddress", qEmailEmailAddress); err != nil {
				return err
			}
		}
	}

	if o.EmailID != nil {

		// query param email.id
		var qrEmailID string

		if o.EmailID != nil {
			qrEmailID = *o.EmailID
		}
		qEmailID := qrEmailID
		if qEmailID != "" {

			if err := r.SetQueryParam("email.id", qEmailID); err != nil {
				return err
			}
		}
	}

	if o.EmailType != nil {

		// query param email.type
		var qrEmailType string

		if o.EmailType != nil {
			qrEmailType = *o.EmailType
		}
		qEmailType := qrEmailType
		if qEmailType != "" {

			if err := r.SetQueryParam("email.type", qEmailType); err != nil {
				return err
			}
		}
	}

	if o.ExpirationDate != nil {

		// query param expirationDate
		var qrExpirationDate string

		if o.ExpirationDate != nil {
			qrExpirationDate = *o.ExpirationDate
		}
		qExpirationDate := qrExpirationDate
		if qExpirationDate != "" {

			if err := r.SetQueryParam("expirationDate", qExpirationDate); err != nil {
				return err
			}
		}
	}

	if o.FaxEffectiveDate != nil {

		// query param fax.effectiveDate
		var qrFaxEffectiveDate string

		if o.FaxEffectiveDate != nil {
			qrFaxEffectiveDate = *o.FaxEffectiveDate
		}
		qFaxEffectiveDate := qrFaxEffectiveDate
		if qFaxEffectiveDate != "" {

			if err := r.SetQueryParam("fax.effectiveDate", qFaxEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.FaxExpireDate != nil {

		// query param fax.expireDate
		var qrFaxExpireDate string

		if o.FaxExpireDate != nil {
			qrFaxExpireDate = *o.FaxExpireDate
		}
		qFaxExpireDate := qrFaxExpireDate
		if qFaxExpireDate != "" {

			if err := r.SetQueryParam("fax.expireDate", qFaxExpireDate); err != nil {
				return err
			}
		}
	}

	if o.FaxExtension != nil {

		// query param fax.extension
		var qrFaxExtension string

		if o.FaxExtension != nil {
			qrFaxExtension = *o.FaxExtension
		}
		qFaxExtension := qrFaxExtension
		if qFaxExtension != "" {

			if err := r.SetQueryParam("fax.extension", qFaxExtension); err != nil {
				return err
			}
		}
	}

	if o.FaxID != nil {

		// query param fax.id
		var qrFaxID string

		if o.FaxID != nil {
			qrFaxID = *o.FaxID
		}
		qFaxID := qrFaxID
		if qFaxID != "" {

			if err := r.SetQueryParam("fax.id", qFaxID); err != nil {
				return err
			}
		}
	}

	if o.FaxPhoneNumber != nil {

		// query param fax.phoneNumber
		var qrFaxPhoneNumber string

		if o.FaxPhoneNumber != nil {
			qrFaxPhoneNumber = *o.FaxPhoneNumber
		}
		qFaxPhoneNumber := qrFaxPhoneNumber
		if qFaxPhoneNumber != "" {

			if err := r.SetQueryParam("fax.phoneNumber", qFaxPhoneNumber); err != nil {
				return err
			}
		}
	}

	if o.FaxType != nil {

		// query param fax.type
		var qrFaxType string

		if o.FaxType != nil {
			qrFaxType = *o.FaxType
		}
		qFaxType := qrFaxType
		if qFaxType != "" {

			if err := r.SetQueryParam("fax.type", qFaxType); err != nil {
				return err
			}
		}
	}

	if o.InterfaceID != nil {

		// query param interfaceId
		var qrInterfaceID string

		if o.InterfaceID != nil {
			qrInterfaceID = *o.InterfaceID
		}
		qInterfaceID := qrInterfaceID
		if qInterfaceID != "" {

			if err := r.SetQueryParam("interfaceId", qInterfaceID); err != nil {
				return err
			}
		}
	}

	if o.Key != nil {

		// query param key
		var qrKey string

		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {

			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}
	}

	if o.PersonAuditID != nil {

		// query param person.auditId
		var qrPersonAuditID string

		if o.PersonAuditID != nil {
			qrPersonAuditID = *o.PersonAuditID
		}
		qPersonAuditID := qrPersonAuditID
		if qPersonAuditID != "" {

			if err := r.SetQueryParam("person.auditId", qPersonAuditID); err != nil {
				return err
			}
		}
	}

	if o.PersonBirthDate != nil {

		// query param person.birthDate
		var qrPersonBirthDate string

		if o.PersonBirthDate != nil {
			qrPersonBirthDate = *o.PersonBirthDate
		}
		qPersonBirthDate := qrPersonBirthDate
		if qPersonBirthDate != "" {

			if err := r.SetQueryParam("person.birthDate", qPersonBirthDate); err != nil {
				return err
			}
		}
	}

	if o.PersonBirthDateAsDate != nil {

		// query param person.birthDateAsDate
		var qrPersonBirthDateAsDate strfmt.DateTime

		if o.PersonBirthDateAsDate != nil {
			qrPersonBirthDateAsDate = *o.PersonBirthDateAsDate
		}
		qPersonBirthDateAsDate := qrPersonBirthDateAsDate.String()
		if qPersonBirthDateAsDate != "" {

			if err := r.SetQueryParam("person.birthDateAsDate", qPersonBirthDateAsDate); err != nil {
				return err
			}
		}
	}

	if o.PersonClientID != nil {

		// query param person.clientId
		var qrPersonClientID string

		if o.PersonClientID != nil {
			qrPersonClientID = *o.PersonClientID
		}
		qPersonClientID := qrPersonClientID
		if qPersonClientID != "" {

			if err := r.SetQueryParam("person.clientId", qPersonClientID); err != nil {
				return err
			}
		}
	}

	if o.PersonFirstName != nil {

		// query param person.firstName
		var qrPersonFirstName string

		if o.PersonFirstName != nil {
			qrPersonFirstName = *o.PersonFirstName
		}
		qPersonFirstName := qrPersonFirstName
		if qPersonFirstName != "" {

			if err := r.SetQueryParam("person.firstName", qPersonFirstName); err != nil {
				return err
			}
		}
	}

	if o.PersonGender != nil {

		// query param person.gender
		var qrPersonGender string

		if o.PersonGender != nil {
			qrPersonGender = *o.PersonGender
		}
		qPersonGender := qrPersonGender
		if qPersonGender != "" {

			if err := r.SetQueryParam("person.gender", qPersonGender); err != nil {
				return err
			}
		}
	}

	if o.PersonHeight != nil {

		// query param person.height
		var qrPersonHeight string

		if o.PersonHeight != nil {
			qrPersonHeight = *o.PersonHeight
		}
		qPersonHeight := qrPersonHeight
		if qPersonHeight != "" {

			if err := r.SetQueryParam("person.height", qPersonHeight); err != nil {
				return err
			}
		}
	}

	if o.PersonLastName != nil {

		// query param person.lastName
		var qrPersonLastName string

		if o.PersonLastName != nil {
			qrPersonLastName = *o.PersonLastName
		}
		qPersonLastName := qrPersonLastName
		if qPersonLastName != "" {

			if err := r.SetQueryParam("person.lastName", qPersonLastName); err != nil {
				return err
			}
		}
	}

	if o.PersonMaritalStatus != nil {

		// query param person.maritalStatus
		var qrPersonMaritalStatus string

		if o.PersonMaritalStatus != nil {
			qrPersonMaritalStatus = *o.PersonMaritalStatus
		}
		qPersonMaritalStatus := qrPersonMaritalStatus
		if qPersonMaritalStatus != "" {

			if err := r.SetQueryParam("person.maritalStatus", qPersonMaritalStatus); err != nil {
				return err
			}
		}
	}

	if o.PersonMiddleName != nil {

		// query param person.middleName
		var qrPersonMiddleName string

		if o.PersonMiddleName != nil {
			qrPersonMiddleName = *o.PersonMiddleName
		}
		qPersonMiddleName := qrPersonMiddleName
		if qPersonMiddleName != "" {

			if err := r.SetQueryParam("person.middleName", qPersonMiddleName); err != nil {
				return err
			}
		}
	}

	if o.PersonNamePrefix != nil {

		// query param person.namePrefix
		var qrPersonNamePrefix string

		if o.PersonNamePrefix != nil {
			qrPersonNamePrefix = *o.PersonNamePrefix
		}
		qPersonNamePrefix := qrPersonNamePrefix
		if qPersonNamePrefix != "" {

			if err := r.SetQueryParam("person.namePrefix", qPersonNamePrefix); err != nil {
				return err
			}
		}
	}

	if o.PersonNameSuffix != nil {

		// query param person.nameSuffix
		var qrPersonNameSuffix string

		if o.PersonNameSuffix != nil {
			qrPersonNameSuffix = *o.PersonNameSuffix
		}
		qPersonNameSuffix := qrPersonNameSuffix
		if qPersonNameSuffix != "" {

			if err := r.SetQueryParam("person.nameSuffix", qPersonNameSuffix); err != nil {
				return err
			}
		}
	}

	if o.PersonPassportNumber != nil {

		// query param person.passportNumber
		var qrPersonPassportNumber string

		if o.PersonPassportNumber != nil {
			qrPersonPassportNumber = *o.PersonPassportNumber
		}
		qPersonPassportNumber := qrPersonPassportNumber
		if qPersonPassportNumber != "" {

			if err := r.SetQueryParam("person.passportNumber", qPersonPassportNumber); err != nil {
				return err
			}
		}
	}

	if o.PersonPreferredLanguage != nil {

		// query param person.preferredLanguage
		var qrPersonPreferredLanguage string

		if o.PersonPreferredLanguage != nil {
			qrPersonPreferredLanguage = *o.PersonPreferredLanguage
		}
		qPersonPreferredLanguage := qrPersonPreferredLanguage
		if qPersonPreferredLanguage != "" {

			if err := r.SetQueryParam("person.preferredLanguage", qPersonPreferredLanguage); err != nil {
				return err
			}
		}
	}

	if o.PersonSocialSecurityNumber != nil {

		// query param person.socialSecurityNumber
		var qrPersonSocialSecurityNumber string

		if o.PersonSocialSecurityNumber != nil {
			qrPersonSocialSecurityNumber = *o.PersonSocialSecurityNumber
		}
		qPersonSocialSecurityNumber := qrPersonSocialSecurityNumber
		if qPersonSocialSecurityNumber != "" {

			if err := r.SetQueryParam("person.socialSecurityNumber", qPersonSocialSecurityNumber); err != nil {
				return err
			}
		}
	}

	if o.PersonWeight != nil {

		// query param person.weight
		var qrPersonWeight string

		if o.PersonWeight != nil {
			qrPersonWeight = *o.PersonWeight
		}
		qPersonWeight := qrPersonWeight
		if qPersonWeight != "" {

			if err := r.SetQueryParam("person.weight", qPersonWeight); err != nil {
				return err
			}
		}
	}

	if o.PhoneEffectiveDate != nil {

		// query param phone.effectiveDate
		var qrPhoneEffectiveDate string

		if o.PhoneEffectiveDate != nil {
			qrPhoneEffectiveDate = *o.PhoneEffectiveDate
		}
		qPhoneEffectiveDate := qrPhoneEffectiveDate
		if qPhoneEffectiveDate != "" {

			if err := r.SetQueryParam("phone.effectiveDate", qPhoneEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.PhoneExpireDate != nil {

		// query param phone.expireDate
		var qrPhoneExpireDate string

		if o.PhoneExpireDate != nil {
			qrPhoneExpireDate = *o.PhoneExpireDate
		}
		qPhoneExpireDate := qrPhoneExpireDate
		if qPhoneExpireDate != "" {

			if err := r.SetQueryParam("phone.expireDate", qPhoneExpireDate); err != nil {
				return err
			}
		}
	}

	if o.PhoneExtension != nil {

		// query param phone.extension
		var qrPhoneExtension string

		if o.PhoneExtension != nil {
			qrPhoneExtension = *o.PhoneExtension
		}
		qPhoneExtension := qrPhoneExtension
		if qPhoneExtension != "" {

			if err := r.SetQueryParam("phone.extension", qPhoneExtension); err != nil {
				return err
			}
		}
	}

	if o.PhoneID != nil {

		// query param phone.id
		var qrPhoneID string

		if o.PhoneID != nil {
			qrPhoneID = *o.PhoneID
		}
		qPhoneID := qrPhoneID
		if qPhoneID != "" {

			if err := r.SetQueryParam("phone.id", qPhoneID); err != nil {
				return err
			}
		}
	}

	if o.PhonePhoneNumber != nil {

		// query param phone.phoneNumber
		var qrPhonePhoneNumber string

		if o.PhonePhoneNumber != nil {
			qrPhonePhoneNumber = *o.PhonePhoneNumber
		}
		qPhonePhoneNumber := qrPhonePhoneNumber
		if qPhonePhoneNumber != "" {

			if err := r.SetQueryParam("phone.phoneNumber", qPhonePhoneNumber); err != nil {
				return err
			}
		}
	}

	if o.PhoneType != nil {

		// query param phone.type
		var qrPhoneType string

		if o.PhoneType != nil {
			qrPhoneType = *o.PhoneType
		}
		qPhoneType := qrPhoneType
		if qPhoneType != "" {

			if err := r.SetQueryParam("phone.type", qPhoneType); err != nil {
				return err
			}
		}
	}

	if o.PolicyNumber != nil {

		// query param policyNumber
		var qrPolicyNumber string

		if o.PolicyNumber != nil {
			qrPolicyNumber = *o.PolicyNumber
		}
		qPolicyNumber := qrPolicyNumber
		if qPolicyNumber != "" {

			if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}

	if o.VarianceFormat != nil {

		// query param varianceFormat
		var qrVarianceFormat string

		if o.VarianceFormat != nil {
			qrVarianceFormat = *o.VarianceFormat
		}
		qVarianceFormat := qrVarianceFormat
		if qVarianceFormat != "" {

			if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
				return err
			}
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
