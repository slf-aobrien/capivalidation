// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateProcessingRuleUsingPUTReader is a Reader for the UpdateProcessingRuleUsingPUT structure.
type UpdateProcessingRuleUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateProcessingRuleUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateProcessingRuleUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateProcessingRuleUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateProcessingRuleUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateProcessingRuleUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateProcessingRuleUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateProcessingRuleUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateProcessingRuleUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/processingRules] updateProcessingRuleUsingPUT", response, response.Code())
	}
}

// NewUpdateProcessingRuleUsingPUTOK creates a UpdateProcessingRuleUsingPUTOK with default headers values
func NewUpdateProcessingRuleUsingPUTOK() *UpdateProcessingRuleUsingPUTOK {
	return &UpdateProcessingRuleUsingPUTOK{}
}

/*
UpdateProcessingRuleUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateProcessingRuleUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update processing rule using p u t o k response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update processing rule using p u t o k response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t o k response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update processing rule using p u t o k response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update processing rule using p u t o k response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update processing rule using p u t o k response
func (o *UpdateProcessingRuleUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateProcessingRuleUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateProcessingRuleUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateProcessingRuleUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateProcessingRuleUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateProcessingRuleUsingPUTCreated creates a UpdateProcessingRuleUsingPUTCreated with default headers values
func NewUpdateProcessingRuleUsingPUTCreated() *UpdateProcessingRuleUsingPUTCreated {
	return &UpdateProcessingRuleUsingPUTCreated{}
}

/*
UpdateProcessingRuleUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateProcessingRuleUsingPUTCreated struct {
}

// IsSuccess returns true when this update processing rule using p u t created response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update processing rule using p u t created response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t created response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update processing rule using p u t created response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update processing rule using p u t created response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update processing rule using p u t created response
func (o *UpdateProcessingRuleUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateProcessingRuleUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTCreated", 201)
}

func (o *UpdateProcessingRuleUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTCreated", 201)
}

func (o *UpdateProcessingRuleUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProcessingRuleUsingPUTBadRequest creates a UpdateProcessingRuleUsingPUTBadRequest with default headers values
func NewUpdateProcessingRuleUsingPUTBadRequest() *UpdateProcessingRuleUsingPUTBadRequest {
	return &UpdateProcessingRuleUsingPUTBadRequest{}
}

/*
UpdateProcessingRuleUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateProcessingRuleUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update processing rule using p u t bad request response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update processing rule using p u t bad request response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t bad request response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update processing rule using p u t bad request response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update processing rule using p u t bad request response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update processing rule using p u t bad request response
func (o *UpdateProcessingRuleUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateProcessingRuleUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTBadRequest", 400)
}

func (o *UpdateProcessingRuleUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTBadRequest", 400)
}

func (o *UpdateProcessingRuleUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProcessingRuleUsingPUTUnauthorized creates a UpdateProcessingRuleUsingPUTUnauthorized with default headers values
func NewUpdateProcessingRuleUsingPUTUnauthorized() *UpdateProcessingRuleUsingPUTUnauthorized {
	return &UpdateProcessingRuleUsingPUTUnauthorized{}
}

/*
UpdateProcessingRuleUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateProcessingRuleUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update processing rule using p u t unauthorized response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update processing rule using p u t unauthorized response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t unauthorized response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update processing rule using p u t unauthorized response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update processing rule using p u t unauthorized response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update processing rule using p u t unauthorized response
func (o *UpdateProcessingRuleUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateProcessingRuleUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateProcessingRuleUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateProcessingRuleUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProcessingRuleUsingPUTForbidden creates a UpdateProcessingRuleUsingPUTForbidden with default headers values
func NewUpdateProcessingRuleUsingPUTForbidden() *UpdateProcessingRuleUsingPUTForbidden {
	return &UpdateProcessingRuleUsingPUTForbidden{}
}

/*
UpdateProcessingRuleUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateProcessingRuleUsingPUTForbidden struct {
}

// IsSuccess returns true when this update processing rule using p u t forbidden response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update processing rule using p u t forbidden response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t forbidden response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update processing rule using p u t forbidden response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update processing rule using p u t forbidden response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update processing rule using p u t forbidden response
func (o *UpdateProcessingRuleUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateProcessingRuleUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTForbidden", 403)
}

func (o *UpdateProcessingRuleUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTForbidden", 403)
}

func (o *UpdateProcessingRuleUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProcessingRuleUsingPUTNotFound creates a UpdateProcessingRuleUsingPUTNotFound with default headers values
func NewUpdateProcessingRuleUsingPUTNotFound() *UpdateProcessingRuleUsingPUTNotFound {
	return &UpdateProcessingRuleUsingPUTNotFound{}
}

/*
UpdateProcessingRuleUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateProcessingRuleUsingPUTNotFound struct {
}

// IsSuccess returns true when this update processing rule using p u t not found response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update processing rule using p u t not found response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t not found response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update processing rule using p u t not found response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update processing rule using p u t not found response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update processing rule using p u t not found response
func (o *UpdateProcessingRuleUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateProcessingRuleUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTNotFound", 404)
}

func (o *UpdateProcessingRuleUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTNotFound", 404)
}

func (o *UpdateProcessingRuleUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateProcessingRuleUsingPUTInternalServerError creates a UpdateProcessingRuleUsingPUTInternalServerError with default headers values
func NewUpdateProcessingRuleUsingPUTInternalServerError() *UpdateProcessingRuleUsingPUTInternalServerError {
	return &UpdateProcessingRuleUsingPUTInternalServerError{}
}

/*
UpdateProcessingRuleUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateProcessingRuleUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update processing rule using p u t internal server error response has a 2xx status code
func (o *UpdateProcessingRuleUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update processing rule using p u t internal server error response has a 3xx status code
func (o *UpdateProcessingRuleUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update processing rule using p u t internal server error response has a 4xx status code
func (o *UpdateProcessingRuleUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update processing rule using p u t internal server error response has a 5xx status code
func (o *UpdateProcessingRuleUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update processing rule using p u t internal server error response a status code equal to that given
func (o *UpdateProcessingRuleUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update processing rule using p u t internal server error response
func (o *UpdateProcessingRuleUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateProcessingRuleUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTInternalServerError", 500)
}

func (o *UpdateProcessingRuleUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/processingRules][%d] updateProcessingRuleUsingPUTInternalServerError", 500)
}

func (o *UpdateProcessingRuleUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
