// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RiskPremiumTranchDTO RiskPremiumTranchDTO
//
// swagger:model RiskPremiumTranchDTO
type RiskPremiumTranchDTO struct {

	// asset allocation code
	AssetAllocationCode string `json:"assetAllocationCode,omitempty"`

	// benefit amount type
	BenefitAmountType string `json:"benefitAmountType,omitempty"`

	// calculation code
	CalculationCode string `json:"calculationCode,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// joint life code
	JointLifeCode string `json:"jointLifeCode,omitempty"`

	// load code
	LoadCode string `json:"loadCode,omitempty"`

	// naar benefit adjustment code
	NaarBenefitAdjustmentCode string `json:"naarBenefitAdjustmentCode,omitempty"`

	// output code
	OutputCode string `json:"outputCode,omitempty"`

	// premium relation code
	PremiumRelationCode string `json:"premiumRelationCode,omitempty"`

	// premium type description
	PremiumTypeDescription string `json:"premiumTypeDescription,omitempty"`

	// rate scale age code
	RateScaleAgeCode string `json:"rateScaleAgeCode,omitempty"`

	// risk premium sentence list
	RiskPremiumSentenceList []*RiskPremiumSentenceDTO `json:"riskPremiumSentenceList"`

	// sequence number
	SequenceNumber string `json:"sequenceNumber,omitempty"`

	// service definition description
	ServiceDefinitionDescription string `json:"serviceDefinitionDescription,omitempty"`
}

// Validate validates this risk premium tranch d t o
func (m *RiskPremiumTranchDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRiskPremiumSentenceList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskPremiumTranchDTO) validateRiskPremiumSentenceList(formats strfmt.Registry) error {
	if swag.IsZero(m.RiskPremiumSentenceList) { // not required
		return nil
	}

	for i := 0; i < len(m.RiskPremiumSentenceList); i++ {
		if swag.IsZero(m.RiskPremiumSentenceList[i]) { // not required
			continue
		}

		if m.RiskPremiumSentenceList[i] != nil {
			if err := m.RiskPremiumSentenceList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskPremiumSentenceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("riskPremiumSentenceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this risk premium tranch d t o based on the context it is used
func (m *RiskPremiumTranchDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRiskPremiumSentenceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RiskPremiumTranchDTO) contextValidateRiskPremiumSentenceList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RiskPremiumSentenceList); i++ {

		if m.RiskPremiumSentenceList[i] != nil {

			if swag.IsZero(m.RiskPremiumSentenceList[i]) { // not required
				return nil
			}

			if err := m.RiskPremiumSentenceList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("riskPremiumSentenceList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("riskPremiumSentenceList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RiskPremiumTranchDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RiskPremiumTranchDTO) UnmarshalBinary(b []byte) error {
	var res RiskPremiumTranchDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
