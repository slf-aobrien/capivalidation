// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ModelAndView ModelAndView
//
// swagger:model ModelAndView
type ModelAndView struct {

	// empty
	Empty bool `json:"empty,omitempty"`

	// model
	Model interface{} `json:"model,omitempty"`

	// model map
	ModelMap map[string]interface{} `json:"modelMap,omitempty"`

	// reference
	Reference bool `json:"reference,omitempty"`

	// status
	// Enum: ["ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","BANDWIDTH_LIMIT_EXCEEDED","CHECKPOINT","CONFLICT","CONTINUE","CREATED","DESTINATION_LOCKED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_USED","INSUFFICIENT_SPACE_ON_RESOURCE","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","I_AM_A_TEAPOT","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_FAILURE","METHOD_NOT_ALLOWED","MOVED_PERMANENTLY","MOVED_TEMPORARILY","MULTIPLE_CHOICES","MULTI_STATUS","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","PARTIAL_CONTENT","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","REQUESTED_RANGE_NOT_SATISFIABLE","REQUEST_ENTITY_TOO_LARGE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","REQUEST_URI_TOO_LONG","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","TEMPORARY_REDIRECT","TOO_EARLY","TOO_MANY_REQUESTS","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","VARIANT_ALSO_NEGOTIATES"]
	Status string `json:"status,omitempty"`

	// view
	View *View `json:"view,omitempty"`

	// view name
	ViewName string `json:"viewName,omitempty"`
}

// Validate validates this model and view
func (m *ModelAndView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var modelAndViewTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","BANDWIDTH_LIMIT_EXCEEDED","CHECKPOINT","CONFLICT","CONTINUE","CREATED","DESTINATION_LOCKED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","IM_USED","INSUFFICIENT_SPACE_ON_RESOURCE","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","I_AM_A_TEAPOT","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_FAILURE","METHOD_NOT_ALLOWED","MOVED_PERMANENTLY","MOVED_TEMPORARILY","MULTIPLE_CHOICES","MULTI_STATUS","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","PARTIAL_CONTENT","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","REQUESTED_RANGE_NOT_SATISFIABLE","REQUEST_ENTITY_TOO_LARGE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","REQUEST_URI_TOO_LONG","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","TEMPORARY_REDIRECT","TOO_EARLY","TOO_MANY_REQUESTS","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","VARIANT_ALSO_NEGOTIATES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelAndViewTypeStatusPropEnum = append(modelAndViewTypeStatusPropEnum, v)
	}
}

const (

	// ModelAndViewStatusACCEPTED captures enum value "ACCEPTED"
	ModelAndViewStatusACCEPTED string = "ACCEPTED"

	// ModelAndViewStatusALREADYREPORTED captures enum value "ALREADY_REPORTED"
	ModelAndViewStatusALREADYREPORTED string = "ALREADY_REPORTED"

	// ModelAndViewStatusBADGATEWAY captures enum value "BAD_GATEWAY"
	ModelAndViewStatusBADGATEWAY string = "BAD_GATEWAY"

	// ModelAndViewStatusBADREQUEST captures enum value "BAD_REQUEST"
	ModelAndViewStatusBADREQUEST string = "BAD_REQUEST"

	// ModelAndViewStatusBANDWIDTHLIMITEXCEEDED captures enum value "BANDWIDTH_LIMIT_EXCEEDED"
	ModelAndViewStatusBANDWIDTHLIMITEXCEEDED string = "BANDWIDTH_LIMIT_EXCEEDED"

	// ModelAndViewStatusCHECKPOINT captures enum value "CHECKPOINT"
	ModelAndViewStatusCHECKPOINT string = "CHECKPOINT"

	// ModelAndViewStatusCONFLICT captures enum value "CONFLICT"
	ModelAndViewStatusCONFLICT string = "CONFLICT"

	// ModelAndViewStatusCONTINUE captures enum value "CONTINUE"
	ModelAndViewStatusCONTINUE string = "CONTINUE"

	// ModelAndViewStatusCREATED captures enum value "CREATED"
	ModelAndViewStatusCREATED string = "CREATED"

	// ModelAndViewStatusDESTINATIONLOCKED captures enum value "DESTINATION_LOCKED"
	ModelAndViewStatusDESTINATIONLOCKED string = "DESTINATION_LOCKED"

	// ModelAndViewStatusEXPECTATIONFAILED captures enum value "EXPECTATION_FAILED"
	ModelAndViewStatusEXPECTATIONFAILED string = "EXPECTATION_FAILED"

	// ModelAndViewStatusFAILEDDEPENDENCY captures enum value "FAILED_DEPENDENCY"
	ModelAndViewStatusFAILEDDEPENDENCY string = "FAILED_DEPENDENCY"

	// ModelAndViewStatusFORBIDDEN captures enum value "FORBIDDEN"
	ModelAndViewStatusFORBIDDEN string = "FORBIDDEN"

	// ModelAndViewStatusFOUND captures enum value "FOUND"
	ModelAndViewStatusFOUND string = "FOUND"

	// ModelAndViewStatusGATEWAYTIMEOUT captures enum value "GATEWAY_TIMEOUT"
	ModelAndViewStatusGATEWAYTIMEOUT string = "GATEWAY_TIMEOUT"

	// ModelAndViewStatusGONE captures enum value "GONE"
	ModelAndViewStatusGONE string = "GONE"

	// ModelAndViewStatusHTTPVERSIONNOTSUPPORTED captures enum value "HTTP_VERSION_NOT_SUPPORTED"
	ModelAndViewStatusHTTPVERSIONNOTSUPPORTED string = "HTTP_VERSION_NOT_SUPPORTED"

	// ModelAndViewStatusIMUSED captures enum value "IM_USED"
	ModelAndViewStatusIMUSED string = "IM_USED"

	// ModelAndViewStatusINSUFFICIENTSPACEONRESOURCE captures enum value "INSUFFICIENT_SPACE_ON_RESOURCE"
	ModelAndViewStatusINSUFFICIENTSPACEONRESOURCE string = "INSUFFICIENT_SPACE_ON_RESOURCE"

	// ModelAndViewStatusINSUFFICIENTSTORAGE captures enum value "INSUFFICIENT_STORAGE"
	ModelAndViewStatusINSUFFICIENTSTORAGE string = "INSUFFICIENT_STORAGE"

	// ModelAndViewStatusINTERNALSERVERERROR captures enum value "INTERNAL_SERVER_ERROR"
	ModelAndViewStatusINTERNALSERVERERROR string = "INTERNAL_SERVER_ERROR"

	// ModelAndViewStatusIAMATEAPOT captures enum value "I_AM_A_TEAPOT"
	ModelAndViewStatusIAMATEAPOT string = "I_AM_A_TEAPOT"

	// ModelAndViewStatusLENGTHREQUIRED captures enum value "LENGTH_REQUIRED"
	ModelAndViewStatusLENGTHREQUIRED string = "LENGTH_REQUIRED"

	// ModelAndViewStatusLOCKED captures enum value "LOCKED"
	ModelAndViewStatusLOCKED string = "LOCKED"

	// ModelAndViewStatusLOOPDETECTED captures enum value "LOOP_DETECTED"
	ModelAndViewStatusLOOPDETECTED string = "LOOP_DETECTED"

	// ModelAndViewStatusMETHODFAILURE captures enum value "METHOD_FAILURE"
	ModelAndViewStatusMETHODFAILURE string = "METHOD_FAILURE"

	// ModelAndViewStatusMETHODNOTALLOWED captures enum value "METHOD_NOT_ALLOWED"
	ModelAndViewStatusMETHODNOTALLOWED string = "METHOD_NOT_ALLOWED"

	// ModelAndViewStatusMOVEDPERMANENTLY captures enum value "MOVED_PERMANENTLY"
	ModelAndViewStatusMOVEDPERMANENTLY string = "MOVED_PERMANENTLY"

	// ModelAndViewStatusMOVEDTEMPORARILY captures enum value "MOVED_TEMPORARILY"
	ModelAndViewStatusMOVEDTEMPORARILY string = "MOVED_TEMPORARILY"

	// ModelAndViewStatusMULTIPLECHOICES captures enum value "MULTIPLE_CHOICES"
	ModelAndViewStatusMULTIPLECHOICES string = "MULTIPLE_CHOICES"

	// ModelAndViewStatusMULTISTATUS captures enum value "MULTI_STATUS"
	ModelAndViewStatusMULTISTATUS string = "MULTI_STATUS"

	// ModelAndViewStatusNETWORKAUTHENTICATIONREQUIRED captures enum value "NETWORK_AUTHENTICATION_REQUIRED"
	ModelAndViewStatusNETWORKAUTHENTICATIONREQUIRED string = "NETWORK_AUTHENTICATION_REQUIRED"

	// ModelAndViewStatusNONAUTHORITATIVEINFORMATION captures enum value "NON_AUTHORITATIVE_INFORMATION"
	ModelAndViewStatusNONAUTHORITATIVEINFORMATION string = "NON_AUTHORITATIVE_INFORMATION"

	// ModelAndViewStatusNOTACCEPTABLE captures enum value "NOT_ACCEPTABLE"
	ModelAndViewStatusNOTACCEPTABLE string = "NOT_ACCEPTABLE"

	// ModelAndViewStatusNOTEXTENDED captures enum value "NOT_EXTENDED"
	ModelAndViewStatusNOTEXTENDED string = "NOT_EXTENDED"

	// ModelAndViewStatusNOTFOUND captures enum value "NOT_FOUND"
	ModelAndViewStatusNOTFOUND string = "NOT_FOUND"

	// ModelAndViewStatusNOTIMPLEMENTED captures enum value "NOT_IMPLEMENTED"
	ModelAndViewStatusNOTIMPLEMENTED string = "NOT_IMPLEMENTED"

	// ModelAndViewStatusNOTMODIFIED captures enum value "NOT_MODIFIED"
	ModelAndViewStatusNOTMODIFIED string = "NOT_MODIFIED"

	// ModelAndViewStatusNOCONTENT captures enum value "NO_CONTENT"
	ModelAndViewStatusNOCONTENT string = "NO_CONTENT"

	// ModelAndViewStatusOK captures enum value "OK"
	ModelAndViewStatusOK string = "OK"

	// ModelAndViewStatusPARTIALCONTENT captures enum value "PARTIAL_CONTENT"
	ModelAndViewStatusPARTIALCONTENT string = "PARTIAL_CONTENT"

	// ModelAndViewStatusPAYLOADTOOLARGE captures enum value "PAYLOAD_TOO_LARGE"
	ModelAndViewStatusPAYLOADTOOLARGE string = "PAYLOAD_TOO_LARGE"

	// ModelAndViewStatusPAYMENTREQUIRED captures enum value "PAYMENT_REQUIRED"
	ModelAndViewStatusPAYMENTREQUIRED string = "PAYMENT_REQUIRED"

	// ModelAndViewStatusPERMANENTREDIRECT captures enum value "PERMANENT_REDIRECT"
	ModelAndViewStatusPERMANENTREDIRECT string = "PERMANENT_REDIRECT"

	// ModelAndViewStatusPRECONDITIONFAILED captures enum value "PRECONDITION_FAILED"
	ModelAndViewStatusPRECONDITIONFAILED string = "PRECONDITION_FAILED"

	// ModelAndViewStatusPRECONDITIONREQUIRED captures enum value "PRECONDITION_REQUIRED"
	ModelAndViewStatusPRECONDITIONREQUIRED string = "PRECONDITION_REQUIRED"

	// ModelAndViewStatusPROCESSING captures enum value "PROCESSING"
	ModelAndViewStatusPROCESSING string = "PROCESSING"

	// ModelAndViewStatusPROXYAUTHENTICATIONREQUIRED captures enum value "PROXY_AUTHENTICATION_REQUIRED"
	ModelAndViewStatusPROXYAUTHENTICATIONREQUIRED string = "PROXY_AUTHENTICATION_REQUIRED"

	// ModelAndViewStatusREQUESTEDRANGENOTSATISFIABLE captures enum value "REQUESTED_RANGE_NOT_SATISFIABLE"
	ModelAndViewStatusREQUESTEDRANGENOTSATISFIABLE string = "REQUESTED_RANGE_NOT_SATISFIABLE"

	// ModelAndViewStatusREQUESTENTITYTOOLARGE captures enum value "REQUEST_ENTITY_TOO_LARGE"
	ModelAndViewStatusREQUESTENTITYTOOLARGE string = "REQUEST_ENTITY_TOO_LARGE"

	// ModelAndViewStatusREQUESTHEADERFIELDSTOOLARGE captures enum value "REQUEST_HEADER_FIELDS_TOO_LARGE"
	ModelAndViewStatusREQUESTHEADERFIELDSTOOLARGE string = "REQUEST_HEADER_FIELDS_TOO_LARGE"

	// ModelAndViewStatusREQUESTTIMEOUT captures enum value "REQUEST_TIMEOUT"
	ModelAndViewStatusREQUESTTIMEOUT string = "REQUEST_TIMEOUT"

	// ModelAndViewStatusREQUESTURITOOLONG captures enum value "REQUEST_URI_TOO_LONG"
	ModelAndViewStatusREQUESTURITOOLONG string = "REQUEST_URI_TOO_LONG"

	// ModelAndViewStatusRESETCONTENT captures enum value "RESET_CONTENT"
	ModelAndViewStatusRESETCONTENT string = "RESET_CONTENT"

	// ModelAndViewStatusSEEOTHER captures enum value "SEE_OTHER"
	ModelAndViewStatusSEEOTHER string = "SEE_OTHER"

	// ModelAndViewStatusSERVICEUNAVAILABLE captures enum value "SERVICE_UNAVAILABLE"
	ModelAndViewStatusSERVICEUNAVAILABLE string = "SERVICE_UNAVAILABLE"

	// ModelAndViewStatusSWITCHINGPROTOCOLS captures enum value "SWITCHING_PROTOCOLS"
	ModelAndViewStatusSWITCHINGPROTOCOLS string = "SWITCHING_PROTOCOLS"

	// ModelAndViewStatusTEMPORARYREDIRECT captures enum value "TEMPORARY_REDIRECT"
	ModelAndViewStatusTEMPORARYREDIRECT string = "TEMPORARY_REDIRECT"

	// ModelAndViewStatusTOOEARLY captures enum value "TOO_EARLY"
	ModelAndViewStatusTOOEARLY string = "TOO_EARLY"

	// ModelAndViewStatusTOOMANYREQUESTS captures enum value "TOO_MANY_REQUESTS"
	ModelAndViewStatusTOOMANYREQUESTS string = "TOO_MANY_REQUESTS"

	// ModelAndViewStatusUNAUTHORIZED captures enum value "UNAUTHORIZED"
	ModelAndViewStatusUNAUTHORIZED string = "UNAUTHORIZED"

	// ModelAndViewStatusUNAVAILABLEFORLEGALREASONS captures enum value "UNAVAILABLE_FOR_LEGAL_REASONS"
	ModelAndViewStatusUNAVAILABLEFORLEGALREASONS string = "UNAVAILABLE_FOR_LEGAL_REASONS"

	// ModelAndViewStatusUNPROCESSABLEENTITY captures enum value "UNPROCESSABLE_ENTITY"
	ModelAndViewStatusUNPROCESSABLEENTITY string = "UNPROCESSABLE_ENTITY"

	// ModelAndViewStatusUNSUPPORTEDMEDIATYPE captures enum value "UNSUPPORTED_MEDIA_TYPE"
	ModelAndViewStatusUNSUPPORTEDMEDIATYPE string = "UNSUPPORTED_MEDIA_TYPE"

	// ModelAndViewStatusUPGRADEREQUIRED captures enum value "UPGRADE_REQUIRED"
	ModelAndViewStatusUPGRADEREQUIRED string = "UPGRADE_REQUIRED"

	// ModelAndViewStatusURITOOLONG captures enum value "URI_TOO_LONG"
	ModelAndViewStatusURITOOLONG string = "URI_TOO_LONG"

	// ModelAndViewStatusUSEPROXY captures enum value "USE_PROXY"
	ModelAndViewStatusUSEPROXY string = "USE_PROXY"

	// ModelAndViewStatusVARIANTALSONEGOTIATES captures enum value "VARIANT_ALSO_NEGOTIATES"
	ModelAndViewStatusVARIANTALSONEGOTIATES string = "VARIANT_ALSO_NEGOTIATES"
)

// prop value enum
func (m *ModelAndView) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, modelAndViewTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ModelAndView) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ModelAndView) validateView(formats strfmt.Registry) error {
	if swag.IsZero(m.View) { // not required
		return nil
	}

	if m.View != nil {
		if err := m.View.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this model and view based on the context it is used
func (m *ModelAndView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelAndView) contextValidateView(ctx context.Context, formats strfmt.Registry) error {

	if m.View != nil {

		if swag.IsZero(m.View) { // not required
			return nil
		}

		if err := m.View.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("view")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("view")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelAndView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelAndView) UnmarshalBinary(b []byte) error {
	var res ModelAndView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
