// Code generated by go-swagger; DO NOT EDIT.

package benefit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateTransferRuleUsingPUTReader is a Reader for the UpdateTransferRuleUsingPUT structure.
type UpdateTransferRuleUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTransferRuleUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTransferRuleUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateTransferRuleUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateTransferRuleUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateTransferRuleUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateTransferRuleUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTransferRuleUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateTransferRuleUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/benefit/transferRule] updateTransferRuleUsingPUT", response, response.Code())
	}
}

// NewUpdateTransferRuleUsingPUTOK creates a UpdateTransferRuleUsingPUTOK with default headers values
func NewUpdateTransferRuleUsingPUTOK() *UpdateTransferRuleUsingPUTOK {
	return &UpdateTransferRuleUsingPUTOK{}
}

/*
UpdateTransferRuleUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateTransferRuleUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update transfer rule using p u t o k response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update transfer rule using p u t o k response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t o k response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update transfer rule using p u t o k response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update transfer rule using p u t o k response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update transfer rule using p u t o k response
func (o *UpdateTransferRuleUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateTransferRuleUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateTransferRuleUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdateTransferRuleUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateTransferRuleUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTransferRuleUsingPUTCreated creates a UpdateTransferRuleUsingPUTCreated with default headers values
func NewUpdateTransferRuleUsingPUTCreated() *UpdateTransferRuleUsingPUTCreated {
	return &UpdateTransferRuleUsingPUTCreated{}
}

/*
UpdateTransferRuleUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateTransferRuleUsingPUTCreated struct {
}

// IsSuccess returns true when this update transfer rule using p u t created response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update transfer rule using p u t created response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t created response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update transfer rule using p u t created response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update transfer rule using p u t created response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update transfer rule using p u t created response
func (o *UpdateTransferRuleUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateTransferRuleUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTCreated", 201)
}

func (o *UpdateTransferRuleUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTCreated", 201)
}

func (o *UpdateTransferRuleUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTransferRuleUsingPUTBadRequest creates a UpdateTransferRuleUsingPUTBadRequest with default headers values
func NewUpdateTransferRuleUsingPUTBadRequest() *UpdateTransferRuleUsingPUTBadRequest {
	return &UpdateTransferRuleUsingPUTBadRequest{}
}

/*
UpdateTransferRuleUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateTransferRuleUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update transfer rule using p u t bad request response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update transfer rule using p u t bad request response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t bad request response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update transfer rule using p u t bad request response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update transfer rule using p u t bad request response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update transfer rule using p u t bad request response
func (o *UpdateTransferRuleUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateTransferRuleUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTBadRequest", 400)
}

func (o *UpdateTransferRuleUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTBadRequest", 400)
}

func (o *UpdateTransferRuleUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTransferRuleUsingPUTUnauthorized creates a UpdateTransferRuleUsingPUTUnauthorized with default headers values
func NewUpdateTransferRuleUsingPUTUnauthorized() *UpdateTransferRuleUsingPUTUnauthorized {
	return &UpdateTransferRuleUsingPUTUnauthorized{}
}

/*
UpdateTransferRuleUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateTransferRuleUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update transfer rule using p u t unauthorized response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update transfer rule using p u t unauthorized response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t unauthorized response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update transfer rule using p u t unauthorized response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update transfer rule using p u t unauthorized response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update transfer rule using p u t unauthorized response
func (o *UpdateTransferRuleUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateTransferRuleUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateTransferRuleUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTUnauthorized", 401)
}

func (o *UpdateTransferRuleUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTransferRuleUsingPUTForbidden creates a UpdateTransferRuleUsingPUTForbidden with default headers values
func NewUpdateTransferRuleUsingPUTForbidden() *UpdateTransferRuleUsingPUTForbidden {
	return &UpdateTransferRuleUsingPUTForbidden{}
}

/*
UpdateTransferRuleUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateTransferRuleUsingPUTForbidden struct {
}

// IsSuccess returns true when this update transfer rule using p u t forbidden response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update transfer rule using p u t forbidden response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t forbidden response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update transfer rule using p u t forbidden response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update transfer rule using p u t forbidden response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update transfer rule using p u t forbidden response
func (o *UpdateTransferRuleUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateTransferRuleUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTForbidden", 403)
}

func (o *UpdateTransferRuleUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTForbidden", 403)
}

func (o *UpdateTransferRuleUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTransferRuleUsingPUTNotFound creates a UpdateTransferRuleUsingPUTNotFound with default headers values
func NewUpdateTransferRuleUsingPUTNotFound() *UpdateTransferRuleUsingPUTNotFound {
	return &UpdateTransferRuleUsingPUTNotFound{}
}

/*
UpdateTransferRuleUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateTransferRuleUsingPUTNotFound struct {
}

// IsSuccess returns true when this update transfer rule using p u t not found response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update transfer rule using p u t not found response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t not found response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update transfer rule using p u t not found response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update transfer rule using p u t not found response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update transfer rule using p u t not found response
func (o *UpdateTransferRuleUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateTransferRuleUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTNotFound", 404)
}

func (o *UpdateTransferRuleUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTNotFound", 404)
}

func (o *UpdateTransferRuleUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTransferRuleUsingPUTInternalServerError creates a UpdateTransferRuleUsingPUTInternalServerError with default headers values
func NewUpdateTransferRuleUsingPUTInternalServerError() *UpdateTransferRuleUsingPUTInternalServerError {
	return &UpdateTransferRuleUsingPUTInternalServerError{}
}

/*
UpdateTransferRuleUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateTransferRuleUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update transfer rule using p u t internal server error response has a 2xx status code
func (o *UpdateTransferRuleUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update transfer rule using p u t internal server error response has a 3xx status code
func (o *UpdateTransferRuleUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update transfer rule using p u t internal server error response has a 4xx status code
func (o *UpdateTransferRuleUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update transfer rule using p u t internal server error response has a 5xx status code
func (o *UpdateTransferRuleUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update transfer rule using p u t internal server error response a status code equal to that given
func (o *UpdateTransferRuleUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update transfer rule using p u t internal server error response
func (o *UpdateTransferRuleUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateTransferRuleUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTInternalServerError", 500)
}

func (o *UpdateTransferRuleUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/transferRule][%d] updateTransferRuleUsingPUTInternalServerError", 500)
}

func (o *UpdateTransferRuleUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
