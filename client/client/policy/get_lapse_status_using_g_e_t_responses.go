// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetLapseStatusUsingGETReader is a Reader for the GetLapseStatusUsingGET structure.
type GetLapseStatusUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLapseStatusUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetLapseStatusUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetLapseStatusUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetLapseStatusUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetLapseStatusUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetLapseStatusUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetLapseStatusUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/lapseStatus] getLapseStatusUsingGET", response, response.Code())
	}
}

// NewGetLapseStatusUsingGETOK creates a GetLapseStatusUsingGETOK with default headers values
func NewGetLapseStatusUsingGETOK() *GetLapseStatusUsingGETOK {
	return &GetLapseStatusUsingGETOK{}
}

/*
GetLapseStatusUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetLapseStatusUsingGETOK struct {
	Payload *models.ResponseWrapperPolicyDTO
}

// IsSuccess returns true when this get lapse status using g e t o k response has a 2xx status code
func (o *GetLapseStatusUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get lapse status using g e t o k response has a 3xx status code
func (o *GetLapseStatusUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lapse status using g e t o k response has a 4xx status code
func (o *GetLapseStatusUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lapse status using g e t o k response has a 5xx status code
func (o *GetLapseStatusUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get lapse status using g e t o k response a status code equal to that given
func (o *GetLapseStatusUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get lapse status using g e t o k response
func (o *GetLapseStatusUsingGETOK) Code() int {
	return 200
}

func (o *GetLapseStatusUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETOK %s", 200, payload)
}

func (o *GetLapseStatusUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETOK %s", 200, payload)
}

func (o *GetLapseStatusUsingGETOK) GetPayload() *models.ResponseWrapperPolicyDTO {
	return o.Payload
}

func (o *GetLapseStatusUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperPolicyDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLapseStatusUsingGETBadRequest creates a GetLapseStatusUsingGETBadRequest with default headers values
func NewGetLapseStatusUsingGETBadRequest() *GetLapseStatusUsingGETBadRequest {
	return &GetLapseStatusUsingGETBadRequest{}
}

/*
GetLapseStatusUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetLapseStatusUsingGETBadRequest struct {
}

// IsSuccess returns true when this get lapse status using g e t bad request response has a 2xx status code
func (o *GetLapseStatusUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lapse status using g e t bad request response has a 3xx status code
func (o *GetLapseStatusUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lapse status using g e t bad request response has a 4xx status code
func (o *GetLapseStatusUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lapse status using g e t bad request response has a 5xx status code
func (o *GetLapseStatusUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get lapse status using g e t bad request response a status code equal to that given
func (o *GetLapseStatusUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get lapse status using g e t bad request response
func (o *GetLapseStatusUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetLapseStatusUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETBadRequest", 400)
}

func (o *GetLapseStatusUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETBadRequest", 400)
}

func (o *GetLapseStatusUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLapseStatusUsingGETUnauthorized creates a GetLapseStatusUsingGETUnauthorized with default headers values
func NewGetLapseStatusUsingGETUnauthorized() *GetLapseStatusUsingGETUnauthorized {
	return &GetLapseStatusUsingGETUnauthorized{}
}

/*
GetLapseStatusUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetLapseStatusUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get lapse status using g e t unauthorized response has a 2xx status code
func (o *GetLapseStatusUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lapse status using g e t unauthorized response has a 3xx status code
func (o *GetLapseStatusUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lapse status using g e t unauthorized response has a 4xx status code
func (o *GetLapseStatusUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lapse status using g e t unauthorized response has a 5xx status code
func (o *GetLapseStatusUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get lapse status using g e t unauthorized response a status code equal to that given
func (o *GetLapseStatusUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get lapse status using g e t unauthorized response
func (o *GetLapseStatusUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetLapseStatusUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETUnauthorized", 401)
}

func (o *GetLapseStatusUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETUnauthorized", 401)
}

func (o *GetLapseStatusUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLapseStatusUsingGETForbidden creates a GetLapseStatusUsingGETForbidden with default headers values
func NewGetLapseStatusUsingGETForbidden() *GetLapseStatusUsingGETForbidden {
	return &GetLapseStatusUsingGETForbidden{}
}

/*
GetLapseStatusUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetLapseStatusUsingGETForbidden struct {
}

// IsSuccess returns true when this get lapse status using g e t forbidden response has a 2xx status code
func (o *GetLapseStatusUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lapse status using g e t forbidden response has a 3xx status code
func (o *GetLapseStatusUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lapse status using g e t forbidden response has a 4xx status code
func (o *GetLapseStatusUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lapse status using g e t forbidden response has a 5xx status code
func (o *GetLapseStatusUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get lapse status using g e t forbidden response a status code equal to that given
func (o *GetLapseStatusUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get lapse status using g e t forbidden response
func (o *GetLapseStatusUsingGETForbidden) Code() int {
	return 403
}

func (o *GetLapseStatusUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETForbidden", 403)
}

func (o *GetLapseStatusUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETForbidden", 403)
}

func (o *GetLapseStatusUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLapseStatusUsingGETNotFound creates a GetLapseStatusUsingGETNotFound with default headers values
func NewGetLapseStatusUsingGETNotFound() *GetLapseStatusUsingGETNotFound {
	return &GetLapseStatusUsingGETNotFound{}
}

/*
GetLapseStatusUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetLapseStatusUsingGETNotFound struct {
}

// IsSuccess returns true when this get lapse status using g e t not found response has a 2xx status code
func (o *GetLapseStatusUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lapse status using g e t not found response has a 3xx status code
func (o *GetLapseStatusUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lapse status using g e t not found response has a 4xx status code
func (o *GetLapseStatusUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get lapse status using g e t not found response has a 5xx status code
func (o *GetLapseStatusUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get lapse status using g e t not found response a status code equal to that given
func (o *GetLapseStatusUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get lapse status using g e t not found response
func (o *GetLapseStatusUsingGETNotFound) Code() int {
	return 404
}

func (o *GetLapseStatusUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETNotFound", 404)
}

func (o *GetLapseStatusUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETNotFound", 404)
}

func (o *GetLapseStatusUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetLapseStatusUsingGETInternalServerError creates a GetLapseStatusUsingGETInternalServerError with default headers values
func NewGetLapseStatusUsingGETInternalServerError() *GetLapseStatusUsingGETInternalServerError {
	return &GetLapseStatusUsingGETInternalServerError{}
}

/*
GetLapseStatusUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetLapseStatusUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get lapse status using g e t internal server error response has a 2xx status code
func (o *GetLapseStatusUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get lapse status using g e t internal server error response has a 3xx status code
func (o *GetLapseStatusUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get lapse status using g e t internal server error response has a 4xx status code
func (o *GetLapseStatusUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get lapse status using g e t internal server error response has a 5xx status code
func (o *GetLapseStatusUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get lapse status using g e t internal server error response a status code equal to that given
func (o *GetLapseStatusUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get lapse status using g e t internal server error response
func (o *GetLapseStatusUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetLapseStatusUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETInternalServerError", 500)
}

func (o *GetLapseStatusUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/lapseStatus][%d] getLapseStatusUsingGETInternalServerError", 500)
}

func (o *GetLapseStatusUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
