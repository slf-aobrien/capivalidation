// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetProcessingRuleUsingGETParams creates a new GetProcessingRuleUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProcessingRuleUsingGETParams() *GetProcessingRuleUsingGETParams {
	return &GetProcessingRuleUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProcessingRuleUsingGETParamsWithTimeout creates a new GetProcessingRuleUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetProcessingRuleUsingGETParamsWithTimeout(timeout time.Duration) *GetProcessingRuleUsingGETParams {
	return &GetProcessingRuleUsingGETParams{
		timeout: timeout,
	}
}

// NewGetProcessingRuleUsingGETParamsWithContext creates a new GetProcessingRuleUsingGETParams object
// with the ability to set a context for a request.
func NewGetProcessingRuleUsingGETParamsWithContext(ctx context.Context) *GetProcessingRuleUsingGETParams {
	return &GetProcessingRuleUsingGETParams{
		Context: ctx,
	}
}

// NewGetProcessingRuleUsingGETParamsWithHTTPClient creates a new GetProcessingRuleUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProcessingRuleUsingGETParamsWithHTTPClient(client *http.Client) *GetProcessingRuleUsingGETParams {
	return &GetProcessingRuleUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetProcessingRuleUsingGETParams contains all the parameters to send to the API endpoint

	for the get processing rule using g e t operation.

	Typically these are written to a http.Request.
*/
type GetProcessingRuleUsingGETParams struct {

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber string

	/* ProcessMethodCodes.

	   processMethodCodes
	*/
	ProcessMethodCodes *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get processing rule using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProcessingRuleUsingGETParams) WithDefaults() *GetProcessingRuleUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get processing rule using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProcessingRuleUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithTimeout(timeout time.Duration) *GetProcessingRuleUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithContext(ctx context.Context) *GetProcessingRuleUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithHTTPClient(client *http.Client) *GetProcessingRuleUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffectiveDate adds the effectiveDate to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithEffectiveDate(effectiveDate string) *GetProcessingRuleUsingGETParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithPolicyNumber adds the policyNumber to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithPolicyNumber(policyNumber string) *GetProcessingRuleUsingGETParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetPolicyNumber(policyNumber string) {
	o.PolicyNumber = policyNumber
}

// WithProcessMethodCodes adds the processMethodCodes to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithProcessMethodCodes(processMethodCodes *string) *GetProcessingRuleUsingGETParams {
	o.SetProcessMethodCodes(processMethodCodes)
	return o
}

// SetProcessMethodCodes adds the processMethodCodes to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetProcessMethodCodes(processMethodCodes *string) {
	o.ProcessMethodCodes = processMethodCodes
}

// WithRequestApplication adds the requestApplication to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithRequestApplication(requestApplication string) *GetProcessingRuleUsingGETParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithRequestUser(requestUser string) *GetProcessingRuleUsingGETParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WithVarianceFormat adds the varianceFormat to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithVarianceFormat(varianceFormat string) *GetProcessingRuleUsingGETParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetVarianceFormat(varianceFormat string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) WithVarianceLevel(varianceLevel *string) *GetProcessingRuleUsingGETParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the get processing rule using g e t params
func (o *GetProcessingRuleUsingGETParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *GetProcessingRuleUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	// query param policyNumber
	qrPolicyNumber := o.PolicyNumber
	qPolicyNumber := qrPolicyNumber
	if qPolicyNumber != "" {

		if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
			return err
		}
	}

	if o.ProcessMethodCodes != nil {

		// query param processMethodCodes
		var qrProcessMethodCodes string

		if o.ProcessMethodCodes != nil {
			qrProcessMethodCodes = *o.ProcessMethodCodes
		}
		qProcessMethodCodes := qrProcessMethodCodes
		if qProcessMethodCodes != "" {

			if err := r.SetQueryParam("processMethodCodes", qProcessMethodCodes); err != nil {
				return err
			}
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	// query param varianceFormat
	qrVarianceFormat := o.VarianceFormat
	qVarianceFormat := qrVarianceFormat
	if qVarianceFormat != "" {

		if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
			return err
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
