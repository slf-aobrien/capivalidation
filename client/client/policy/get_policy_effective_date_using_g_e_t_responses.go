// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetPolicyEffectiveDateUsingGETReader is a Reader for the GetPolicyEffectiveDateUsingGET structure.
type GetPolicyEffectiveDateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPolicyEffectiveDateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPolicyEffectiveDateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPolicyEffectiveDateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPolicyEffectiveDateUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPolicyEffectiveDateUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPolicyEffectiveDateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPolicyEffectiveDateUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/policyEffectiveDate] getPolicyEffectiveDateUsingGET", response, response.Code())
	}
}

// NewGetPolicyEffectiveDateUsingGETOK creates a GetPolicyEffectiveDateUsingGETOK with default headers values
func NewGetPolicyEffectiveDateUsingGETOK() *GetPolicyEffectiveDateUsingGETOK {
	return &GetPolicyEffectiveDateUsingGETOK{}
}

/*
GetPolicyEffectiveDateUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetPolicyEffectiveDateUsingGETOK struct {
	Payload *models.ResponseWrapperString
}

// IsSuccess returns true when this get policy effective date using g e t o k response has a 2xx status code
func (o *GetPolicyEffectiveDateUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get policy effective date using g e t o k response has a 3xx status code
func (o *GetPolicyEffectiveDateUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy effective date using g e t o k response has a 4xx status code
func (o *GetPolicyEffectiveDateUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policy effective date using g e t o k response has a 5xx status code
func (o *GetPolicyEffectiveDateUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy effective date using g e t o k response a status code equal to that given
func (o *GetPolicyEffectiveDateUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get policy effective date using g e t o k response
func (o *GetPolicyEffectiveDateUsingGETOK) Code() int {
	return 200
}

func (o *GetPolicyEffectiveDateUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETOK %s", 200, payload)
}

func (o *GetPolicyEffectiveDateUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETOK %s", 200, payload)
}

func (o *GetPolicyEffectiveDateUsingGETOK) GetPayload() *models.ResponseWrapperString {
	return o.Payload
}

func (o *GetPolicyEffectiveDateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperString)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPolicyEffectiveDateUsingGETBadRequest creates a GetPolicyEffectiveDateUsingGETBadRequest with default headers values
func NewGetPolicyEffectiveDateUsingGETBadRequest() *GetPolicyEffectiveDateUsingGETBadRequest {
	return &GetPolicyEffectiveDateUsingGETBadRequest{}
}

/*
GetPolicyEffectiveDateUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetPolicyEffectiveDateUsingGETBadRequest struct {
}

// IsSuccess returns true when this get policy effective date using g e t bad request response has a 2xx status code
func (o *GetPolicyEffectiveDateUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy effective date using g e t bad request response has a 3xx status code
func (o *GetPolicyEffectiveDateUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy effective date using g e t bad request response has a 4xx status code
func (o *GetPolicyEffectiveDateUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy effective date using g e t bad request response has a 5xx status code
func (o *GetPolicyEffectiveDateUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy effective date using g e t bad request response a status code equal to that given
func (o *GetPolicyEffectiveDateUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get policy effective date using g e t bad request response
func (o *GetPolicyEffectiveDateUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetPolicyEffectiveDateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETBadRequest", 400)
}

func (o *GetPolicyEffectiveDateUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETBadRequest", 400)
}

func (o *GetPolicyEffectiveDateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyEffectiveDateUsingGETUnauthorized creates a GetPolicyEffectiveDateUsingGETUnauthorized with default headers values
func NewGetPolicyEffectiveDateUsingGETUnauthorized() *GetPolicyEffectiveDateUsingGETUnauthorized {
	return &GetPolicyEffectiveDateUsingGETUnauthorized{}
}

/*
GetPolicyEffectiveDateUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetPolicyEffectiveDateUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get policy effective date using g e t unauthorized response has a 2xx status code
func (o *GetPolicyEffectiveDateUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy effective date using g e t unauthorized response has a 3xx status code
func (o *GetPolicyEffectiveDateUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy effective date using g e t unauthorized response has a 4xx status code
func (o *GetPolicyEffectiveDateUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy effective date using g e t unauthorized response has a 5xx status code
func (o *GetPolicyEffectiveDateUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy effective date using g e t unauthorized response a status code equal to that given
func (o *GetPolicyEffectiveDateUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get policy effective date using g e t unauthorized response
func (o *GetPolicyEffectiveDateUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetPolicyEffectiveDateUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETUnauthorized", 401)
}

func (o *GetPolicyEffectiveDateUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETUnauthorized", 401)
}

func (o *GetPolicyEffectiveDateUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyEffectiveDateUsingGETForbidden creates a GetPolicyEffectiveDateUsingGETForbidden with default headers values
func NewGetPolicyEffectiveDateUsingGETForbidden() *GetPolicyEffectiveDateUsingGETForbidden {
	return &GetPolicyEffectiveDateUsingGETForbidden{}
}

/*
GetPolicyEffectiveDateUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetPolicyEffectiveDateUsingGETForbidden struct {
}

// IsSuccess returns true when this get policy effective date using g e t forbidden response has a 2xx status code
func (o *GetPolicyEffectiveDateUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy effective date using g e t forbidden response has a 3xx status code
func (o *GetPolicyEffectiveDateUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy effective date using g e t forbidden response has a 4xx status code
func (o *GetPolicyEffectiveDateUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy effective date using g e t forbidden response has a 5xx status code
func (o *GetPolicyEffectiveDateUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy effective date using g e t forbidden response a status code equal to that given
func (o *GetPolicyEffectiveDateUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get policy effective date using g e t forbidden response
func (o *GetPolicyEffectiveDateUsingGETForbidden) Code() int {
	return 403
}

func (o *GetPolicyEffectiveDateUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETForbidden", 403)
}

func (o *GetPolicyEffectiveDateUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETForbidden", 403)
}

func (o *GetPolicyEffectiveDateUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyEffectiveDateUsingGETNotFound creates a GetPolicyEffectiveDateUsingGETNotFound with default headers values
func NewGetPolicyEffectiveDateUsingGETNotFound() *GetPolicyEffectiveDateUsingGETNotFound {
	return &GetPolicyEffectiveDateUsingGETNotFound{}
}

/*
GetPolicyEffectiveDateUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetPolicyEffectiveDateUsingGETNotFound struct {
}

// IsSuccess returns true when this get policy effective date using g e t not found response has a 2xx status code
func (o *GetPolicyEffectiveDateUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy effective date using g e t not found response has a 3xx status code
func (o *GetPolicyEffectiveDateUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy effective date using g e t not found response has a 4xx status code
func (o *GetPolicyEffectiveDateUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get policy effective date using g e t not found response has a 5xx status code
func (o *GetPolicyEffectiveDateUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get policy effective date using g e t not found response a status code equal to that given
func (o *GetPolicyEffectiveDateUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get policy effective date using g e t not found response
func (o *GetPolicyEffectiveDateUsingGETNotFound) Code() int {
	return 404
}

func (o *GetPolicyEffectiveDateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETNotFound", 404)
}

func (o *GetPolicyEffectiveDateUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETNotFound", 404)
}

func (o *GetPolicyEffectiveDateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetPolicyEffectiveDateUsingGETInternalServerError creates a GetPolicyEffectiveDateUsingGETInternalServerError with default headers values
func NewGetPolicyEffectiveDateUsingGETInternalServerError() *GetPolicyEffectiveDateUsingGETInternalServerError {
	return &GetPolicyEffectiveDateUsingGETInternalServerError{}
}

/*
GetPolicyEffectiveDateUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetPolicyEffectiveDateUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get policy effective date using g e t internal server error response has a 2xx status code
func (o *GetPolicyEffectiveDateUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get policy effective date using g e t internal server error response has a 3xx status code
func (o *GetPolicyEffectiveDateUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get policy effective date using g e t internal server error response has a 4xx status code
func (o *GetPolicyEffectiveDateUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get policy effective date using g e t internal server error response has a 5xx status code
func (o *GetPolicyEffectiveDateUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get policy effective date using g e t internal server error response a status code equal to that given
func (o *GetPolicyEffectiveDateUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get policy effective date using g e t internal server error response
func (o *GetPolicyEffectiveDateUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetPolicyEffectiveDateUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETInternalServerError", 500)
}

func (o *GetPolicyEffectiveDateUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyEffectiveDate][%d] getPolicyEffectiveDateUsingGETInternalServerError", 500)
}

func (o *GetPolicyEffectiveDateUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
