// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MemberDTORes MemberDTORes
//
// swagger:model MemberDTORes
type MemberDTORes struct {

	// address list
	AddressList []*AddressDTO `json:"addressList"`

	// email list
	EmailList []*EmailDTO `json:"emailList"`

	// member number
	MemberNumber string `json:"memberNumber,omitempty"`

	// member policy list
	MemberPolicyList []*MemberPolicyDTORes `json:"memberPolicyList"`

	// person
	Person *PersonDTORes `json:"person,omitempty"`

	// phone list
	PhoneList []*PhoneDTO `json:"phoneList"`
}

// Validate validates this member d t o res
func (m *MemberDTORes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberPolicyList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberDTORes) validateAddressList(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressList) { // not required
		return nil
	}

	for i := 0; i < len(m.AddressList); i++ {
		if swag.IsZero(m.AddressList[i]) { // not required
			continue
		}

		if m.AddressList[i] != nil {
			if err := m.AddressList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addressList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addressList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberDTORes) validateEmailList(formats strfmt.Registry) error {
	if swag.IsZero(m.EmailList) { // not required
		return nil
	}

	for i := 0; i < len(m.EmailList); i++ {
		if swag.IsZero(m.EmailList[i]) { // not required
			continue
		}

		if m.EmailList[i] != nil {
			if err := m.EmailList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberDTORes) validateMemberPolicyList(formats strfmt.Registry) error {
	if swag.IsZero(m.MemberPolicyList) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberPolicyList); i++ {
		if swag.IsZero(m.MemberPolicyList[i]) { // not required
			continue
		}

		if m.MemberPolicyList[i] != nil {
			if err := m.MemberPolicyList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberPolicyList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberPolicyList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberDTORes) validatePerson(formats strfmt.Registry) error {
	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *MemberDTORes) validatePhoneList(formats strfmt.Registry) error {
	if swag.IsZero(m.PhoneList) { // not required
		return nil
	}

	for i := 0; i < len(m.PhoneList); i++ {
		if swag.IsZero(m.PhoneList[i]) { // not required
			continue
		}

		if m.PhoneList[i] != nil {
			if err := m.PhoneList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phoneList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this member d t o res based on the context it is used
func (m *MemberDTORes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddressList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmailList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMemberPolicyList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhoneList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberDTORes) contextValidateAddressList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AddressList); i++ {

		if m.AddressList[i] != nil {

			if swag.IsZero(m.AddressList[i]) { // not required
				return nil
			}

			if err := m.AddressList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("addressList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("addressList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberDTORes) contextValidateEmailList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EmailList); i++ {

		if m.EmailList[i] != nil {

			if swag.IsZero(m.EmailList[i]) { // not required
				return nil
			}

			if err := m.EmailList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emailList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("emailList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberDTORes) contextValidateMemberPolicyList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MemberPolicyList); i++ {

		if m.MemberPolicyList[i] != nil {

			if swag.IsZero(m.MemberPolicyList[i]) { // not required
				return nil
			}

			if err := m.MemberPolicyList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("memberPolicyList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("memberPolicyList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MemberDTORes) contextValidatePerson(ctx context.Context, formats strfmt.Registry) error {

	if m.Person != nil {

		if swag.IsZero(m.Person) { // not required
			return nil
		}

		if err := m.Person.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *MemberDTORes) contextValidatePhoneList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PhoneList); i++ {

		if m.PhoneList[i] != nil {

			if swag.IsZero(m.PhoneList[i]) { // not required
				return nil
			}

			if err := m.PhoneList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phoneList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("phoneList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberDTORes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberDTORes) UnmarshalBinary(b []byte) error {
	var res MemberDTORes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
