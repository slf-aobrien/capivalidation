// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// PolicyLevelOptionsUsingGETReader is a Reader for the PolicyLevelOptionsUsingGET structure.
type PolicyLevelOptionsUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PolicyLevelOptionsUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPolicyLevelOptionsUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPolicyLevelOptionsUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPolicyLevelOptionsUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPolicyLevelOptionsUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPolicyLevelOptionsUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPolicyLevelOptionsUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/policyOptions] policyLevelOptionsUsingGET", response, response.Code())
	}
}

// NewPolicyLevelOptionsUsingGETOK creates a PolicyLevelOptionsUsingGETOK with default headers values
func NewPolicyLevelOptionsUsingGETOK() *PolicyLevelOptionsUsingGETOK {
	return &PolicyLevelOptionsUsingGETOK{}
}

/*
PolicyLevelOptionsUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type PolicyLevelOptionsUsingGETOK struct {
	Payload *models.ResponseWrapperMapStringPolicyOptionDTO
}

// IsSuccess returns true when this policy level options using g e t o k response has a 2xx status code
func (o *PolicyLevelOptionsUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this policy level options using g e t o k response has a 3xx status code
func (o *PolicyLevelOptionsUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy level options using g e t o k response has a 4xx status code
func (o *PolicyLevelOptionsUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this policy level options using g e t o k response has a 5xx status code
func (o *PolicyLevelOptionsUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this policy level options using g e t o k response a status code equal to that given
func (o *PolicyLevelOptionsUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the policy level options using g e t o k response
func (o *PolicyLevelOptionsUsingGETOK) Code() int {
	return 200
}

func (o *PolicyLevelOptionsUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETOK %s", 200, payload)
}

func (o *PolicyLevelOptionsUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETOK %s", 200, payload)
}

func (o *PolicyLevelOptionsUsingGETOK) GetPayload() *models.ResponseWrapperMapStringPolicyOptionDTO {
	return o.Payload
}

func (o *PolicyLevelOptionsUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperMapStringPolicyOptionDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPolicyLevelOptionsUsingGETBadRequest creates a PolicyLevelOptionsUsingGETBadRequest with default headers values
func NewPolicyLevelOptionsUsingGETBadRequest() *PolicyLevelOptionsUsingGETBadRequest {
	return &PolicyLevelOptionsUsingGETBadRequest{}
}

/*
PolicyLevelOptionsUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PolicyLevelOptionsUsingGETBadRequest struct {
}

// IsSuccess returns true when this policy level options using g e t bad request response has a 2xx status code
func (o *PolicyLevelOptionsUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy level options using g e t bad request response has a 3xx status code
func (o *PolicyLevelOptionsUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy level options using g e t bad request response has a 4xx status code
func (o *PolicyLevelOptionsUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy level options using g e t bad request response has a 5xx status code
func (o *PolicyLevelOptionsUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this policy level options using g e t bad request response a status code equal to that given
func (o *PolicyLevelOptionsUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the policy level options using g e t bad request response
func (o *PolicyLevelOptionsUsingGETBadRequest) Code() int {
	return 400
}

func (o *PolicyLevelOptionsUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETBadRequest", 400)
}

func (o *PolicyLevelOptionsUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETBadRequest", 400)
}

func (o *PolicyLevelOptionsUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPolicyLevelOptionsUsingGETUnauthorized creates a PolicyLevelOptionsUsingGETUnauthorized with default headers values
func NewPolicyLevelOptionsUsingGETUnauthorized() *PolicyLevelOptionsUsingGETUnauthorized {
	return &PolicyLevelOptionsUsingGETUnauthorized{}
}

/*
PolicyLevelOptionsUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PolicyLevelOptionsUsingGETUnauthorized struct {
}

// IsSuccess returns true when this policy level options using g e t unauthorized response has a 2xx status code
func (o *PolicyLevelOptionsUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy level options using g e t unauthorized response has a 3xx status code
func (o *PolicyLevelOptionsUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy level options using g e t unauthorized response has a 4xx status code
func (o *PolicyLevelOptionsUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy level options using g e t unauthorized response has a 5xx status code
func (o *PolicyLevelOptionsUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this policy level options using g e t unauthorized response a status code equal to that given
func (o *PolicyLevelOptionsUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the policy level options using g e t unauthorized response
func (o *PolicyLevelOptionsUsingGETUnauthorized) Code() int {
	return 401
}

func (o *PolicyLevelOptionsUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETUnauthorized", 401)
}

func (o *PolicyLevelOptionsUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETUnauthorized", 401)
}

func (o *PolicyLevelOptionsUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPolicyLevelOptionsUsingGETForbidden creates a PolicyLevelOptionsUsingGETForbidden with default headers values
func NewPolicyLevelOptionsUsingGETForbidden() *PolicyLevelOptionsUsingGETForbidden {
	return &PolicyLevelOptionsUsingGETForbidden{}
}

/*
PolicyLevelOptionsUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PolicyLevelOptionsUsingGETForbidden struct {
}

// IsSuccess returns true when this policy level options using g e t forbidden response has a 2xx status code
func (o *PolicyLevelOptionsUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy level options using g e t forbidden response has a 3xx status code
func (o *PolicyLevelOptionsUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy level options using g e t forbidden response has a 4xx status code
func (o *PolicyLevelOptionsUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy level options using g e t forbidden response has a 5xx status code
func (o *PolicyLevelOptionsUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this policy level options using g e t forbidden response a status code equal to that given
func (o *PolicyLevelOptionsUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the policy level options using g e t forbidden response
func (o *PolicyLevelOptionsUsingGETForbidden) Code() int {
	return 403
}

func (o *PolicyLevelOptionsUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETForbidden", 403)
}

func (o *PolicyLevelOptionsUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETForbidden", 403)
}

func (o *PolicyLevelOptionsUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPolicyLevelOptionsUsingGETNotFound creates a PolicyLevelOptionsUsingGETNotFound with default headers values
func NewPolicyLevelOptionsUsingGETNotFound() *PolicyLevelOptionsUsingGETNotFound {
	return &PolicyLevelOptionsUsingGETNotFound{}
}

/*
PolicyLevelOptionsUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PolicyLevelOptionsUsingGETNotFound struct {
}

// IsSuccess returns true when this policy level options using g e t not found response has a 2xx status code
func (o *PolicyLevelOptionsUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy level options using g e t not found response has a 3xx status code
func (o *PolicyLevelOptionsUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy level options using g e t not found response has a 4xx status code
func (o *PolicyLevelOptionsUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this policy level options using g e t not found response has a 5xx status code
func (o *PolicyLevelOptionsUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this policy level options using g e t not found response a status code equal to that given
func (o *PolicyLevelOptionsUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the policy level options using g e t not found response
func (o *PolicyLevelOptionsUsingGETNotFound) Code() int {
	return 404
}

func (o *PolicyLevelOptionsUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETNotFound", 404)
}

func (o *PolicyLevelOptionsUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETNotFound", 404)
}

func (o *PolicyLevelOptionsUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPolicyLevelOptionsUsingGETInternalServerError creates a PolicyLevelOptionsUsingGETInternalServerError with default headers values
func NewPolicyLevelOptionsUsingGETInternalServerError() *PolicyLevelOptionsUsingGETInternalServerError {
	return &PolicyLevelOptionsUsingGETInternalServerError{}
}

/*
PolicyLevelOptionsUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PolicyLevelOptionsUsingGETInternalServerError struct {
}

// IsSuccess returns true when this policy level options using g e t internal server error response has a 2xx status code
func (o *PolicyLevelOptionsUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this policy level options using g e t internal server error response has a 3xx status code
func (o *PolicyLevelOptionsUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this policy level options using g e t internal server error response has a 4xx status code
func (o *PolicyLevelOptionsUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this policy level options using g e t internal server error response has a 5xx status code
func (o *PolicyLevelOptionsUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this policy level options using g e t internal server error response a status code equal to that given
func (o *PolicyLevelOptionsUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the policy level options using g e t internal server error response
func (o *PolicyLevelOptionsUsingGETInternalServerError) Code() int {
	return 500
}

func (o *PolicyLevelOptionsUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETInternalServerError", 500)
}

func (o *PolicyLevelOptionsUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/policyOptions][%d] policyLevelOptionsUsingGETInternalServerError", 500)
}

func (o *PolicyLevelOptionsUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
