// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CompensationEntityDTO CompensationEntityDTO
//
// swagger:model CompensationEntityDTO
type CompensationEntityDTO struct {

	// agent rule d t o
	AgentRuleDTO *AgentRuleDTO `json:"agentRuleDTO,omitempty"`

	// commission rule key
	CommissionRuleKey string `json:"commissionRuleKey,omitempty"`

	// commission scale key
	CommissionScaleKey string `json:"commissionScaleKey,omitempty"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// percent
	Percent string `json:"percent,omitempty"`

	// principle entity code
	PrincipleEntityCode string `json:"principleEntityCode,omitempty"`

	// scale Id
	ScaleID string `json:"scaleId,omitempty"`

	// service code
	ServiceCode string `json:"serviceCode,omitempty"`
}

// Validate validates this compensation entity d t o
func (m *CompensationEntityDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentRuleDTO(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompensationEntityDTO) validateAgentRuleDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentRuleDTO) { // not required
		return nil
	}

	if m.AgentRuleDTO != nil {
		if err := m.AgentRuleDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentRuleDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentRuleDTO")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this compensation entity d t o based on the context it is used
func (m *CompensationEntityDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentRuleDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompensationEntityDTO) contextValidateAgentRuleDTO(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentRuleDTO != nil {

		if swag.IsZero(m.AgentRuleDTO) { // not required
			return nil
		}

		if err := m.AgentRuleDTO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentRuleDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentRuleDTO")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompensationEntityDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompensationEntityDTO) UnmarshalBinary(b []byte) error {
	var res CompensationEntityDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
