// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Benefit Benefit
//
// swagger:model Benefit
type Benefit struct {

	// alias
	Alias string `json:"alias,omitempty"`

	// ben opt list
	BenOptList []*BenOpt `json:"benOptList"`

	// description
	Description string `json:"description,omitempty"`

	// efeed aliases
	EfeedAliases []*EmployeeFeedAlias `json:"efeedAliases"`

	// key
	Key string `json:"key,omitempty"`

	// ovrd bntp key
	OvrdBntpKey string `json:"ovrdBntpKey,omitempty"`

	// prepaid indicator
	PrepaidIndicator string `json:"prepaidIndicator,omitempty"`

	// short name
	ShortName string `json:"shortName,omitempty"`
}

// Validate validates this benefit
func (m *Benefit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBenOptList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEfeedAliases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Benefit) validateBenOptList(formats strfmt.Registry) error {
	if swag.IsZero(m.BenOptList) { // not required
		return nil
	}

	for i := 0; i < len(m.BenOptList); i++ {
		if swag.IsZero(m.BenOptList[i]) { // not required
			continue
		}

		if m.BenOptList[i] != nil {
			if err := m.BenOptList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benOptList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benOptList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Benefit) validateEfeedAliases(formats strfmt.Registry) error {
	if swag.IsZero(m.EfeedAliases) { // not required
		return nil
	}

	for i := 0; i < len(m.EfeedAliases); i++ {
		if swag.IsZero(m.EfeedAliases[i]) { // not required
			continue
		}

		if m.EfeedAliases[i] != nil {
			if err := m.EfeedAliases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("efeedAliases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("efeedAliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this benefit based on the context it is used
func (m *Benefit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBenOptList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEfeedAliases(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Benefit) contextValidateBenOptList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BenOptList); i++ {

		if m.BenOptList[i] != nil {

			if swag.IsZero(m.BenOptList[i]) { // not required
				return nil
			}

			if err := m.BenOptList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("benOptList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("benOptList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Benefit) contextValidateEfeedAliases(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EfeedAliases); i++ {

		if m.EfeedAliases[i] != nil {

			if swag.IsZero(m.EfeedAliases[i]) { // not required
				return nil
			}

			if err := m.EfeedAliases[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("efeedAliases" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("efeedAliases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Benefit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Benefit) UnmarshalBinary(b []byte) error {
	var res Benefit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
