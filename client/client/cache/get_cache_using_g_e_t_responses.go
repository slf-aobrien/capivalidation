// Code generated by go-swagger; DO NOT EDIT.

package cache

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetCacheUsingGETReader is a Reader for the GetCacheUsingGET structure.
type GetCacheUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCacheUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCacheUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCacheUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCacheUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCacheUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCacheUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCacheUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}] getCacheUsingGET", response, response.Code())
	}
}

// NewGetCacheUsingGETOK creates a GetCacheUsingGETOK with default headers values
func NewGetCacheUsingGETOK() *GetCacheUsingGETOK {
	return &GetCacheUsingGETOK{}
}

/*
GetCacheUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetCacheUsingGETOK struct {
	Payload *models.ResponseWrapperObject
}

// IsSuccess returns true when this get cache using g e t o k response has a 2xx status code
func (o *GetCacheUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cache using g e t o k response has a 3xx status code
func (o *GetCacheUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cache using g e t o k response has a 4xx status code
func (o *GetCacheUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cache using g e t o k response has a 5xx status code
func (o *GetCacheUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cache using g e t o k response a status code equal to that given
func (o *GetCacheUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cache using g e t o k response
func (o *GetCacheUsingGETOK) Code() int {
	return 200
}

func (o *GetCacheUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETOK %s", 200, payload)
}

func (o *GetCacheUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETOK %s", 200, payload)
}

func (o *GetCacheUsingGETOK) GetPayload() *models.ResponseWrapperObject {
	return o.Payload
}

func (o *GetCacheUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperObject)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCacheUsingGETBadRequest creates a GetCacheUsingGETBadRequest with default headers values
func NewGetCacheUsingGETBadRequest() *GetCacheUsingGETBadRequest {
	return &GetCacheUsingGETBadRequest{}
}

/*
GetCacheUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCacheUsingGETBadRequest struct {
}

// IsSuccess returns true when this get cache using g e t bad request response has a 2xx status code
func (o *GetCacheUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cache using g e t bad request response has a 3xx status code
func (o *GetCacheUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cache using g e t bad request response has a 4xx status code
func (o *GetCacheUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cache using g e t bad request response has a 5xx status code
func (o *GetCacheUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get cache using g e t bad request response a status code equal to that given
func (o *GetCacheUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get cache using g e t bad request response
func (o *GetCacheUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetCacheUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETBadRequest", 400)
}

func (o *GetCacheUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETBadRequest", 400)
}

func (o *GetCacheUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCacheUsingGETUnauthorized creates a GetCacheUsingGETUnauthorized with default headers values
func NewGetCacheUsingGETUnauthorized() *GetCacheUsingGETUnauthorized {
	return &GetCacheUsingGETUnauthorized{}
}

/*
GetCacheUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetCacheUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get cache using g e t unauthorized response has a 2xx status code
func (o *GetCacheUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cache using g e t unauthorized response has a 3xx status code
func (o *GetCacheUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cache using g e t unauthorized response has a 4xx status code
func (o *GetCacheUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cache using g e t unauthorized response has a 5xx status code
func (o *GetCacheUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get cache using g e t unauthorized response a status code equal to that given
func (o *GetCacheUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get cache using g e t unauthorized response
func (o *GetCacheUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetCacheUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETUnauthorized", 401)
}

func (o *GetCacheUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETUnauthorized", 401)
}

func (o *GetCacheUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCacheUsingGETForbidden creates a GetCacheUsingGETForbidden with default headers values
func NewGetCacheUsingGETForbidden() *GetCacheUsingGETForbidden {
	return &GetCacheUsingGETForbidden{}
}

/*
GetCacheUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetCacheUsingGETForbidden struct {
}

// IsSuccess returns true when this get cache using g e t forbidden response has a 2xx status code
func (o *GetCacheUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cache using g e t forbidden response has a 3xx status code
func (o *GetCacheUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cache using g e t forbidden response has a 4xx status code
func (o *GetCacheUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cache using g e t forbidden response has a 5xx status code
func (o *GetCacheUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get cache using g e t forbidden response a status code equal to that given
func (o *GetCacheUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get cache using g e t forbidden response
func (o *GetCacheUsingGETForbidden) Code() int {
	return 403
}

func (o *GetCacheUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETForbidden", 403)
}

func (o *GetCacheUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETForbidden", 403)
}

func (o *GetCacheUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCacheUsingGETNotFound creates a GetCacheUsingGETNotFound with default headers values
func NewGetCacheUsingGETNotFound() *GetCacheUsingGETNotFound {
	return &GetCacheUsingGETNotFound{}
}

/*
GetCacheUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetCacheUsingGETNotFound struct {
}

// IsSuccess returns true when this get cache using g e t not found response has a 2xx status code
func (o *GetCacheUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cache using g e t not found response has a 3xx status code
func (o *GetCacheUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cache using g e t not found response has a 4xx status code
func (o *GetCacheUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cache using g e t not found response has a 5xx status code
func (o *GetCacheUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get cache using g e t not found response a status code equal to that given
func (o *GetCacheUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get cache using g e t not found response
func (o *GetCacheUsingGETNotFound) Code() int {
	return 404
}

func (o *GetCacheUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETNotFound", 404)
}

func (o *GetCacheUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETNotFound", 404)
}

func (o *GetCacheUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetCacheUsingGETInternalServerError creates a GetCacheUsingGETInternalServerError with default headers values
func NewGetCacheUsingGETInternalServerError() *GetCacheUsingGETInternalServerError {
	return &GetCacheUsingGETInternalServerError{}
}

/*
GetCacheUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetCacheUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get cache using g e t internal server error response has a 2xx status code
func (o *GetCacheUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cache using g e t internal server error response has a 3xx status code
func (o *GetCacheUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cache using g e t internal server error response has a 4xx status code
func (o *GetCacheUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cache using g e t internal server error response has a 5xx status code
func (o *GetCacheUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get cache using g e t internal server error response a status code equal to that given
func (o *GetCacheUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get cache using g e t internal server error response
func (o *GetCacheUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetCacheUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETInternalServerError", 500)
}

func (o *GetCacheUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache/{cacheName}/key/{keyName}][%d] getCacheUsingGETInternalServerError", 500)
}

func (o *GetCacheUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
