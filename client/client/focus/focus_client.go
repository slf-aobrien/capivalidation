// Code generated by go-swagger; DO NOT EDIT.

package focus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new focus API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new focus API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new focus API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for focus API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetDoctorUsingGET(params *GetDoctorUsingGETParams, opts ...ClientOption) (*GetDoctorUsingGETOK, error)

	GetMemberAddressesUsingGET(params *GetMemberAddressesUsingGETParams, opts ...ClientOption) (*GetMemberAddressesUsingGETOK, error)

	GetRqmtOutputHistoryUsingGET(params *GetRqmtOutputHistoryUsingGETParams, opts ...ClientOption) (*GetRqmtOutputHistoryUsingGETOK, error)

	InsertDoctorUsingPOST(params *InsertDoctorUsingPOSTParams, opts ...ClientOption) (*InsertDoctorUsingPOSTOK, *InsertDoctorUsingPOSTCreated, error)

	InsertPersonAddressUsingPOST(params *InsertPersonAddressUsingPOSTParams, opts ...ClientOption) (*InsertPersonAddressUsingPOSTOK, *InsertPersonAddressUsingPOSTCreated, error)

	InsertPersonPhoneUsingPOST(params *InsertPersonPhoneUsingPOSTParams, opts ...ClientOption) (*InsertPersonPhoneUsingPOSTOK, *InsertPersonPhoneUsingPOSTCreated, error)

	UpdateFacilityUsingPUT1(params *UpdateFacilityUsingPUT1Params, opts ...ClientOption) (*UpdateFacilityUsingPUT1OK, *UpdateFacilityUsingPUT1Created, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetDoctorUsingGET gets doctor info based on facility number

None
*/
func (a *Client) GetDoctorUsingGET(params *GetDoctorUsingGETParams, opts ...ClientOption) (*GetDoctorUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDoctorUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDoctorUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/focus/doctor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDoctorUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDoctorUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDoctorUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberAddressesUsingGET gets member address phone and email details

None
*/
func (a *Client) GetMemberAddressesUsingGET(params *GetMemberAddressesUsingGETParams, opts ...ClientOption) (*GetMemberAddressesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberAddressesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberAddressesUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/focus/member/addresses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberAddressesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberAddressesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberAddressesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRqmtOutputHistoryUsingGET gets requirement output history for member

None
*/
func (a *Client) GetRqmtOutputHistoryUsingGET(params *GetRqmtOutputHistoryUsingGETParams, opts ...ClientOption) (*GetRqmtOutputHistoryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRqmtOutputHistoryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRqmtOutputHistoryUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/focus/requirementOutputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRqmtOutputHistoryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRqmtOutputHistoryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRqmtOutputHistoryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertDoctorUsingPOST inserts doctor with organization

None
*/
func (a *Client) InsertDoctorUsingPOST(params *InsertDoctorUsingPOSTParams, opts ...ClientOption) (*InsertDoctorUsingPOSTOK, *InsertDoctorUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertDoctorUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertDoctorUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/focus/doctor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertDoctorUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertDoctorUsingPOSTOK:
		return value, nil, nil
	case *InsertDoctorUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for focus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPersonAddressUsingPOST inserts address of a person

None
*/
func (a *Client) InsertPersonAddressUsingPOST(params *InsertPersonAddressUsingPOSTParams, opts ...ClientOption) (*InsertPersonAddressUsingPOSTOK, *InsertPersonAddressUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPersonAddressUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPersonAddressUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/focus/person/address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertPersonAddressUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPersonAddressUsingPOSTOK:
		return value, nil, nil
	case *InsertPersonAddressUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for focus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPersonPhoneUsingPOST inserts phone of a person

None
*/
func (a *Client) InsertPersonPhoneUsingPOST(params *InsertPersonPhoneUsingPOSTParams, opts ...ClientOption) (*InsertPersonPhoneUsingPOSTOK, *InsertPersonPhoneUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPersonPhoneUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPersonPhoneUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/focus/person/phone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertPersonPhoneUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPersonPhoneUsingPOSTOK:
		return value, nil, nil
	case *InsertPersonPhoneUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for focus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateFacilityUsingPUT1 updates member facility selection

None
*/
func (a *Client) UpdateFacilityUsingPUT1(params *UpdateFacilityUsingPUT1Params, opts ...ClientOption) (*UpdateFacilityUsingPUT1OK, *UpdateFacilityUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFacilityUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateFacilityUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/focus/facility",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateFacilityUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateFacilityUsingPUT1OK:
		return value, nil, nil
	case *UpdateFacilityUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for focus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
