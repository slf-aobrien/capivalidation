// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransactionSchedulerDTO TransactionSchedulerDTO
//
// swagger:model TransactionSchedulerDTO
type TransactionSchedulerDTO struct {

	// alias name
	AliasName string `json:"aliasName,omitempty"`

	// base date
	BaseDate string `json:"baseDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// frequency description
	FrequencyDescription string `json:"frequencyDescription,omitempty"`

	// lead time
	LeadTime string `json:"leadTime,omitempty"`

	// next date
	NextDate string `json:"nextDate,omitempty"`

	// prdf key
	PrdfKey string `json:"prdfKey,omitempty"`

	// prdf name
	PrdfName string `json:"prdfName,omitempty"`

	// sequence number
	SequenceNumber string `json:"sequenceNumber,omitempty"`

	// transaction hold
	TransactionHold string `json:"transactionHold,omitempty"`

	// transaction hold reason
	TransactionHoldReason string `json:"transactionHoldReason,omitempty"`

	// transaction key
	TransactionKey string `json:"transactionKey,omitempty"`

	// transaction type
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this transaction scheduler d t o
func (m *TransactionSchedulerDTO) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this transaction scheduler d t o based on context it is used
func (m *TransactionSchedulerDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransactionSchedulerDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransactionSchedulerDTO) UnmarshalBinary(b []byte) error {
	var res TransactionSchedulerDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
