// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateRiskRuleDetailUsingPUTReader is a Reader for the UpdateRiskRuleDetailUsingPUT structure.
type UpdateRiskRuleDetailUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRiskRuleDetailUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateRiskRuleDetailUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateRiskRuleDetailUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateRiskRuleDetailUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateRiskRuleDetailUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateRiskRuleDetailUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateRiskRuleDetailUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateRiskRuleDetailUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/riskRuleDetail] updateRiskRuleDetailUsingPUT", response, response.Code())
	}
}

// NewUpdateRiskRuleDetailUsingPUTOK creates a UpdateRiskRuleDetailUsingPUTOK with default headers values
func NewUpdateRiskRuleDetailUsingPUTOK() *UpdateRiskRuleDetailUsingPUTOK {
	return &UpdateRiskRuleDetailUsingPUTOK{}
}

/*
UpdateRiskRuleDetailUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateRiskRuleDetailUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update risk rule detail using p u t o k response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update risk rule detail using p u t o k response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t o k response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update risk rule detail using p u t o k response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk rule detail using p u t o k response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update risk rule detail using p u t o k response
func (o *UpdateRiskRuleDetailUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateRiskRuleDetailUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTOK %s", 200, payload)
}

func (o *UpdateRiskRuleDetailUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTOK %s", 200, payload)
}

func (o *UpdateRiskRuleDetailUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateRiskRuleDetailUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRiskRuleDetailUsingPUTCreated creates a UpdateRiskRuleDetailUsingPUTCreated with default headers values
func NewUpdateRiskRuleDetailUsingPUTCreated() *UpdateRiskRuleDetailUsingPUTCreated {
	return &UpdateRiskRuleDetailUsingPUTCreated{}
}

/*
UpdateRiskRuleDetailUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateRiskRuleDetailUsingPUTCreated struct {
}

// IsSuccess returns true when this update risk rule detail using p u t created response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update risk rule detail using p u t created response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t created response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update risk rule detail using p u t created response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk rule detail using p u t created response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update risk rule detail using p u t created response
func (o *UpdateRiskRuleDetailUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateRiskRuleDetailUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTCreated", 201)
}

func (o *UpdateRiskRuleDetailUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTCreated", 201)
}

func (o *UpdateRiskRuleDetailUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskRuleDetailUsingPUTBadRequest creates a UpdateRiskRuleDetailUsingPUTBadRequest with default headers values
func NewUpdateRiskRuleDetailUsingPUTBadRequest() *UpdateRiskRuleDetailUsingPUTBadRequest {
	return &UpdateRiskRuleDetailUsingPUTBadRequest{}
}

/*
UpdateRiskRuleDetailUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateRiskRuleDetailUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update risk rule detail using p u t bad request response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk rule detail using p u t bad request response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t bad request response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk rule detail using p u t bad request response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk rule detail using p u t bad request response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update risk rule detail using p u t bad request response
func (o *UpdateRiskRuleDetailUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateRiskRuleDetailUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTBadRequest", 400)
}

func (o *UpdateRiskRuleDetailUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTBadRequest", 400)
}

func (o *UpdateRiskRuleDetailUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskRuleDetailUsingPUTUnauthorized creates a UpdateRiskRuleDetailUsingPUTUnauthorized with default headers values
func NewUpdateRiskRuleDetailUsingPUTUnauthorized() *UpdateRiskRuleDetailUsingPUTUnauthorized {
	return &UpdateRiskRuleDetailUsingPUTUnauthorized{}
}

/*
UpdateRiskRuleDetailUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateRiskRuleDetailUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update risk rule detail using p u t unauthorized response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk rule detail using p u t unauthorized response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t unauthorized response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk rule detail using p u t unauthorized response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk rule detail using p u t unauthorized response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update risk rule detail using p u t unauthorized response
func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTUnauthorized", 401)
}

func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTUnauthorized", 401)
}

func (o *UpdateRiskRuleDetailUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskRuleDetailUsingPUTForbidden creates a UpdateRiskRuleDetailUsingPUTForbidden with default headers values
func NewUpdateRiskRuleDetailUsingPUTForbidden() *UpdateRiskRuleDetailUsingPUTForbidden {
	return &UpdateRiskRuleDetailUsingPUTForbidden{}
}

/*
UpdateRiskRuleDetailUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateRiskRuleDetailUsingPUTForbidden struct {
}

// IsSuccess returns true when this update risk rule detail using p u t forbidden response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk rule detail using p u t forbidden response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t forbidden response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk rule detail using p u t forbidden response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk rule detail using p u t forbidden response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update risk rule detail using p u t forbidden response
func (o *UpdateRiskRuleDetailUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateRiskRuleDetailUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTForbidden", 403)
}

func (o *UpdateRiskRuleDetailUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTForbidden", 403)
}

func (o *UpdateRiskRuleDetailUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskRuleDetailUsingPUTNotFound creates a UpdateRiskRuleDetailUsingPUTNotFound with default headers values
func NewUpdateRiskRuleDetailUsingPUTNotFound() *UpdateRiskRuleDetailUsingPUTNotFound {
	return &UpdateRiskRuleDetailUsingPUTNotFound{}
}

/*
UpdateRiskRuleDetailUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateRiskRuleDetailUsingPUTNotFound struct {
}

// IsSuccess returns true when this update risk rule detail using p u t not found response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk rule detail using p u t not found response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t not found response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update risk rule detail using p u t not found response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update risk rule detail using p u t not found response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update risk rule detail using p u t not found response
func (o *UpdateRiskRuleDetailUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateRiskRuleDetailUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTNotFound", 404)
}

func (o *UpdateRiskRuleDetailUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTNotFound", 404)
}

func (o *UpdateRiskRuleDetailUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateRiskRuleDetailUsingPUTInternalServerError creates a UpdateRiskRuleDetailUsingPUTInternalServerError with default headers values
func NewUpdateRiskRuleDetailUsingPUTInternalServerError() *UpdateRiskRuleDetailUsingPUTInternalServerError {
	return &UpdateRiskRuleDetailUsingPUTInternalServerError{}
}

/*
UpdateRiskRuleDetailUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateRiskRuleDetailUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update risk rule detail using p u t internal server error response has a 2xx status code
func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update risk rule detail using p u t internal server error response has a 3xx status code
func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update risk rule detail using p u t internal server error response has a 4xx status code
func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update risk rule detail using p u t internal server error response has a 5xx status code
func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update risk rule detail using p u t internal server error response a status code equal to that given
func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update risk rule detail using p u t internal server error response
func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTInternalServerError", 500)
}

func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/riskRuleDetail][%d] updateRiskRuleDetailUsingPUTInternalServerError", 500)
}

func (o *UpdateRiskRuleDetailUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
