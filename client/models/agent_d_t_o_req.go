// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AgentDTOReq AgentDTOReq
//
// swagger:model AgentDTOReq
type AgentDTOReq struct {

	// accreditation history list
	AccreditationHistoryList []*AccreditationHistoryDTO `json:"accreditationHistoryList"`

	// address
	Address *AddressDTO `json:"address,omitempty"`

	// agency entity type code
	AgencyEntityTypeCode string `json:"agencyEntityTypeCode,omitempty"`

	// agency key
	AgencyKey string `json:"agencyKey,omitempty"`

	// agency number
	AgencyNumber string `json:"agencyNumber,omitempty"`

	// agent auth code
	AgentAuthCode string `json:"agentAuthCode,omitempty"`

	// agent entity pos code
	AgentEntityPosCode string `json:"agentEntityPosCode,omitempty"`

	// agent entity type code
	AgentEntityTypeCode string `json:"agentEntityTypeCode,omitempty"`

	// agent Id list
	AgentIDList []*AgentIDDTO `json:"agentIdList"`

	// agent key
	AgentKey string `json:"agentKey,omitempty"`

	// agent number
	AgentNumber string `json:"agentNumber,omitempty"`

	// agent stat code
	AgentStatCode string `json:"agentStatCode,omitempty"`

	// agent type code
	AgentTypeCode string `json:"agentTypeCode,omitempty"`

	// commission percent
	CommissionPercent string `json:"commissionPercent,omitempty"`

	// commission type
	CommissionType string `json:"commissionType,omitempty"`

	// contact date
	ContactDate string `json:"contactDate,omitempty"`

	// contact description
	ContactDescription string `json:"contactDescription,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// email
	Email *EmailDTO `json:"email,omitempty"`

	// organization
	Organization *OrganizationDTO `json:"organization,omitempty"`

	// overridden commission rule
	OverriddenCommissionRule bool `json:"overriddenCommissionRule,omitempty"`

	// override benefit
	OverrideBenefit string `json:"overrideBenefit,omitempty"`

	// override commission type
	OverrideCommissionType string `json:"overrideCommissionType,omitempty"`

	// person
	Person *PersonDTOReq `json:"person,omitempty"`

	// phone
	Phone *PhoneDTO `json:"phone,omitempty"`

	// principal agent code
	PrincipalAgentCode string `json:"principalAgentCode,omitempty"`

	// service code
	ServiceCode string `json:"serviceCode,omitempty"`
}

// Validate validates this agent d t o req
func (m *AgentDTOReq) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccreditationHistoryList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentIDList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDTOReq) validateAccreditationHistoryList(formats strfmt.Registry) error {
	if swag.IsZero(m.AccreditationHistoryList) { // not required
		return nil
	}

	for i := 0; i < len(m.AccreditationHistoryList); i++ {
		if swag.IsZero(m.AccreditationHistoryList[i]) { // not required
			continue
		}

		if m.AccreditationHistoryList[i] != nil {
			if err := m.AccreditationHistoryList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accreditationHistoryList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accreditationHistoryList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgentDTOReq) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) validateAgentIDList(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentIDList) { // not required
		return nil
	}

	for i := 0; i < len(m.AgentIDList); i++ {
		if swag.IsZero(m.AgentIDList[i]) { // not required
			continue
		}

		if m.AgentIDList[i] != nil {
			if err := m.AgentIDList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentIdList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentIdList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgentDTOReq) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) validateOrganization(formats strfmt.Registry) error {
	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) validatePerson(formats strfmt.Registry) error {
	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if m.Phone != nil {
		if err := m.Phone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this agent d t o req based on the context it is used
func (m *AgentDTOReq) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccreditationHistoryList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAgentIDList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganization(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDTOReq) contextValidateAccreditationHistoryList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AccreditationHistoryList); i++ {

		if m.AccreditationHistoryList[i] != nil {

			if swag.IsZero(m.AccreditationHistoryList[i]) { // not required
				return nil
			}

			if err := m.AccreditationHistoryList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("accreditationHistoryList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("accreditationHistoryList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgentDTOReq) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) contextValidateAgentIDList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AgentIDList); i++ {

		if m.AgentIDList[i] != nil {

			if swag.IsZero(m.AgentIDList[i]) { // not required
				return nil
			}

			if err := m.AgentIDList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("agentIdList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("agentIdList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgentDTOReq) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if swag.IsZero(m.Email) { // not required
			return nil
		}

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) contextValidateOrganization(ctx context.Context, formats strfmt.Registry) error {

	if m.Organization != nil {

		if swag.IsZero(m.Organization) { // not required
			return nil
		}

		if err := m.Organization.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organization")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organization")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) contextValidatePerson(ctx context.Context, formats strfmt.Registry) error {

	if m.Person != nil {

		if swag.IsZero(m.Person) { // not required
			return nil
		}

		if err := m.Person.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDTOReq) contextValidatePhone(ctx context.Context, formats strfmt.Registry) error {

	if m.Phone != nil {

		if swag.IsZero(m.Phone) { // not required
			return nil
		}

		if err := m.Phone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentDTOReq) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentDTOReq) UnmarshalBinary(b []byte) error {
	var res AgentDTOReq
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
