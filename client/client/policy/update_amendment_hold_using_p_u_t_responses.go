// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateAmendmentHoldUsingPUTReader is a Reader for the UpdateAmendmentHoldUsingPUT structure.
type UpdateAmendmentHoldUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAmendmentHoldUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAmendmentHoldUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateAmendmentHoldUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateAmendmentHoldUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateAmendmentHoldUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateAmendmentHoldUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAmendmentHoldUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateAmendmentHoldUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/updateAmendmentHold] updateAmendmentHoldUsingPUT", response, response.Code())
	}
}

// NewUpdateAmendmentHoldUsingPUTOK creates a UpdateAmendmentHoldUsingPUTOK with default headers values
func NewUpdateAmendmentHoldUsingPUTOK() *UpdateAmendmentHoldUsingPUTOK {
	return &UpdateAmendmentHoldUsingPUTOK{}
}

/*
UpdateAmendmentHoldUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateAmendmentHoldUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update amendment hold using p u t o k response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update amendment hold using p u t o k response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t o k response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update amendment hold using p u t o k response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update amendment hold using p u t o k response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update amendment hold using p u t o k response
func (o *UpdateAmendmentHoldUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateAmendmentHoldUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTOK %s", 200, payload)
}

func (o *UpdateAmendmentHoldUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTOK %s", 200, payload)
}

func (o *UpdateAmendmentHoldUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateAmendmentHoldUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAmendmentHoldUsingPUTCreated creates a UpdateAmendmentHoldUsingPUTCreated with default headers values
func NewUpdateAmendmentHoldUsingPUTCreated() *UpdateAmendmentHoldUsingPUTCreated {
	return &UpdateAmendmentHoldUsingPUTCreated{}
}

/*
UpdateAmendmentHoldUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateAmendmentHoldUsingPUTCreated struct {
}

// IsSuccess returns true when this update amendment hold using p u t created response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update amendment hold using p u t created response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t created response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update amendment hold using p u t created response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update amendment hold using p u t created response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update amendment hold using p u t created response
func (o *UpdateAmendmentHoldUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateAmendmentHoldUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTCreated", 201)
}

func (o *UpdateAmendmentHoldUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTCreated", 201)
}

func (o *UpdateAmendmentHoldUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAmendmentHoldUsingPUTBadRequest creates a UpdateAmendmentHoldUsingPUTBadRequest with default headers values
func NewUpdateAmendmentHoldUsingPUTBadRequest() *UpdateAmendmentHoldUsingPUTBadRequest {
	return &UpdateAmendmentHoldUsingPUTBadRequest{}
}

/*
UpdateAmendmentHoldUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateAmendmentHoldUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update amendment hold using p u t bad request response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update amendment hold using p u t bad request response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t bad request response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update amendment hold using p u t bad request response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update amendment hold using p u t bad request response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update amendment hold using p u t bad request response
func (o *UpdateAmendmentHoldUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateAmendmentHoldUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTBadRequest", 400)
}

func (o *UpdateAmendmentHoldUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTBadRequest", 400)
}

func (o *UpdateAmendmentHoldUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAmendmentHoldUsingPUTUnauthorized creates a UpdateAmendmentHoldUsingPUTUnauthorized with default headers values
func NewUpdateAmendmentHoldUsingPUTUnauthorized() *UpdateAmendmentHoldUsingPUTUnauthorized {
	return &UpdateAmendmentHoldUsingPUTUnauthorized{}
}

/*
UpdateAmendmentHoldUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateAmendmentHoldUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update amendment hold using p u t unauthorized response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update amendment hold using p u t unauthorized response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t unauthorized response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update amendment hold using p u t unauthorized response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update amendment hold using p u t unauthorized response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update amendment hold using p u t unauthorized response
func (o *UpdateAmendmentHoldUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateAmendmentHoldUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTUnauthorized", 401)
}

func (o *UpdateAmendmentHoldUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTUnauthorized", 401)
}

func (o *UpdateAmendmentHoldUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAmendmentHoldUsingPUTForbidden creates a UpdateAmendmentHoldUsingPUTForbidden with default headers values
func NewUpdateAmendmentHoldUsingPUTForbidden() *UpdateAmendmentHoldUsingPUTForbidden {
	return &UpdateAmendmentHoldUsingPUTForbidden{}
}

/*
UpdateAmendmentHoldUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateAmendmentHoldUsingPUTForbidden struct {
}

// IsSuccess returns true when this update amendment hold using p u t forbidden response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update amendment hold using p u t forbidden response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t forbidden response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update amendment hold using p u t forbidden response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update amendment hold using p u t forbidden response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update amendment hold using p u t forbidden response
func (o *UpdateAmendmentHoldUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateAmendmentHoldUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTForbidden", 403)
}

func (o *UpdateAmendmentHoldUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTForbidden", 403)
}

func (o *UpdateAmendmentHoldUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAmendmentHoldUsingPUTNotFound creates a UpdateAmendmentHoldUsingPUTNotFound with default headers values
func NewUpdateAmendmentHoldUsingPUTNotFound() *UpdateAmendmentHoldUsingPUTNotFound {
	return &UpdateAmendmentHoldUsingPUTNotFound{}
}

/*
UpdateAmendmentHoldUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateAmendmentHoldUsingPUTNotFound struct {
}

// IsSuccess returns true when this update amendment hold using p u t not found response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update amendment hold using p u t not found response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t not found response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update amendment hold using p u t not found response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update amendment hold using p u t not found response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update amendment hold using p u t not found response
func (o *UpdateAmendmentHoldUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateAmendmentHoldUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTNotFound", 404)
}

func (o *UpdateAmendmentHoldUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTNotFound", 404)
}

func (o *UpdateAmendmentHoldUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAmendmentHoldUsingPUTInternalServerError creates a UpdateAmendmentHoldUsingPUTInternalServerError with default headers values
func NewUpdateAmendmentHoldUsingPUTInternalServerError() *UpdateAmendmentHoldUsingPUTInternalServerError {
	return &UpdateAmendmentHoldUsingPUTInternalServerError{}
}

/*
UpdateAmendmentHoldUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateAmendmentHoldUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update amendment hold using p u t internal server error response has a 2xx status code
func (o *UpdateAmendmentHoldUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update amendment hold using p u t internal server error response has a 3xx status code
func (o *UpdateAmendmentHoldUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update amendment hold using p u t internal server error response has a 4xx status code
func (o *UpdateAmendmentHoldUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update amendment hold using p u t internal server error response has a 5xx status code
func (o *UpdateAmendmentHoldUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update amendment hold using p u t internal server error response a status code equal to that given
func (o *UpdateAmendmentHoldUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update amendment hold using p u t internal server error response
func (o *UpdateAmendmentHoldUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateAmendmentHoldUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTInternalServerError", 500)
}

func (o *UpdateAmendmentHoldUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updateAmendmentHold][%d] updateAmendmentHoldUsingPUTInternalServerError", 500)
}

func (o *UpdateAmendmentHoldUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
