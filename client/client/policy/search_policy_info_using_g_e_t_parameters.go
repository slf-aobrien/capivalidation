// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewSearchPolicyInfoUsingGETParams creates a new SearchPolicyInfoUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchPolicyInfoUsingGETParams() *SearchPolicyInfoUsingGETParams {
	return &SearchPolicyInfoUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchPolicyInfoUsingGETParamsWithTimeout creates a new SearchPolicyInfoUsingGETParams object
// with the ability to set a timeout on a request.
func NewSearchPolicyInfoUsingGETParamsWithTimeout(timeout time.Duration) *SearchPolicyInfoUsingGETParams {
	return &SearchPolicyInfoUsingGETParams{
		timeout: timeout,
	}
}

// NewSearchPolicyInfoUsingGETParamsWithContext creates a new SearchPolicyInfoUsingGETParams object
// with the ability to set a context for a request.
func NewSearchPolicyInfoUsingGETParamsWithContext(ctx context.Context) *SearchPolicyInfoUsingGETParams {
	return &SearchPolicyInfoUsingGETParams{
		Context: ctx,
	}
}

// NewSearchPolicyInfoUsingGETParamsWithHTTPClient creates a new SearchPolicyInfoUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchPolicyInfoUsingGETParamsWithHTTPClient(client *http.Client) *SearchPolicyInfoUsingGETParams {
	return &SearchPolicyInfoUsingGETParams{
		HTTPClient: client,
	}
}

/*
SearchPolicyInfoUsingGETParams contains all the parameters to send to the API endpoint

	for the search policy info using g e t operation.

	Typically these are written to a http.Request.
*/
type SearchPolicyInfoUsingGETParams struct {

	/* BirthDate.

	   birthDate
	*/
	BirthDate *string

	/* FirstName.

	   firstName
	*/
	FirstName *string

	/* LastName.

	   lastName
	*/
	LastName *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* Ssn.

	   ssn
	*/
	Ssn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search policy info using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPolicyInfoUsingGETParams) WithDefaults() *SearchPolicyInfoUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search policy info using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchPolicyInfoUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithTimeout(timeout time.Duration) *SearchPolicyInfoUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithContext(ctx context.Context) *SearchPolicyInfoUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithHTTPClient(client *http.Client) *SearchPolicyInfoUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBirthDate adds the birthDate to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithBirthDate(birthDate *string) *SearchPolicyInfoUsingGETParams {
	o.SetBirthDate(birthDate)
	return o
}

// SetBirthDate adds the birthDate to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetBirthDate(birthDate *string) {
	o.BirthDate = birthDate
}

// WithFirstName adds the firstName to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithFirstName(firstName *string) *SearchPolicyInfoUsingGETParams {
	o.SetFirstName(firstName)
	return o
}

// SetFirstName adds the firstName to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetFirstName(firstName *string) {
	o.FirstName = firstName
}

// WithLastName adds the lastName to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithLastName(lastName *string) *SearchPolicyInfoUsingGETParams {
	o.SetLastName(lastName)
	return o
}

// SetLastName adds the lastName to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetLastName(lastName *string) {
	o.LastName = lastName
}

// WithRequestApplication adds the requestApplication to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithRequestApplication(requestApplication *string) *SearchPolicyInfoUsingGETParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithRequestUser(requestUser *string) *SearchPolicyInfoUsingGETParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithSsn adds the ssn to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) WithSsn(ssn *string) *SearchPolicyInfoUsingGETParams {
	o.SetSsn(ssn)
	return o
}

// SetSsn adds the ssn to the search policy info using g e t params
func (o *SearchPolicyInfoUsingGETParams) SetSsn(ssn *string) {
	o.Ssn = ssn
}

// WriteToRequest writes these params to a swagger request
func (o *SearchPolicyInfoUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BirthDate != nil {

		// query param birthDate
		var qrBirthDate string

		if o.BirthDate != nil {
			qrBirthDate = *o.BirthDate
		}
		qBirthDate := qrBirthDate
		if qBirthDate != "" {

			if err := r.SetQueryParam("birthDate", qBirthDate); err != nil {
				return err
			}
		}
	}

	if o.FirstName != nil {

		// query param firstName
		var qrFirstName string

		if o.FirstName != nil {
			qrFirstName = *o.FirstName
		}
		qFirstName := qrFirstName
		if qFirstName != "" {

			if err := r.SetQueryParam("firstName", qFirstName); err != nil {
				return err
			}
		}
	}

	if o.LastName != nil {

		// query param lastName
		var qrLastName string

		if o.LastName != nil {
			qrLastName = *o.LastName
		}
		qLastName := qrLastName
		if qLastName != "" {

			if err := r.SetQueryParam("lastName", qLastName); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}

	if o.Ssn != nil {

		// query param ssn
		var qrSsn string

		if o.Ssn != nil {
			qrSsn = *o.Ssn
		}
		qSsn := qrSsn
		if qSsn != "" {

			if err := r.SetQueryParam("ssn", qSsn); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
