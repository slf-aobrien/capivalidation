// Code generated by go-swagger; DO NOT EDIT.

package sunbeam

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetMemberEligibilityUsingGETParams creates a new GetMemberEligibilityUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMemberEligibilityUsingGETParams() *GetMemberEligibilityUsingGETParams {
	return &GetMemberEligibilityUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMemberEligibilityUsingGETParamsWithTimeout creates a new GetMemberEligibilityUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetMemberEligibilityUsingGETParamsWithTimeout(timeout time.Duration) *GetMemberEligibilityUsingGETParams {
	return &GetMemberEligibilityUsingGETParams{
		timeout: timeout,
	}
}

// NewGetMemberEligibilityUsingGETParamsWithContext creates a new GetMemberEligibilityUsingGETParams object
// with the ability to set a context for a request.
func NewGetMemberEligibilityUsingGETParamsWithContext(ctx context.Context) *GetMemberEligibilityUsingGETParams {
	return &GetMemberEligibilityUsingGETParams{
		Context: ctx,
	}
}

// NewGetMemberEligibilityUsingGETParamsWithHTTPClient creates a new GetMemberEligibilityUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMemberEligibilityUsingGETParamsWithHTTPClient(client *http.Client) *GetMemberEligibilityUsingGETParams {
	return &GetMemberEligibilityUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetMemberEligibilityUsingGETParams contains all the parameters to send to the API endpoint

	for the get member eligibility using g e t operation.

	Typically these are written to a http.Request.
*/
type GetMemberEligibilityUsingGETParams struct {

	/* EffDate.

	   effDate
	*/
	EffDate *string

	/* MemberID.

	   memberID
	*/
	MemberID string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get member eligibility using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMemberEligibilityUsingGETParams) WithDefaults() *GetMemberEligibilityUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get member eligibility using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMemberEligibilityUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithTimeout(timeout time.Duration) *GetMemberEligibilityUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithContext(ctx context.Context) *GetMemberEligibilityUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithHTTPClient(client *http.Client) *GetMemberEligibilityUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffDate adds the effDate to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithEffDate(effDate *string) *GetMemberEligibilityUsingGETParams {
	o.SetEffDate(effDate)
	return o
}

// SetEffDate adds the effDate to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetEffDate(effDate *string) {
	o.EffDate = effDate
}

// WithMemberID adds the memberID to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithMemberID(memberID string) *GetMemberEligibilityUsingGETParams {
	o.SetMemberID(memberID)
	return o
}

// SetMemberID adds the memberId to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetMemberID(memberID string) {
	o.MemberID = memberID
}

// WithRequestApplication adds the requestApplication to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithRequestApplication(requestApplication string) *GetMemberEligibilityUsingGETParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) WithRequestUser(requestUser string) *GetMemberEligibilityUsingGETParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the get member eligibility using g e t params
func (o *GetMemberEligibilityUsingGETParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WriteToRequest writes these params to a swagger request
func (o *GetMemberEligibilityUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EffDate != nil {

		// query param effDate
		var qrEffDate string

		if o.EffDate != nil {
			qrEffDate = *o.EffDate
		}
		qEffDate := qrEffDate
		if qEffDate != "" {

			if err := r.SetQueryParam("effDate", qEffDate); err != nil {
				return err
			}
		}
	}

	// query param memberID
	qrMemberID := o.MemberID
	qMemberID := qrMemberID
	if qMemberID != "" {

		if err := r.SetQueryParam("memberID", qMemberID); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
