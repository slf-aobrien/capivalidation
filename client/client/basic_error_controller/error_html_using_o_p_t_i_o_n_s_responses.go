// Code generated by go-swagger; DO NOT EDIT.

package basic_error_controller

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// ErrorHTMLUsingOPTIONSReader is a Reader for the ErrorHTMLUsingOPTIONS structure.
type ErrorHTMLUsingOPTIONSReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ErrorHTMLUsingOPTIONSReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewErrorHTMLUsingOPTIONSOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewErrorHTMLUsingOPTIONSNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewErrorHTMLUsingOPTIONSUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewErrorHTMLUsingOPTIONSForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[OPTIONS /compassintegrationapp/error] errorHtmlUsingOPTIONS", response, response.Code())
	}
}

// NewErrorHTMLUsingOPTIONSOK creates a ErrorHTMLUsingOPTIONSOK with default headers values
func NewErrorHTMLUsingOPTIONSOK() *ErrorHTMLUsingOPTIONSOK {
	return &ErrorHTMLUsingOPTIONSOK{}
}

/*
ErrorHTMLUsingOPTIONSOK describes a response with status code 200, with default header values.

OK
*/
type ErrorHTMLUsingOPTIONSOK struct {
	Payload *models.ModelAndView
}

// IsSuccess returns true when this error Html using o p t i o n s o k response has a 2xx status code
func (o *ErrorHTMLUsingOPTIONSOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this error Html using o p t i o n s o k response has a 3xx status code
func (o *ErrorHTMLUsingOPTIONSOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using o p t i o n s o k response has a 4xx status code
func (o *ErrorHTMLUsingOPTIONSOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this error Html using o p t i o n s o k response has a 5xx status code
func (o *ErrorHTMLUsingOPTIONSOK) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using o p t i o n s o k response a status code equal to that given
func (o *ErrorHTMLUsingOPTIONSOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the error Html using o p t i o n s o k response
func (o *ErrorHTMLUsingOPTIONSOK) Code() int {
	return 200
}

func (o *ErrorHTMLUsingOPTIONSOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSOK %s", 200, payload)
}

func (o *ErrorHTMLUsingOPTIONSOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSOK %s", 200, payload)
}

func (o *ErrorHTMLUsingOPTIONSOK) GetPayload() *models.ModelAndView {
	return o.Payload
}

func (o *ErrorHTMLUsingOPTIONSOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelAndView)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewErrorHTMLUsingOPTIONSNoContent creates a ErrorHTMLUsingOPTIONSNoContent with default headers values
func NewErrorHTMLUsingOPTIONSNoContent() *ErrorHTMLUsingOPTIONSNoContent {
	return &ErrorHTMLUsingOPTIONSNoContent{}
}

/*
ErrorHTMLUsingOPTIONSNoContent describes a response with status code 204, with default header values.

No Content
*/
type ErrorHTMLUsingOPTIONSNoContent struct {
}

// IsSuccess returns true when this error Html using o p t i o n s no content response has a 2xx status code
func (o *ErrorHTMLUsingOPTIONSNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this error Html using o p t i o n s no content response has a 3xx status code
func (o *ErrorHTMLUsingOPTIONSNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using o p t i o n s no content response has a 4xx status code
func (o *ErrorHTMLUsingOPTIONSNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this error Html using o p t i o n s no content response has a 5xx status code
func (o *ErrorHTMLUsingOPTIONSNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using o p t i o n s no content response a status code equal to that given
func (o *ErrorHTMLUsingOPTIONSNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the error Html using o p t i o n s no content response
func (o *ErrorHTMLUsingOPTIONSNoContent) Code() int {
	return 204
}

func (o *ErrorHTMLUsingOPTIONSNoContent) Error() string {
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSNoContent", 204)
}

func (o *ErrorHTMLUsingOPTIONSNoContent) String() string {
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSNoContent", 204)
}

func (o *ErrorHTMLUsingOPTIONSNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingOPTIONSUnauthorized creates a ErrorHTMLUsingOPTIONSUnauthorized with default headers values
func NewErrorHTMLUsingOPTIONSUnauthorized() *ErrorHTMLUsingOPTIONSUnauthorized {
	return &ErrorHTMLUsingOPTIONSUnauthorized{}
}

/*
ErrorHTMLUsingOPTIONSUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ErrorHTMLUsingOPTIONSUnauthorized struct {
}

// IsSuccess returns true when this error Html using o p t i o n s unauthorized response has a 2xx status code
func (o *ErrorHTMLUsingOPTIONSUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this error Html using o p t i o n s unauthorized response has a 3xx status code
func (o *ErrorHTMLUsingOPTIONSUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using o p t i o n s unauthorized response has a 4xx status code
func (o *ErrorHTMLUsingOPTIONSUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this error Html using o p t i o n s unauthorized response has a 5xx status code
func (o *ErrorHTMLUsingOPTIONSUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using o p t i o n s unauthorized response a status code equal to that given
func (o *ErrorHTMLUsingOPTIONSUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the error Html using o p t i o n s unauthorized response
func (o *ErrorHTMLUsingOPTIONSUnauthorized) Code() int {
	return 401
}

func (o *ErrorHTMLUsingOPTIONSUnauthorized) Error() string {
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSUnauthorized", 401)
}

func (o *ErrorHTMLUsingOPTIONSUnauthorized) String() string {
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSUnauthorized", 401)
}

func (o *ErrorHTMLUsingOPTIONSUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewErrorHTMLUsingOPTIONSForbidden creates a ErrorHTMLUsingOPTIONSForbidden with default headers values
func NewErrorHTMLUsingOPTIONSForbidden() *ErrorHTMLUsingOPTIONSForbidden {
	return &ErrorHTMLUsingOPTIONSForbidden{}
}

/*
ErrorHTMLUsingOPTIONSForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ErrorHTMLUsingOPTIONSForbidden struct {
}

// IsSuccess returns true when this error Html using o p t i o n s forbidden response has a 2xx status code
func (o *ErrorHTMLUsingOPTIONSForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this error Html using o p t i o n s forbidden response has a 3xx status code
func (o *ErrorHTMLUsingOPTIONSForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this error Html using o p t i o n s forbidden response has a 4xx status code
func (o *ErrorHTMLUsingOPTIONSForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this error Html using o p t i o n s forbidden response has a 5xx status code
func (o *ErrorHTMLUsingOPTIONSForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this error Html using o p t i o n s forbidden response a status code equal to that given
func (o *ErrorHTMLUsingOPTIONSForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the error Html using o p t i o n s forbidden response
func (o *ErrorHTMLUsingOPTIONSForbidden) Code() int {
	return 403
}

func (o *ErrorHTMLUsingOPTIONSForbidden) Error() string {
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSForbidden", 403)
}

func (o *ErrorHTMLUsingOPTIONSForbidden) String() string {
	return fmt.Sprintf("[OPTIONS /compassintegrationapp/error][%d] errorHtmlUsingOPTIONSForbidden", 403)
}

func (o *ErrorHTMLUsingOPTIONSForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
