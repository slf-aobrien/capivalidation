// Code generated by go-swagger; DO NOT EDIT.

package dependent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateLanguageUsingPUTReader is a Reader for the UpdateLanguageUsingPUT structure.
type UpdateLanguageUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLanguageUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateLanguageUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateLanguageUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateLanguageUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateLanguageUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateLanguageUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateLanguageUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateLanguageUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/dependent/update/language] updateLanguageUsingPUT", response, response.Code())
	}
}

// NewUpdateLanguageUsingPUTOK creates a UpdateLanguageUsingPUTOK with default headers values
func NewUpdateLanguageUsingPUTOK() *UpdateLanguageUsingPUTOK {
	return &UpdateLanguageUsingPUTOK{}
}

/*
UpdateLanguageUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateLanguageUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update language using p u t o k response has a 2xx status code
func (o *UpdateLanguageUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update language using p u t o k response has a 3xx status code
func (o *UpdateLanguageUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t o k response has a 4xx status code
func (o *UpdateLanguageUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update language using p u t o k response has a 5xx status code
func (o *UpdateLanguageUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update language using p u t o k response a status code equal to that given
func (o *UpdateLanguageUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update language using p u t o k response
func (o *UpdateLanguageUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateLanguageUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTOK %s", 200, payload)
}

func (o *UpdateLanguageUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTOK %s", 200, payload)
}

func (o *UpdateLanguageUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateLanguageUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLanguageUsingPUTCreated creates a UpdateLanguageUsingPUTCreated with default headers values
func NewUpdateLanguageUsingPUTCreated() *UpdateLanguageUsingPUTCreated {
	return &UpdateLanguageUsingPUTCreated{}
}

/*
UpdateLanguageUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateLanguageUsingPUTCreated struct {
}

// IsSuccess returns true when this update language using p u t created response has a 2xx status code
func (o *UpdateLanguageUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update language using p u t created response has a 3xx status code
func (o *UpdateLanguageUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t created response has a 4xx status code
func (o *UpdateLanguageUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update language using p u t created response has a 5xx status code
func (o *UpdateLanguageUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update language using p u t created response a status code equal to that given
func (o *UpdateLanguageUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update language using p u t created response
func (o *UpdateLanguageUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateLanguageUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTCreated", 201)
}

func (o *UpdateLanguageUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTCreated", 201)
}

func (o *UpdateLanguageUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLanguageUsingPUTBadRequest creates a UpdateLanguageUsingPUTBadRequest with default headers values
func NewUpdateLanguageUsingPUTBadRequest() *UpdateLanguageUsingPUTBadRequest {
	return &UpdateLanguageUsingPUTBadRequest{}
}

/*
UpdateLanguageUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateLanguageUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update language using p u t bad request response has a 2xx status code
func (o *UpdateLanguageUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update language using p u t bad request response has a 3xx status code
func (o *UpdateLanguageUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t bad request response has a 4xx status code
func (o *UpdateLanguageUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update language using p u t bad request response has a 5xx status code
func (o *UpdateLanguageUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update language using p u t bad request response a status code equal to that given
func (o *UpdateLanguageUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update language using p u t bad request response
func (o *UpdateLanguageUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateLanguageUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTBadRequest", 400)
}

func (o *UpdateLanguageUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTBadRequest", 400)
}

func (o *UpdateLanguageUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLanguageUsingPUTUnauthorized creates a UpdateLanguageUsingPUTUnauthorized with default headers values
func NewUpdateLanguageUsingPUTUnauthorized() *UpdateLanguageUsingPUTUnauthorized {
	return &UpdateLanguageUsingPUTUnauthorized{}
}

/*
UpdateLanguageUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateLanguageUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update language using p u t unauthorized response has a 2xx status code
func (o *UpdateLanguageUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update language using p u t unauthorized response has a 3xx status code
func (o *UpdateLanguageUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t unauthorized response has a 4xx status code
func (o *UpdateLanguageUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update language using p u t unauthorized response has a 5xx status code
func (o *UpdateLanguageUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update language using p u t unauthorized response a status code equal to that given
func (o *UpdateLanguageUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update language using p u t unauthorized response
func (o *UpdateLanguageUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateLanguageUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTUnauthorized", 401)
}

func (o *UpdateLanguageUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTUnauthorized", 401)
}

func (o *UpdateLanguageUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLanguageUsingPUTForbidden creates a UpdateLanguageUsingPUTForbidden with default headers values
func NewUpdateLanguageUsingPUTForbidden() *UpdateLanguageUsingPUTForbidden {
	return &UpdateLanguageUsingPUTForbidden{}
}

/*
UpdateLanguageUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateLanguageUsingPUTForbidden struct {
}

// IsSuccess returns true when this update language using p u t forbidden response has a 2xx status code
func (o *UpdateLanguageUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update language using p u t forbidden response has a 3xx status code
func (o *UpdateLanguageUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t forbidden response has a 4xx status code
func (o *UpdateLanguageUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update language using p u t forbidden response has a 5xx status code
func (o *UpdateLanguageUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update language using p u t forbidden response a status code equal to that given
func (o *UpdateLanguageUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update language using p u t forbidden response
func (o *UpdateLanguageUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateLanguageUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTForbidden", 403)
}

func (o *UpdateLanguageUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTForbidden", 403)
}

func (o *UpdateLanguageUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLanguageUsingPUTNotFound creates a UpdateLanguageUsingPUTNotFound with default headers values
func NewUpdateLanguageUsingPUTNotFound() *UpdateLanguageUsingPUTNotFound {
	return &UpdateLanguageUsingPUTNotFound{}
}

/*
UpdateLanguageUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateLanguageUsingPUTNotFound struct {
}

// IsSuccess returns true when this update language using p u t not found response has a 2xx status code
func (o *UpdateLanguageUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update language using p u t not found response has a 3xx status code
func (o *UpdateLanguageUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t not found response has a 4xx status code
func (o *UpdateLanguageUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update language using p u t not found response has a 5xx status code
func (o *UpdateLanguageUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update language using p u t not found response a status code equal to that given
func (o *UpdateLanguageUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update language using p u t not found response
func (o *UpdateLanguageUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateLanguageUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTNotFound", 404)
}

func (o *UpdateLanguageUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTNotFound", 404)
}

func (o *UpdateLanguageUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateLanguageUsingPUTInternalServerError creates a UpdateLanguageUsingPUTInternalServerError with default headers values
func NewUpdateLanguageUsingPUTInternalServerError() *UpdateLanguageUsingPUTInternalServerError {
	return &UpdateLanguageUsingPUTInternalServerError{}
}

/*
UpdateLanguageUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateLanguageUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update language using p u t internal server error response has a 2xx status code
func (o *UpdateLanguageUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update language using p u t internal server error response has a 3xx status code
func (o *UpdateLanguageUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update language using p u t internal server error response has a 4xx status code
func (o *UpdateLanguageUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update language using p u t internal server error response has a 5xx status code
func (o *UpdateLanguageUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update language using p u t internal server error response a status code equal to that given
func (o *UpdateLanguageUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update language using p u t internal server error response
func (o *UpdateLanguageUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateLanguageUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTInternalServerError", 500)
}

func (o *UpdateLanguageUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/dependent/update/language][%d] updateLanguageUsingPUTInternalServerError", 500)
}

func (o *UpdateLanguageUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
