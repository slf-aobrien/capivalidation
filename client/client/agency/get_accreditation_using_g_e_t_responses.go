// Code generated by go-swagger; DO NOT EDIT.

package agency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetAccreditationUsingGETReader is a Reader for the GetAccreditationUsingGET structure.
type GetAccreditationUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccreditationUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccreditationUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccreditationUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAccreditationUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccreditationUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAccreditationUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccreditationUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/agency/accreditation] getAccreditationUsingGET", response, response.Code())
	}
}

// NewGetAccreditationUsingGETOK creates a GetAccreditationUsingGETOK with default headers values
func NewGetAccreditationUsingGETOK() *GetAccreditationUsingGETOK {
	return &GetAccreditationUsingGETOK{}
}

/*
GetAccreditationUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetAccreditationUsingGETOK struct {
	Payload *models.ResponseWrapperListAccreditationHistoryDTO
}

// IsSuccess returns true when this get accreditation using g e t o k response has a 2xx status code
func (o *GetAccreditationUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get accreditation using g e t o k response has a 3xx status code
func (o *GetAccreditationUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t o k response has a 4xx status code
func (o *GetAccreditationUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get accreditation using g e t o k response has a 5xx status code
func (o *GetAccreditationUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t o k response a status code equal to that given
func (o *GetAccreditationUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get accreditation using g e t o k response
func (o *GetAccreditationUsingGETOK) Code() int {
	return 200
}

func (o *GetAccreditationUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETOK %s", 200, payload)
}

func (o *GetAccreditationUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETOK %s", 200, payload)
}

func (o *GetAccreditationUsingGETOK) GetPayload() *models.ResponseWrapperListAccreditationHistoryDTO {
	return o.Payload
}

func (o *GetAccreditationUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListAccreditationHistoryDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccreditationUsingGETBadRequest creates a GetAccreditationUsingGETBadRequest with default headers values
func NewGetAccreditationUsingGETBadRequest() *GetAccreditationUsingGETBadRequest {
	return &GetAccreditationUsingGETBadRequest{}
}

/*
GetAccreditationUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAccreditationUsingGETBadRequest struct {
}

// IsSuccess returns true when this get accreditation using g e t bad request response has a 2xx status code
func (o *GetAccreditationUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t bad request response has a 3xx status code
func (o *GetAccreditationUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t bad request response has a 4xx status code
func (o *GetAccreditationUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t bad request response has a 5xx status code
func (o *GetAccreditationUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t bad request response a status code equal to that given
func (o *GetAccreditationUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get accreditation using g e t bad request response
func (o *GetAccreditationUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetAccreditationUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETBadRequest", 400)
}

func (o *GetAccreditationUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETBadRequest", 400)
}

func (o *GetAccreditationUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGETUnauthorized creates a GetAccreditationUsingGETUnauthorized with default headers values
func NewGetAccreditationUsingGETUnauthorized() *GetAccreditationUsingGETUnauthorized {
	return &GetAccreditationUsingGETUnauthorized{}
}

/*
GetAccreditationUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAccreditationUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get accreditation using g e t unauthorized response has a 2xx status code
func (o *GetAccreditationUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t unauthorized response has a 3xx status code
func (o *GetAccreditationUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t unauthorized response has a 4xx status code
func (o *GetAccreditationUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t unauthorized response has a 5xx status code
func (o *GetAccreditationUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t unauthorized response a status code equal to that given
func (o *GetAccreditationUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get accreditation using g e t unauthorized response
func (o *GetAccreditationUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAccreditationUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETUnauthorized", 401)
}

func (o *GetAccreditationUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETUnauthorized", 401)
}

func (o *GetAccreditationUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGETForbidden creates a GetAccreditationUsingGETForbidden with default headers values
func NewGetAccreditationUsingGETForbidden() *GetAccreditationUsingGETForbidden {
	return &GetAccreditationUsingGETForbidden{}
}

/*
GetAccreditationUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAccreditationUsingGETForbidden struct {
}

// IsSuccess returns true when this get accreditation using g e t forbidden response has a 2xx status code
func (o *GetAccreditationUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t forbidden response has a 3xx status code
func (o *GetAccreditationUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t forbidden response has a 4xx status code
func (o *GetAccreditationUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t forbidden response has a 5xx status code
func (o *GetAccreditationUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t forbidden response a status code equal to that given
func (o *GetAccreditationUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get accreditation using g e t forbidden response
func (o *GetAccreditationUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAccreditationUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETForbidden", 403)
}

func (o *GetAccreditationUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETForbidden", 403)
}

func (o *GetAccreditationUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGETNotFound creates a GetAccreditationUsingGETNotFound with default headers values
func NewGetAccreditationUsingGETNotFound() *GetAccreditationUsingGETNotFound {
	return &GetAccreditationUsingGETNotFound{}
}

/*
GetAccreditationUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAccreditationUsingGETNotFound struct {
}

// IsSuccess returns true when this get accreditation using g e t not found response has a 2xx status code
func (o *GetAccreditationUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t not found response has a 3xx status code
func (o *GetAccreditationUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t not found response has a 4xx status code
func (o *GetAccreditationUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get accreditation using g e t not found response has a 5xx status code
func (o *GetAccreditationUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get accreditation using g e t not found response a status code equal to that given
func (o *GetAccreditationUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get accreditation using g e t not found response
func (o *GetAccreditationUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAccreditationUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETNotFound", 404)
}

func (o *GetAccreditationUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETNotFound", 404)
}

func (o *GetAccreditationUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAccreditationUsingGETInternalServerError creates a GetAccreditationUsingGETInternalServerError with default headers values
func NewGetAccreditationUsingGETInternalServerError() *GetAccreditationUsingGETInternalServerError {
	return &GetAccreditationUsingGETInternalServerError{}
}

/*
GetAccreditationUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetAccreditationUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get accreditation using g e t internal server error response has a 2xx status code
func (o *GetAccreditationUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get accreditation using g e t internal server error response has a 3xx status code
func (o *GetAccreditationUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get accreditation using g e t internal server error response has a 4xx status code
func (o *GetAccreditationUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get accreditation using g e t internal server error response has a 5xx status code
func (o *GetAccreditationUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get accreditation using g e t internal server error response a status code equal to that given
func (o *GetAccreditationUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get accreditation using g e t internal server error response
func (o *GetAccreditationUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetAccreditationUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETInternalServerError", 500)
}

func (o *GetAccreditationUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/agency/accreditation][%d] getAccreditationUsingGETInternalServerError", 500)
}

func (o *GetAccreditationUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
