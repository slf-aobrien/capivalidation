// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetBenefitPackagesUsingGETParams creates a new GetBenefitPackagesUsingGETParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBenefitPackagesUsingGETParams() *GetBenefitPackagesUsingGETParams {
	return &GetBenefitPackagesUsingGETParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBenefitPackagesUsingGETParamsWithTimeout creates a new GetBenefitPackagesUsingGETParams object
// with the ability to set a timeout on a request.
func NewGetBenefitPackagesUsingGETParamsWithTimeout(timeout time.Duration) *GetBenefitPackagesUsingGETParams {
	return &GetBenefitPackagesUsingGETParams{
		timeout: timeout,
	}
}

// NewGetBenefitPackagesUsingGETParamsWithContext creates a new GetBenefitPackagesUsingGETParams object
// with the ability to set a context for a request.
func NewGetBenefitPackagesUsingGETParamsWithContext(ctx context.Context) *GetBenefitPackagesUsingGETParams {
	return &GetBenefitPackagesUsingGETParams{
		Context: ctx,
	}
}

// NewGetBenefitPackagesUsingGETParamsWithHTTPClient creates a new GetBenefitPackagesUsingGETParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBenefitPackagesUsingGETParamsWithHTTPClient(client *http.Client) *GetBenefitPackagesUsingGETParams {
	return &GetBenefitPackagesUsingGETParams{
		HTTPClient: client,
	}
}

/*
GetBenefitPackagesUsingGETParams contains all the parameters to send to the API endpoint

	for the get benefit packages using g e t operation.

	Typically these are written to a http.Request.
*/
type GetBenefitPackagesUsingGETParams struct {

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	/* IncludeExpired.

	   includeExpired
	*/
	IncludeExpired bool

	/* MemberGroupDescription.

	   memberGroupDescription
	*/
	MemberGroupDescription *string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get benefit packages using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBenefitPackagesUsingGETParams) WithDefaults() *GetBenefitPackagesUsingGETParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get benefit packages using g e t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBenefitPackagesUsingGETParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithTimeout(timeout time.Duration) *GetBenefitPackagesUsingGETParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithContext(ctx context.Context) *GetBenefitPackagesUsingGETParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithHTTPClient(client *http.Client) *GetBenefitPackagesUsingGETParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEffectiveDate adds the effectiveDate to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithEffectiveDate(effectiveDate *string) *GetBenefitPackagesUsingGETParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithIncludeExpired adds the includeExpired to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithIncludeExpired(includeExpired bool) *GetBenefitPackagesUsingGETParams {
	o.SetIncludeExpired(includeExpired)
	return o
}

// SetIncludeExpired adds the includeExpired to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetIncludeExpired(includeExpired bool) {
	o.IncludeExpired = includeExpired
}

// WithMemberGroupDescription adds the memberGroupDescription to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithMemberGroupDescription(memberGroupDescription *string) *GetBenefitPackagesUsingGETParams {
	o.SetMemberGroupDescription(memberGroupDescription)
	return o
}

// SetMemberGroupDescription adds the memberGroupDescription to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetMemberGroupDescription(memberGroupDescription *string) {
	o.MemberGroupDescription = memberGroupDescription
}

// WithPolicyNumber adds the policyNumber to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) WithPolicyNumber(policyNumber string) *GetBenefitPackagesUsingGETParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the get benefit packages using g e t params
func (o *GetBenefitPackagesUsingGETParams) SetPolicyNumber(policyNumber string) {
	o.PolicyNumber = policyNumber
}

// WriteToRequest writes these params to a swagger request
func (o *GetBenefitPackagesUsingGETParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	// query param includeExpired
	qrIncludeExpired := o.IncludeExpired
	qIncludeExpired := swag.FormatBool(qrIncludeExpired)
	if qIncludeExpired != "" {

		if err := r.SetQueryParam("includeExpired", qIncludeExpired); err != nil {
			return err
		}
	}

	if o.MemberGroupDescription != nil {

		// query param memberGroupDescription
		var qrMemberGroupDescription string

		if o.MemberGroupDescription != nil {
			qrMemberGroupDescription = *o.MemberGroupDescription
		}
		qMemberGroupDescription := qrMemberGroupDescription
		if qMemberGroupDescription != "" {

			if err := r.SetQueryParam("memberGroupDescription", qMemberGroupDescription); err != nil {
				return err
			}
		}
	}

	// query param policyNumber
	qrPolicyNumber := o.PolicyNumber
	qPolicyNumber := qrPolicyNumber
	if qPolicyNumber != "" {

		if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
