// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// DepartmentMemberCountUsingGETReader is a Reader for the DepartmentMemberCountUsingGET structure.
type DepartmentMemberCountUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DepartmentMemberCountUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDepartmentMemberCountUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDepartmentMemberCountUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDepartmentMemberCountUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDepartmentMemberCountUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDepartmentMemberCountUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDepartmentMemberCountUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/departmentMemberCount] departmentMemberCountUsingGET", response, response.Code())
	}
}

// NewDepartmentMemberCountUsingGETOK creates a DepartmentMemberCountUsingGETOK with default headers values
func NewDepartmentMemberCountUsingGETOK() *DepartmentMemberCountUsingGETOK {
	return &DepartmentMemberCountUsingGETOK{}
}

/*
DepartmentMemberCountUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type DepartmentMemberCountUsingGETOK struct {
	Payload *models.ResponseWrapperInt
}

// IsSuccess returns true when this department member count using g e t o k response has a 2xx status code
func (o *DepartmentMemberCountUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this department member count using g e t o k response has a 3xx status code
func (o *DepartmentMemberCountUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this department member count using g e t o k response has a 4xx status code
func (o *DepartmentMemberCountUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this department member count using g e t o k response has a 5xx status code
func (o *DepartmentMemberCountUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this department member count using g e t o k response a status code equal to that given
func (o *DepartmentMemberCountUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the department member count using g e t o k response
func (o *DepartmentMemberCountUsingGETOK) Code() int {
	return 200
}

func (o *DepartmentMemberCountUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETOK %s", 200, payload)
}

func (o *DepartmentMemberCountUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETOK %s", 200, payload)
}

func (o *DepartmentMemberCountUsingGETOK) GetPayload() *models.ResponseWrapperInt {
	return o.Payload
}

func (o *DepartmentMemberCountUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperInt)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDepartmentMemberCountUsingGETBadRequest creates a DepartmentMemberCountUsingGETBadRequest with default headers values
func NewDepartmentMemberCountUsingGETBadRequest() *DepartmentMemberCountUsingGETBadRequest {
	return &DepartmentMemberCountUsingGETBadRequest{}
}

/*
DepartmentMemberCountUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type DepartmentMemberCountUsingGETBadRequest struct {
}

// IsSuccess returns true when this department member count using g e t bad request response has a 2xx status code
func (o *DepartmentMemberCountUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this department member count using g e t bad request response has a 3xx status code
func (o *DepartmentMemberCountUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this department member count using g e t bad request response has a 4xx status code
func (o *DepartmentMemberCountUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this department member count using g e t bad request response has a 5xx status code
func (o *DepartmentMemberCountUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this department member count using g e t bad request response a status code equal to that given
func (o *DepartmentMemberCountUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the department member count using g e t bad request response
func (o *DepartmentMemberCountUsingGETBadRequest) Code() int {
	return 400
}

func (o *DepartmentMemberCountUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETBadRequest", 400)
}

func (o *DepartmentMemberCountUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETBadRequest", 400)
}

func (o *DepartmentMemberCountUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDepartmentMemberCountUsingGETUnauthorized creates a DepartmentMemberCountUsingGETUnauthorized with default headers values
func NewDepartmentMemberCountUsingGETUnauthorized() *DepartmentMemberCountUsingGETUnauthorized {
	return &DepartmentMemberCountUsingGETUnauthorized{}
}

/*
DepartmentMemberCountUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DepartmentMemberCountUsingGETUnauthorized struct {
}

// IsSuccess returns true when this department member count using g e t unauthorized response has a 2xx status code
func (o *DepartmentMemberCountUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this department member count using g e t unauthorized response has a 3xx status code
func (o *DepartmentMemberCountUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this department member count using g e t unauthorized response has a 4xx status code
func (o *DepartmentMemberCountUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this department member count using g e t unauthorized response has a 5xx status code
func (o *DepartmentMemberCountUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this department member count using g e t unauthorized response a status code equal to that given
func (o *DepartmentMemberCountUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the department member count using g e t unauthorized response
func (o *DepartmentMemberCountUsingGETUnauthorized) Code() int {
	return 401
}

func (o *DepartmentMemberCountUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETUnauthorized", 401)
}

func (o *DepartmentMemberCountUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETUnauthorized", 401)
}

func (o *DepartmentMemberCountUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDepartmentMemberCountUsingGETForbidden creates a DepartmentMemberCountUsingGETForbidden with default headers values
func NewDepartmentMemberCountUsingGETForbidden() *DepartmentMemberCountUsingGETForbidden {
	return &DepartmentMemberCountUsingGETForbidden{}
}

/*
DepartmentMemberCountUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DepartmentMemberCountUsingGETForbidden struct {
}

// IsSuccess returns true when this department member count using g e t forbidden response has a 2xx status code
func (o *DepartmentMemberCountUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this department member count using g e t forbidden response has a 3xx status code
func (o *DepartmentMemberCountUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this department member count using g e t forbidden response has a 4xx status code
func (o *DepartmentMemberCountUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this department member count using g e t forbidden response has a 5xx status code
func (o *DepartmentMemberCountUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this department member count using g e t forbidden response a status code equal to that given
func (o *DepartmentMemberCountUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the department member count using g e t forbidden response
func (o *DepartmentMemberCountUsingGETForbidden) Code() int {
	return 403
}

func (o *DepartmentMemberCountUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETForbidden", 403)
}

func (o *DepartmentMemberCountUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETForbidden", 403)
}

func (o *DepartmentMemberCountUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDepartmentMemberCountUsingGETNotFound creates a DepartmentMemberCountUsingGETNotFound with default headers values
func NewDepartmentMemberCountUsingGETNotFound() *DepartmentMemberCountUsingGETNotFound {
	return &DepartmentMemberCountUsingGETNotFound{}
}

/*
DepartmentMemberCountUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type DepartmentMemberCountUsingGETNotFound struct {
}

// IsSuccess returns true when this department member count using g e t not found response has a 2xx status code
func (o *DepartmentMemberCountUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this department member count using g e t not found response has a 3xx status code
func (o *DepartmentMemberCountUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this department member count using g e t not found response has a 4xx status code
func (o *DepartmentMemberCountUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this department member count using g e t not found response has a 5xx status code
func (o *DepartmentMemberCountUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this department member count using g e t not found response a status code equal to that given
func (o *DepartmentMemberCountUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the department member count using g e t not found response
func (o *DepartmentMemberCountUsingGETNotFound) Code() int {
	return 404
}

func (o *DepartmentMemberCountUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETNotFound", 404)
}

func (o *DepartmentMemberCountUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETNotFound", 404)
}

func (o *DepartmentMemberCountUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDepartmentMemberCountUsingGETInternalServerError creates a DepartmentMemberCountUsingGETInternalServerError with default headers values
func NewDepartmentMemberCountUsingGETInternalServerError() *DepartmentMemberCountUsingGETInternalServerError {
	return &DepartmentMemberCountUsingGETInternalServerError{}
}

/*
DepartmentMemberCountUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type DepartmentMemberCountUsingGETInternalServerError struct {
}

// IsSuccess returns true when this department member count using g e t internal server error response has a 2xx status code
func (o *DepartmentMemberCountUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this department member count using g e t internal server error response has a 3xx status code
func (o *DepartmentMemberCountUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this department member count using g e t internal server error response has a 4xx status code
func (o *DepartmentMemberCountUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this department member count using g e t internal server error response has a 5xx status code
func (o *DepartmentMemberCountUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this department member count using g e t internal server error response a status code equal to that given
func (o *DepartmentMemberCountUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the department member count using g e t internal server error response
func (o *DepartmentMemberCountUsingGETInternalServerError) Code() int {
	return 500
}

func (o *DepartmentMemberCountUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETInternalServerError", 500)
}

func (o *DepartmentMemberCountUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/departmentMemberCount][%d] departmentMemberCountUsingGETInternalServerError", 500)
}

func (o *DepartmentMemberCountUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
