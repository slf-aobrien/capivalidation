// Code generated by go-swagger; DO NOT EDIT.

package cache

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetAllCacheNamesUsingGETReader is a Reader for the GetAllCacheNamesUsingGET structure.
type GetAllCacheNamesUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAllCacheNamesUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAllCacheNamesUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAllCacheNamesUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAllCacheNamesUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAllCacheNamesUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAllCacheNamesUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAllCacheNamesUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/cache] getAllCacheNamesUsingGET", response, response.Code())
	}
}

// NewGetAllCacheNamesUsingGETOK creates a GetAllCacheNamesUsingGETOK with default headers values
func NewGetAllCacheNamesUsingGETOK() *GetAllCacheNamesUsingGETOK {
	return &GetAllCacheNamesUsingGETOK{}
}

/*
GetAllCacheNamesUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetAllCacheNamesUsingGETOK struct {
	Payload *models.ResponseWrapperListString
}

// IsSuccess returns true when this get all cache names using g e t o k response has a 2xx status code
func (o *GetAllCacheNamesUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get all cache names using g e t o k response has a 3xx status code
func (o *GetAllCacheNamesUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cache names using g e t o k response has a 4xx status code
func (o *GetAllCacheNamesUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all cache names using g e t o k response has a 5xx status code
func (o *GetAllCacheNamesUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cache names using g e t o k response a status code equal to that given
func (o *GetAllCacheNamesUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get all cache names using g e t o k response
func (o *GetAllCacheNamesUsingGETOK) Code() int {
	return 200
}

func (o *GetAllCacheNamesUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETOK %s", 200, payload)
}

func (o *GetAllCacheNamesUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETOK %s", 200, payload)
}

func (o *GetAllCacheNamesUsingGETOK) GetPayload() *models.ResponseWrapperListString {
	return o.Payload
}

func (o *GetAllCacheNamesUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListString)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAllCacheNamesUsingGETBadRequest creates a GetAllCacheNamesUsingGETBadRequest with default headers values
func NewGetAllCacheNamesUsingGETBadRequest() *GetAllCacheNamesUsingGETBadRequest {
	return &GetAllCacheNamesUsingGETBadRequest{}
}

/*
GetAllCacheNamesUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetAllCacheNamesUsingGETBadRequest struct {
}

// IsSuccess returns true when this get all cache names using g e t bad request response has a 2xx status code
func (o *GetAllCacheNamesUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cache names using g e t bad request response has a 3xx status code
func (o *GetAllCacheNamesUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cache names using g e t bad request response has a 4xx status code
func (o *GetAllCacheNamesUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cache names using g e t bad request response has a 5xx status code
func (o *GetAllCacheNamesUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cache names using g e t bad request response a status code equal to that given
func (o *GetAllCacheNamesUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get all cache names using g e t bad request response
func (o *GetAllCacheNamesUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetAllCacheNamesUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETBadRequest", 400)
}

func (o *GetAllCacheNamesUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETBadRequest", 400)
}

func (o *GetAllCacheNamesUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllCacheNamesUsingGETUnauthorized creates a GetAllCacheNamesUsingGETUnauthorized with default headers values
func NewGetAllCacheNamesUsingGETUnauthorized() *GetAllCacheNamesUsingGETUnauthorized {
	return &GetAllCacheNamesUsingGETUnauthorized{}
}

/*
GetAllCacheNamesUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetAllCacheNamesUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get all cache names using g e t unauthorized response has a 2xx status code
func (o *GetAllCacheNamesUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cache names using g e t unauthorized response has a 3xx status code
func (o *GetAllCacheNamesUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cache names using g e t unauthorized response has a 4xx status code
func (o *GetAllCacheNamesUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cache names using g e t unauthorized response has a 5xx status code
func (o *GetAllCacheNamesUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cache names using g e t unauthorized response a status code equal to that given
func (o *GetAllCacheNamesUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get all cache names using g e t unauthorized response
func (o *GetAllCacheNamesUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetAllCacheNamesUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETUnauthorized", 401)
}

func (o *GetAllCacheNamesUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETUnauthorized", 401)
}

func (o *GetAllCacheNamesUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllCacheNamesUsingGETForbidden creates a GetAllCacheNamesUsingGETForbidden with default headers values
func NewGetAllCacheNamesUsingGETForbidden() *GetAllCacheNamesUsingGETForbidden {
	return &GetAllCacheNamesUsingGETForbidden{}
}

/*
GetAllCacheNamesUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetAllCacheNamesUsingGETForbidden struct {
}

// IsSuccess returns true when this get all cache names using g e t forbidden response has a 2xx status code
func (o *GetAllCacheNamesUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cache names using g e t forbidden response has a 3xx status code
func (o *GetAllCacheNamesUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cache names using g e t forbidden response has a 4xx status code
func (o *GetAllCacheNamesUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cache names using g e t forbidden response has a 5xx status code
func (o *GetAllCacheNamesUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cache names using g e t forbidden response a status code equal to that given
func (o *GetAllCacheNamesUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get all cache names using g e t forbidden response
func (o *GetAllCacheNamesUsingGETForbidden) Code() int {
	return 403
}

func (o *GetAllCacheNamesUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETForbidden", 403)
}

func (o *GetAllCacheNamesUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETForbidden", 403)
}

func (o *GetAllCacheNamesUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllCacheNamesUsingGETNotFound creates a GetAllCacheNamesUsingGETNotFound with default headers values
func NewGetAllCacheNamesUsingGETNotFound() *GetAllCacheNamesUsingGETNotFound {
	return &GetAllCacheNamesUsingGETNotFound{}
}

/*
GetAllCacheNamesUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetAllCacheNamesUsingGETNotFound struct {
}

// IsSuccess returns true when this get all cache names using g e t not found response has a 2xx status code
func (o *GetAllCacheNamesUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cache names using g e t not found response has a 3xx status code
func (o *GetAllCacheNamesUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cache names using g e t not found response has a 4xx status code
func (o *GetAllCacheNamesUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get all cache names using g e t not found response has a 5xx status code
func (o *GetAllCacheNamesUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get all cache names using g e t not found response a status code equal to that given
func (o *GetAllCacheNamesUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get all cache names using g e t not found response
func (o *GetAllCacheNamesUsingGETNotFound) Code() int {
	return 404
}

func (o *GetAllCacheNamesUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETNotFound", 404)
}

func (o *GetAllCacheNamesUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETNotFound", 404)
}

func (o *GetAllCacheNamesUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetAllCacheNamesUsingGETInternalServerError creates a GetAllCacheNamesUsingGETInternalServerError with default headers values
func NewGetAllCacheNamesUsingGETInternalServerError() *GetAllCacheNamesUsingGETInternalServerError {
	return &GetAllCacheNamesUsingGETInternalServerError{}
}

/*
GetAllCacheNamesUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetAllCacheNamesUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get all cache names using g e t internal server error response has a 2xx status code
func (o *GetAllCacheNamesUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get all cache names using g e t internal server error response has a 3xx status code
func (o *GetAllCacheNamesUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get all cache names using g e t internal server error response has a 4xx status code
func (o *GetAllCacheNamesUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get all cache names using g e t internal server error response has a 5xx status code
func (o *GetAllCacheNamesUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get all cache names using g e t internal server error response a status code equal to that given
func (o *GetAllCacheNamesUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get all cache names using g e t internal server error response
func (o *GetAllCacheNamesUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetAllCacheNamesUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETInternalServerError", 500)
}

func (o *GetAllCacheNamesUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/cache][%d] getAllCacheNamesUsingGETInternalServerError", 500)
}

func (o *GetAllCacheNamesUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
