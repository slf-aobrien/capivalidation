// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContactDTORes ContactDTORes
//
// swagger:model ContactDTORes
type ContactDTORes struct {

	// address
	Address *AddressDTO `json:"address,omitempty"`

	// contact type
	ContactType string `json:"contactType,omitempty"`

	// effective date
	EffectiveDate string `json:"effectiveDate,omitempty"`

	// email
	Email *EmailDTO `json:"email,omitempty"`

	// expiration date
	ExpirationDate string `json:"expirationDate,omitempty"`

	// fax
	Fax *PhoneDTO `json:"fax,omitempty"`

	// interface Id
	InterfaceID string `json:"interfaceId,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// person
	Person *PersonDTORes `json:"person,omitempty"`

	// phone
	Phone *PhoneDTO `json:"phone,omitempty"`

	// primary contact
	PrimaryContact bool `json:"primaryContact,omitempty"`
}

// Validate validates this contact d t o res
func (m *ContactDTORes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerson(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactDTORes) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if m.Email != nil {
		if err := m.Email.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) validateFax(formats strfmt.Registry) error {
	if swag.IsZero(m.Fax) { // not required
		return nil
	}

	if m.Fax != nil {
		if err := m.Fax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fax")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) validatePerson(formats strfmt.Registry) error {
	if swag.IsZero(m.Person) { // not required
		return nil
	}

	if m.Person != nil {
		if err := m.Person.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) validatePhone(formats strfmt.Registry) error {
	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if m.Phone != nil {
		if err := m.Phone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contact d t o res based on the context it is used
func (m *ContactDTORes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePerson(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhone(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactDTORes) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {

		if swag.IsZero(m.Address) { // not required
			return nil
		}

		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) contextValidateEmail(ctx context.Context, formats strfmt.Registry) error {

	if m.Email != nil {

		if swag.IsZero(m.Email) { // not required
			return nil
		}

		if err := m.Email.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("email")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("email")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) contextValidateFax(ctx context.Context, formats strfmt.Registry) error {

	if m.Fax != nil {

		if swag.IsZero(m.Fax) { // not required
			return nil
		}

		if err := m.Fax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fax")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) contextValidatePerson(ctx context.Context, formats strfmt.Registry) error {

	if m.Person != nil {

		if swag.IsZero(m.Person) { // not required
			return nil
		}

		if err := m.Person.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("person")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("person")
			}
			return err
		}
	}

	return nil
}

func (m *ContactDTORes) contextValidatePhone(ctx context.Context, formats strfmt.Registry) error {

	if m.Phone != nil {

		if swag.IsZero(m.Phone) { // not required
			return nil
		}

		if err := m.Phone.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactDTORes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactDTORes) UnmarshalBinary(b []byte) error {
	var res ContactDTORes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
