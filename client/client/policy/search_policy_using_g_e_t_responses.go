// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// SearchPolicyUsingGETReader is a Reader for the SearchPolicyUsingGET structure.
type SearchPolicyUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchPolicyUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchPolicyUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchPolicyUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchPolicyUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchPolicyUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchPolicyUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchPolicyUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/search] searchPolicyUsingGET", response, response.Code())
	}
}

// NewSearchPolicyUsingGETOK creates a SearchPolicyUsingGETOK with default headers values
func NewSearchPolicyUsingGETOK() *SearchPolicyUsingGETOK {
	return &SearchPolicyUsingGETOK{}
}

/*
SearchPolicyUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type SearchPolicyUsingGETOK struct {
	Payload *models.ResponseWrapperListPolicyDTO
}

// IsSuccess returns true when this search policy using g e t o k response has a 2xx status code
func (o *SearchPolicyUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search policy using g e t o k response has a 3xx status code
func (o *SearchPolicyUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search policy using g e t o k response has a 4xx status code
func (o *SearchPolicyUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search policy using g e t o k response has a 5xx status code
func (o *SearchPolicyUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search policy using g e t o k response a status code equal to that given
func (o *SearchPolicyUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search policy using g e t o k response
func (o *SearchPolicyUsingGETOK) Code() int {
	return 200
}

func (o *SearchPolicyUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETOK %s", 200, payload)
}

func (o *SearchPolicyUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETOK %s", 200, payload)
}

func (o *SearchPolicyUsingGETOK) GetPayload() *models.ResponseWrapperListPolicyDTO {
	return o.Payload
}

func (o *SearchPolicyUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperListPolicyDTO)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchPolicyUsingGETBadRequest creates a SearchPolicyUsingGETBadRequest with default headers values
func NewSearchPolicyUsingGETBadRequest() *SearchPolicyUsingGETBadRequest {
	return &SearchPolicyUsingGETBadRequest{}
}

/*
SearchPolicyUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type SearchPolicyUsingGETBadRequest struct {
}

// IsSuccess returns true when this search policy using g e t bad request response has a 2xx status code
func (o *SearchPolicyUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search policy using g e t bad request response has a 3xx status code
func (o *SearchPolicyUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search policy using g e t bad request response has a 4xx status code
func (o *SearchPolicyUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search policy using g e t bad request response has a 5xx status code
func (o *SearchPolicyUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search policy using g e t bad request response a status code equal to that given
func (o *SearchPolicyUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search policy using g e t bad request response
func (o *SearchPolicyUsingGETBadRequest) Code() int {
	return 400
}

func (o *SearchPolicyUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETBadRequest", 400)
}

func (o *SearchPolicyUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETBadRequest", 400)
}

func (o *SearchPolicyUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchPolicyUsingGETUnauthorized creates a SearchPolicyUsingGETUnauthorized with default headers values
func NewSearchPolicyUsingGETUnauthorized() *SearchPolicyUsingGETUnauthorized {
	return &SearchPolicyUsingGETUnauthorized{}
}

/*
SearchPolicyUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SearchPolicyUsingGETUnauthorized struct {
}

// IsSuccess returns true when this search policy using g e t unauthorized response has a 2xx status code
func (o *SearchPolicyUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search policy using g e t unauthorized response has a 3xx status code
func (o *SearchPolicyUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search policy using g e t unauthorized response has a 4xx status code
func (o *SearchPolicyUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search policy using g e t unauthorized response has a 5xx status code
func (o *SearchPolicyUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search policy using g e t unauthorized response a status code equal to that given
func (o *SearchPolicyUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the search policy using g e t unauthorized response
func (o *SearchPolicyUsingGETUnauthorized) Code() int {
	return 401
}

func (o *SearchPolicyUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETUnauthorized", 401)
}

func (o *SearchPolicyUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETUnauthorized", 401)
}

func (o *SearchPolicyUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchPolicyUsingGETForbidden creates a SearchPolicyUsingGETForbidden with default headers values
func NewSearchPolicyUsingGETForbidden() *SearchPolicyUsingGETForbidden {
	return &SearchPolicyUsingGETForbidden{}
}

/*
SearchPolicyUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SearchPolicyUsingGETForbidden struct {
}

// IsSuccess returns true when this search policy using g e t forbidden response has a 2xx status code
func (o *SearchPolicyUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search policy using g e t forbidden response has a 3xx status code
func (o *SearchPolicyUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search policy using g e t forbidden response has a 4xx status code
func (o *SearchPolicyUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search policy using g e t forbidden response has a 5xx status code
func (o *SearchPolicyUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search policy using g e t forbidden response a status code equal to that given
func (o *SearchPolicyUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the search policy using g e t forbidden response
func (o *SearchPolicyUsingGETForbidden) Code() int {
	return 403
}

func (o *SearchPolicyUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETForbidden", 403)
}

func (o *SearchPolicyUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETForbidden", 403)
}

func (o *SearchPolicyUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchPolicyUsingGETNotFound creates a SearchPolicyUsingGETNotFound with default headers values
func NewSearchPolicyUsingGETNotFound() *SearchPolicyUsingGETNotFound {
	return &SearchPolicyUsingGETNotFound{}
}

/*
SearchPolicyUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type SearchPolicyUsingGETNotFound struct {
}

// IsSuccess returns true when this search policy using g e t not found response has a 2xx status code
func (o *SearchPolicyUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search policy using g e t not found response has a 3xx status code
func (o *SearchPolicyUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search policy using g e t not found response has a 4xx status code
func (o *SearchPolicyUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search policy using g e t not found response has a 5xx status code
func (o *SearchPolicyUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search policy using g e t not found response a status code equal to that given
func (o *SearchPolicyUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search policy using g e t not found response
func (o *SearchPolicyUsingGETNotFound) Code() int {
	return 404
}

func (o *SearchPolicyUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETNotFound", 404)
}

func (o *SearchPolicyUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETNotFound", 404)
}

func (o *SearchPolicyUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchPolicyUsingGETInternalServerError creates a SearchPolicyUsingGETInternalServerError with default headers values
func NewSearchPolicyUsingGETInternalServerError() *SearchPolicyUsingGETInternalServerError {
	return &SearchPolicyUsingGETInternalServerError{}
}

/*
SearchPolicyUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type SearchPolicyUsingGETInternalServerError struct {
}

// IsSuccess returns true when this search policy using g e t internal server error response has a 2xx status code
func (o *SearchPolicyUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search policy using g e t internal server error response has a 3xx status code
func (o *SearchPolicyUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search policy using g e t internal server error response has a 4xx status code
func (o *SearchPolicyUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search policy using g e t internal server error response has a 5xx status code
func (o *SearchPolicyUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search policy using g e t internal server error response a status code equal to that given
func (o *SearchPolicyUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search policy using g e t internal server error response
func (o *SearchPolicyUsingGETInternalServerError) Code() int {
	return 500
}

func (o *SearchPolicyUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETInternalServerError", 500)
}

func (o *SearchPolicyUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/search][%d] searchPolicyUsingGETInternalServerError", 500)
}

func (o *SearchPolicyUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
