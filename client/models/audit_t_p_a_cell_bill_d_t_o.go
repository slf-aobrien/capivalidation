// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AuditTPACellBillDTO AuditTPACellBillDTO
//
// swagger:model AuditTPACellBillDTO
type AuditTPACellBillDTO struct {

	// audit t p a bill details d t o
	AuditTPABillDetailsDTO []*AuditTPABillDetailsDTO `json:"auditTPABillDetailsDTO"`

	// case unall acct expense d t o
	CaseUnallAcctExpenseDTO []*CaseUnallAcctExpenseDTO `json:"caseUnallAcctExpenseDTO"`

	// cash amt
	CashAmt string `json:"cashAmt,omitempty"`
}

// Validate validates this audit t p a cell bill d t o
func (m *AuditTPACellBillDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuditTPABillDetailsDTO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaseUnallAcctExpenseDTO(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditTPACellBillDTO) validateAuditTPABillDetailsDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.AuditTPABillDetailsDTO) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditTPABillDetailsDTO); i++ {
		if swag.IsZero(m.AuditTPABillDetailsDTO[i]) { // not required
			continue
		}

		if m.AuditTPABillDetailsDTO[i] != nil {
			if err := m.AuditTPABillDetailsDTO[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditTPABillDetailsDTO" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditTPABillDetailsDTO" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuditTPACellBillDTO) validateCaseUnallAcctExpenseDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.CaseUnallAcctExpenseDTO) { // not required
		return nil
	}

	for i := 0; i < len(m.CaseUnallAcctExpenseDTO); i++ {
		if swag.IsZero(m.CaseUnallAcctExpenseDTO[i]) { // not required
			continue
		}

		if m.CaseUnallAcctExpenseDTO[i] != nil {
			if err := m.CaseUnallAcctExpenseDTO[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("caseUnallAcctExpenseDTO" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("caseUnallAcctExpenseDTO" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this audit t p a cell bill d t o based on the context it is used
func (m *AuditTPACellBillDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuditTPABillDetailsDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCaseUnallAcctExpenseDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuditTPACellBillDTO) contextValidateAuditTPABillDetailsDTO(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AuditTPABillDetailsDTO); i++ {

		if m.AuditTPABillDetailsDTO[i] != nil {

			if swag.IsZero(m.AuditTPABillDetailsDTO[i]) { // not required
				return nil
			}

			if err := m.AuditTPABillDetailsDTO[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditTPABillDetailsDTO" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("auditTPABillDetailsDTO" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuditTPACellBillDTO) contextValidateCaseUnallAcctExpenseDTO(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CaseUnallAcctExpenseDTO); i++ {

		if m.CaseUnallAcctExpenseDTO[i] != nil {

			if swag.IsZero(m.CaseUnallAcctExpenseDTO[i]) { // not required
				return nil
			}

			if err := m.CaseUnallAcctExpenseDTO[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("caseUnallAcctExpenseDTO" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("caseUnallAcctExpenseDTO" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuditTPACellBillDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuditTPACellBillDTO) UnmarshalBinary(b []byte) error {
	var res AuditTPACellBillDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
