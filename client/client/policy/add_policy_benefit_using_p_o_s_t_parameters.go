// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAddPolicyBenefitUsingPOSTParams creates a new AddPolicyBenefitUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAddPolicyBenefitUsingPOSTParams() *AddPolicyBenefitUsingPOSTParams {
	return &AddPolicyBenefitUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAddPolicyBenefitUsingPOSTParamsWithTimeout creates a new AddPolicyBenefitUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewAddPolicyBenefitUsingPOSTParamsWithTimeout(timeout time.Duration) *AddPolicyBenefitUsingPOSTParams {
	return &AddPolicyBenefitUsingPOSTParams{
		timeout: timeout,
	}
}

// NewAddPolicyBenefitUsingPOSTParamsWithContext creates a new AddPolicyBenefitUsingPOSTParams object
// with the ability to set a context for a request.
func NewAddPolicyBenefitUsingPOSTParamsWithContext(ctx context.Context) *AddPolicyBenefitUsingPOSTParams {
	return &AddPolicyBenefitUsingPOSTParams{
		Context: ctx,
	}
}

// NewAddPolicyBenefitUsingPOSTParamsWithHTTPClient creates a new AddPolicyBenefitUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewAddPolicyBenefitUsingPOSTParamsWithHTTPClient(client *http.Client) *AddPolicyBenefitUsingPOSTParams {
	return &AddPolicyBenefitUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
AddPolicyBenefitUsingPOSTParams contains all the parameters to send to the API endpoint

	for the add policy benefit using p o s t operation.

	Typically these are written to a http.Request.
*/
type AddPolicyBenefitUsingPOSTParams struct {

	/* AddASOReimbursementsRegularBilling.

	   addASOReimbursementsRegularBilling
	*/
	AddASOReimbursementsRegularBilling *bool

	/* AddCAPPDRegularBilling.

	   addCAPPDRegularBilling
	*/
	AddCAPPDRegularBilling *bool

	/* AddDentalASORegularBilling.

	   addDentalASORegularBilling
	*/
	AddDentalASORegularBilling *bool

	/* AddHealthNavigatorBilling.

	   addHealthNavigatorBilling
	*/
	AddHealthNavigatorBilling *bool

	/* AddMDBInAdvanceBilling.

	   addMDBInAdvanceBilling
	*/
	AddMDBInAdvanceBilling *bool

	/* AddMDBInArrearsBilling.

	   addMDBInArrearsBilling
	*/
	AddMDBInArrearsBilling *bool

	/* AddNotionalBilling.

	   addNotionalBilling
	*/
	AddNotionalBilling *bool

	/* AddReconciliationBilling.

	   addReconciliationBilling
	*/
	AddReconciliationBilling *bool

	/* AddRegularBilling.

	   addRegularBilling
	*/
	AddRegularBilling *bool

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate *string

	/* PolicyCreateDate.

	   policyCreateDate
	*/
	PolicyCreateDate *string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber *string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication *string

	/* RequestUser.

	   requestUser
	*/
	RequestUser *string

	/* SystemBenefitList.

	   systemBenefitList
	*/
	SystemBenefitList []string

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat *string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the add policy benefit using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddPolicyBenefitUsingPOSTParams) WithDefaults() *AddPolicyBenefitUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the add policy benefit using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AddPolicyBenefitUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithTimeout(timeout time.Duration) *AddPolicyBenefitUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithContext(ctx context.Context) *AddPolicyBenefitUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithHTTPClient(client *http.Client) *AddPolicyBenefitUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddASOReimbursementsRegularBilling adds the addASOReimbursementsRegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddASOReimbursementsRegularBilling(addASOReimbursementsRegularBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddASOReimbursementsRegularBilling(addASOReimbursementsRegularBilling)
	return o
}

// SetAddASOReimbursementsRegularBilling adds the addASOReimbursementsRegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddASOReimbursementsRegularBilling(addASOReimbursementsRegularBilling *bool) {
	o.AddASOReimbursementsRegularBilling = addASOReimbursementsRegularBilling
}

// WithAddCAPPDRegularBilling adds the addCAPPDRegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddCAPPDRegularBilling(addCAPPDRegularBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddCAPPDRegularBilling(addCAPPDRegularBilling)
	return o
}

// SetAddCAPPDRegularBilling adds the addCAPPDRegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddCAPPDRegularBilling(addCAPPDRegularBilling *bool) {
	o.AddCAPPDRegularBilling = addCAPPDRegularBilling
}

// WithAddDentalASORegularBilling adds the addDentalASORegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddDentalASORegularBilling(addDentalASORegularBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddDentalASORegularBilling(addDentalASORegularBilling)
	return o
}

// SetAddDentalASORegularBilling adds the addDentalASORegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddDentalASORegularBilling(addDentalASORegularBilling *bool) {
	o.AddDentalASORegularBilling = addDentalASORegularBilling
}

// WithAddHealthNavigatorBilling adds the addHealthNavigatorBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddHealthNavigatorBilling(addHealthNavigatorBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddHealthNavigatorBilling(addHealthNavigatorBilling)
	return o
}

// SetAddHealthNavigatorBilling adds the addHealthNavigatorBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddHealthNavigatorBilling(addHealthNavigatorBilling *bool) {
	o.AddHealthNavigatorBilling = addHealthNavigatorBilling
}

// WithAddMDBInAdvanceBilling adds the addMDBInAdvanceBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddMDBInAdvanceBilling(addMDBInAdvanceBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddMDBInAdvanceBilling(addMDBInAdvanceBilling)
	return o
}

// SetAddMDBInAdvanceBilling adds the addMDBInAdvanceBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddMDBInAdvanceBilling(addMDBInAdvanceBilling *bool) {
	o.AddMDBInAdvanceBilling = addMDBInAdvanceBilling
}

// WithAddMDBInArrearsBilling adds the addMDBInArrearsBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddMDBInArrearsBilling(addMDBInArrearsBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddMDBInArrearsBilling(addMDBInArrearsBilling)
	return o
}

// SetAddMDBInArrearsBilling adds the addMDBInArrearsBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddMDBInArrearsBilling(addMDBInArrearsBilling *bool) {
	o.AddMDBInArrearsBilling = addMDBInArrearsBilling
}

// WithAddNotionalBilling adds the addNotionalBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddNotionalBilling(addNotionalBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddNotionalBilling(addNotionalBilling)
	return o
}

// SetAddNotionalBilling adds the addNotionalBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddNotionalBilling(addNotionalBilling *bool) {
	o.AddNotionalBilling = addNotionalBilling
}

// WithAddReconciliationBilling adds the addReconciliationBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddReconciliationBilling(addReconciliationBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddReconciliationBilling(addReconciliationBilling)
	return o
}

// SetAddReconciliationBilling adds the addReconciliationBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddReconciliationBilling(addReconciliationBilling *bool) {
	o.AddReconciliationBilling = addReconciliationBilling
}

// WithAddRegularBilling adds the addRegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithAddRegularBilling(addRegularBilling *bool) *AddPolicyBenefitUsingPOSTParams {
	o.SetAddRegularBilling(addRegularBilling)
	return o
}

// SetAddRegularBilling adds the addRegularBilling to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetAddRegularBilling(addRegularBilling *bool) {
	o.AddRegularBilling = addRegularBilling
}

// WithEffectiveDate adds the effectiveDate to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithEffectiveDate(effectiveDate *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetEffectiveDate(effectiveDate *string) {
	o.EffectiveDate = effectiveDate
}

// WithPolicyCreateDate adds the policyCreateDate to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithPolicyCreateDate(policyCreateDate *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetPolicyCreateDate(policyCreateDate)
	return o
}

// SetPolicyCreateDate adds the policyCreateDate to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetPolicyCreateDate(policyCreateDate *string) {
	o.PolicyCreateDate = policyCreateDate
}

// WithPolicyNumber adds the policyNumber to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithPolicyNumber(policyNumber *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetPolicyNumber(policyNumber *string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithRequestApplication(requestApplication *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetRequestApplication(requestApplication *string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithRequestUser(requestUser *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetRequestUser(requestUser *string) {
	o.RequestUser = requestUser
}

// WithSystemBenefitList adds the systemBenefitList to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithSystemBenefitList(systemBenefitList []string) *AddPolicyBenefitUsingPOSTParams {
	o.SetSystemBenefitList(systemBenefitList)
	return o
}

// SetSystemBenefitList adds the systemBenefitList to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetSystemBenefitList(systemBenefitList []string) {
	o.SystemBenefitList = systemBenefitList
}

// WithVarianceFormat adds the varianceFormat to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithVarianceFormat(varianceFormat *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetVarianceFormat(varianceFormat *string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) WithVarianceLevel(varianceLevel *string) *AddPolicyBenefitUsingPOSTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the add policy benefit using p o s t params
func (o *AddPolicyBenefitUsingPOSTParams) SetVarianceLevel(varianceLevel *string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *AddPolicyBenefitUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddASOReimbursementsRegularBilling != nil {

		// query param addASOReimbursementsRegularBilling
		var qrAddASOReimbursementsRegularBilling bool

		if o.AddASOReimbursementsRegularBilling != nil {
			qrAddASOReimbursementsRegularBilling = *o.AddASOReimbursementsRegularBilling
		}
		qAddASOReimbursementsRegularBilling := swag.FormatBool(qrAddASOReimbursementsRegularBilling)
		if qAddASOReimbursementsRegularBilling != "" {

			if err := r.SetQueryParam("addASOReimbursementsRegularBilling", qAddASOReimbursementsRegularBilling); err != nil {
				return err
			}
		}
	}

	if o.AddCAPPDRegularBilling != nil {

		// query param addCAPPDRegularBilling
		var qrAddCAPPDRegularBilling bool

		if o.AddCAPPDRegularBilling != nil {
			qrAddCAPPDRegularBilling = *o.AddCAPPDRegularBilling
		}
		qAddCAPPDRegularBilling := swag.FormatBool(qrAddCAPPDRegularBilling)
		if qAddCAPPDRegularBilling != "" {

			if err := r.SetQueryParam("addCAPPDRegularBilling", qAddCAPPDRegularBilling); err != nil {
				return err
			}
		}
	}

	if o.AddDentalASORegularBilling != nil {

		// query param addDentalASORegularBilling
		var qrAddDentalASORegularBilling bool

		if o.AddDentalASORegularBilling != nil {
			qrAddDentalASORegularBilling = *o.AddDentalASORegularBilling
		}
		qAddDentalASORegularBilling := swag.FormatBool(qrAddDentalASORegularBilling)
		if qAddDentalASORegularBilling != "" {

			if err := r.SetQueryParam("addDentalASORegularBilling", qAddDentalASORegularBilling); err != nil {
				return err
			}
		}
	}

	if o.AddHealthNavigatorBilling != nil {

		// query param addHealthNavigatorBilling
		var qrAddHealthNavigatorBilling bool

		if o.AddHealthNavigatorBilling != nil {
			qrAddHealthNavigatorBilling = *o.AddHealthNavigatorBilling
		}
		qAddHealthNavigatorBilling := swag.FormatBool(qrAddHealthNavigatorBilling)
		if qAddHealthNavigatorBilling != "" {

			if err := r.SetQueryParam("addHealthNavigatorBilling", qAddHealthNavigatorBilling); err != nil {
				return err
			}
		}
	}

	if o.AddMDBInAdvanceBilling != nil {

		// query param addMDBInAdvanceBilling
		var qrAddMDBInAdvanceBilling bool

		if o.AddMDBInAdvanceBilling != nil {
			qrAddMDBInAdvanceBilling = *o.AddMDBInAdvanceBilling
		}
		qAddMDBInAdvanceBilling := swag.FormatBool(qrAddMDBInAdvanceBilling)
		if qAddMDBInAdvanceBilling != "" {

			if err := r.SetQueryParam("addMDBInAdvanceBilling", qAddMDBInAdvanceBilling); err != nil {
				return err
			}
		}
	}

	if o.AddMDBInArrearsBilling != nil {

		// query param addMDBInArrearsBilling
		var qrAddMDBInArrearsBilling bool

		if o.AddMDBInArrearsBilling != nil {
			qrAddMDBInArrearsBilling = *o.AddMDBInArrearsBilling
		}
		qAddMDBInArrearsBilling := swag.FormatBool(qrAddMDBInArrearsBilling)
		if qAddMDBInArrearsBilling != "" {

			if err := r.SetQueryParam("addMDBInArrearsBilling", qAddMDBInArrearsBilling); err != nil {
				return err
			}
		}
	}

	if o.AddNotionalBilling != nil {

		// query param addNotionalBilling
		var qrAddNotionalBilling bool

		if o.AddNotionalBilling != nil {
			qrAddNotionalBilling = *o.AddNotionalBilling
		}
		qAddNotionalBilling := swag.FormatBool(qrAddNotionalBilling)
		if qAddNotionalBilling != "" {

			if err := r.SetQueryParam("addNotionalBilling", qAddNotionalBilling); err != nil {
				return err
			}
		}
	}

	if o.AddReconciliationBilling != nil {

		// query param addReconciliationBilling
		var qrAddReconciliationBilling bool

		if o.AddReconciliationBilling != nil {
			qrAddReconciliationBilling = *o.AddReconciliationBilling
		}
		qAddReconciliationBilling := swag.FormatBool(qrAddReconciliationBilling)
		if qAddReconciliationBilling != "" {

			if err := r.SetQueryParam("addReconciliationBilling", qAddReconciliationBilling); err != nil {
				return err
			}
		}
	}

	if o.AddRegularBilling != nil {

		// query param addRegularBilling
		var qrAddRegularBilling bool

		if o.AddRegularBilling != nil {
			qrAddRegularBilling = *o.AddRegularBilling
		}
		qAddRegularBilling := swag.FormatBool(qrAddRegularBilling)
		if qAddRegularBilling != "" {

			if err := r.SetQueryParam("addRegularBilling", qAddRegularBilling); err != nil {
				return err
			}
		}
	}

	if o.EffectiveDate != nil {

		// query param effectiveDate
		var qrEffectiveDate string

		if o.EffectiveDate != nil {
			qrEffectiveDate = *o.EffectiveDate
		}
		qEffectiveDate := qrEffectiveDate
		if qEffectiveDate != "" {

			if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
				return err
			}
		}
	}

	if o.PolicyCreateDate != nil {

		// query param policyCreateDate
		var qrPolicyCreateDate string

		if o.PolicyCreateDate != nil {
			qrPolicyCreateDate = *o.PolicyCreateDate
		}
		qPolicyCreateDate := qrPolicyCreateDate
		if qPolicyCreateDate != "" {

			if err := r.SetQueryParam("policyCreateDate", qPolicyCreateDate); err != nil {
				return err
			}
		}
	}

	if o.PolicyNumber != nil {

		// query param policyNumber
		var qrPolicyNumber string

		if o.PolicyNumber != nil {
			qrPolicyNumber = *o.PolicyNumber
		}
		qPolicyNumber := qrPolicyNumber
		if qPolicyNumber != "" {

			if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
				return err
			}
		}
	}

	if o.RequestApplication != nil {

		// query param requestApplication
		var qrRequestApplication string

		if o.RequestApplication != nil {
			qrRequestApplication = *o.RequestApplication
		}
		qRequestApplication := qrRequestApplication
		if qRequestApplication != "" {

			if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
				return err
			}
		}
	}

	if o.RequestUser != nil {

		// query param requestUser
		var qrRequestUser string

		if o.RequestUser != nil {
			qrRequestUser = *o.RequestUser
		}
		qRequestUser := qrRequestUser
		if qRequestUser != "" {

			if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
				return err
			}
		}
	}
	if o.SystemBenefitList != nil {
		if err := r.SetBodyParam(o.SystemBenefitList); err != nil {
			return err
		}
	}

	if o.VarianceFormat != nil {

		// query param varianceFormat
		var qrVarianceFormat string

		if o.VarianceFormat != nil {
			qrVarianceFormat = *o.VarianceFormat
		}
		qVarianceFormat := qrVarianceFormat
		if qVarianceFormat != "" {

			if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
				return err
			}
		}
	}

	if o.VarianceLevel != nil {

		// query param varianceLevel
		var qrVarianceLevel string

		if o.VarianceLevel != nil {
			qrVarianceLevel = *o.VarianceLevel
		}
		qVarianceLevel := qrVarianceLevel
		if qVarianceLevel != "" {

			if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
