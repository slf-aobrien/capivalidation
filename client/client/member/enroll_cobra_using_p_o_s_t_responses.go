// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// EnrollCobraUsingPOSTReader is a Reader for the EnrollCobraUsingPOST structure.
type EnrollCobraUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnrollCobraUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnrollCobraUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewEnrollCobraUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEnrollCobraUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEnrollCobraUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEnrollCobraUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEnrollCobraUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEnrollCobraUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /compassintegrationapp/member/enroll/cobra] enrollCobraUsingPOST", response, response.Code())
	}
}

// NewEnrollCobraUsingPOSTOK creates a EnrollCobraUsingPOSTOK with default headers values
func NewEnrollCobraUsingPOSTOK() *EnrollCobraUsingPOSTOK {
	return &EnrollCobraUsingPOSTOK{}
}

/*
EnrollCobraUsingPOSTOK describes a response with status code 200, with default header values.

Success
*/
type EnrollCobraUsingPOSTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this enroll cobra using p o s t o k response has a 2xx status code
func (o *EnrollCobraUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enroll cobra using p o s t o k response has a 3xx status code
func (o *EnrollCobraUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t o k response has a 4xx status code
func (o *EnrollCobraUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this enroll cobra using p o s t o k response has a 5xx status code
func (o *EnrollCobraUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll cobra using p o s t o k response a status code equal to that given
func (o *EnrollCobraUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the enroll cobra using p o s t o k response
func (o *EnrollCobraUsingPOSTOK) Code() int {
	return 200
}

func (o *EnrollCobraUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTOK %s", 200, payload)
}

func (o *EnrollCobraUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTOK %s", 200, payload)
}

func (o *EnrollCobraUsingPOSTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *EnrollCobraUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnrollCobraUsingPOSTCreated creates a EnrollCobraUsingPOSTCreated with default headers values
func NewEnrollCobraUsingPOSTCreated() *EnrollCobraUsingPOSTCreated {
	return &EnrollCobraUsingPOSTCreated{}
}

/*
EnrollCobraUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type EnrollCobraUsingPOSTCreated struct {
}

// IsSuccess returns true when this enroll cobra using p o s t created response has a 2xx status code
func (o *EnrollCobraUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this enroll cobra using p o s t created response has a 3xx status code
func (o *EnrollCobraUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t created response has a 4xx status code
func (o *EnrollCobraUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this enroll cobra using p o s t created response has a 5xx status code
func (o *EnrollCobraUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll cobra using p o s t created response a status code equal to that given
func (o *EnrollCobraUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the enroll cobra using p o s t created response
func (o *EnrollCobraUsingPOSTCreated) Code() int {
	return 201
}

func (o *EnrollCobraUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTCreated", 201)
}

func (o *EnrollCobraUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTCreated", 201)
}

func (o *EnrollCobraUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCobraUsingPOSTBadRequest creates a EnrollCobraUsingPOSTBadRequest with default headers values
func NewEnrollCobraUsingPOSTBadRequest() *EnrollCobraUsingPOSTBadRequest {
	return &EnrollCobraUsingPOSTBadRequest{}
}

/*
EnrollCobraUsingPOSTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type EnrollCobraUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this enroll cobra using p o s t bad request response has a 2xx status code
func (o *EnrollCobraUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll cobra using p o s t bad request response has a 3xx status code
func (o *EnrollCobraUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t bad request response has a 4xx status code
func (o *EnrollCobraUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this enroll cobra using p o s t bad request response has a 5xx status code
func (o *EnrollCobraUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll cobra using p o s t bad request response a status code equal to that given
func (o *EnrollCobraUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the enroll cobra using p o s t bad request response
func (o *EnrollCobraUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *EnrollCobraUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTBadRequest", 400)
}

func (o *EnrollCobraUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTBadRequest", 400)
}

func (o *EnrollCobraUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCobraUsingPOSTUnauthorized creates a EnrollCobraUsingPOSTUnauthorized with default headers values
func NewEnrollCobraUsingPOSTUnauthorized() *EnrollCobraUsingPOSTUnauthorized {
	return &EnrollCobraUsingPOSTUnauthorized{}
}

/*
EnrollCobraUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type EnrollCobraUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this enroll cobra using p o s t unauthorized response has a 2xx status code
func (o *EnrollCobraUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll cobra using p o s t unauthorized response has a 3xx status code
func (o *EnrollCobraUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t unauthorized response has a 4xx status code
func (o *EnrollCobraUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this enroll cobra using p o s t unauthorized response has a 5xx status code
func (o *EnrollCobraUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll cobra using p o s t unauthorized response a status code equal to that given
func (o *EnrollCobraUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the enroll cobra using p o s t unauthorized response
func (o *EnrollCobraUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *EnrollCobraUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTUnauthorized", 401)
}

func (o *EnrollCobraUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTUnauthorized", 401)
}

func (o *EnrollCobraUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCobraUsingPOSTForbidden creates a EnrollCobraUsingPOSTForbidden with default headers values
func NewEnrollCobraUsingPOSTForbidden() *EnrollCobraUsingPOSTForbidden {
	return &EnrollCobraUsingPOSTForbidden{}
}

/*
EnrollCobraUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type EnrollCobraUsingPOSTForbidden struct {
}

// IsSuccess returns true when this enroll cobra using p o s t forbidden response has a 2xx status code
func (o *EnrollCobraUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll cobra using p o s t forbidden response has a 3xx status code
func (o *EnrollCobraUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t forbidden response has a 4xx status code
func (o *EnrollCobraUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this enroll cobra using p o s t forbidden response has a 5xx status code
func (o *EnrollCobraUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll cobra using p o s t forbidden response a status code equal to that given
func (o *EnrollCobraUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the enroll cobra using p o s t forbidden response
func (o *EnrollCobraUsingPOSTForbidden) Code() int {
	return 403
}

func (o *EnrollCobraUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTForbidden", 403)
}

func (o *EnrollCobraUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTForbidden", 403)
}

func (o *EnrollCobraUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCobraUsingPOSTNotFound creates a EnrollCobraUsingPOSTNotFound with default headers values
func NewEnrollCobraUsingPOSTNotFound() *EnrollCobraUsingPOSTNotFound {
	return &EnrollCobraUsingPOSTNotFound{}
}

/*
EnrollCobraUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type EnrollCobraUsingPOSTNotFound struct {
}

// IsSuccess returns true when this enroll cobra using p o s t not found response has a 2xx status code
func (o *EnrollCobraUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll cobra using p o s t not found response has a 3xx status code
func (o *EnrollCobraUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t not found response has a 4xx status code
func (o *EnrollCobraUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this enroll cobra using p o s t not found response has a 5xx status code
func (o *EnrollCobraUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this enroll cobra using p o s t not found response a status code equal to that given
func (o *EnrollCobraUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the enroll cobra using p o s t not found response
func (o *EnrollCobraUsingPOSTNotFound) Code() int {
	return 404
}

func (o *EnrollCobraUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTNotFound", 404)
}

func (o *EnrollCobraUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTNotFound", 404)
}

func (o *EnrollCobraUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewEnrollCobraUsingPOSTInternalServerError creates a EnrollCobraUsingPOSTInternalServerError with default headers values
func NewEnrollCobraUsingPOSTInternalServerError() *EnrollCobraUsingPOSTInternalServerError {
	return &EnrollCobraUsingPOSTInternalServerError{}
}

/*
EnrollCobraUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type EnrollCobraUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this enroll cobra using p o s t internal server error response has a 2xx status code
func (o *EnrollCobraUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this enroll cobra using p o s t internal server error response has a 3xx status code
func (o *EnrollCobraUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this enroll cobra using p o s t internal server error response has a 4xx status code
func (o *EnrollCobraUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this enroll cobra using p o s t internal server error response has a 5xx status code
func (o *EnrollCobraUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this enroll cobra using p o s t internal server error response a status code equal to that given
func (o *EnrollCobraUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the enroll cobra using p o s t internal server error response
func (o *EnrollCobraUsingPOSTInternalServerError) Code() int {
	return 500
}

func (o *EnrollCobraUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTInternalServerError", 500)
}

func (o *EnrollCobraUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/member/enroll/cobra][%d] enrollCobraUsingPOSTInternalServerError", 500)
}

func (o *EnrollCobraUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
