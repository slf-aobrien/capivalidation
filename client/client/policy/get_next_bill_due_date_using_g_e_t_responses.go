// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// GetNextBillDueDateUsingGETReader is a Reader for the GetNextBillDueDateUsingGET structure.
type GetNextBillDueDateUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNextBillDueDateUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNextBillDueDateUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetNextBillDueDateUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetNextBillDueDateUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetNextBillDueDateUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetNextBillDueDateUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetNextBillDueDateUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/nextBillDueDt] getNextBillDueDateUsingGET", response, response.Code())
	}
}

// NewGetNextBillDueDateUsingGETOK creates a GetNextBillDueDateUsingGETOK with default headers values
func NewGetNextBillDueDateUsingGETOK() *GetNextBillDueDateUsingGETOK {
	return &GetNextBillDueDateUsingGETOK{}
}

/*
GetNextBillDueDateUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type GetNextBillDueDateUsingGETOK struct {
	Payload *models.ResponseWrapperString
}

// IsSuccess returns true when this get next bill due date using g e t o k response has a 2xx status code
func (o *GetNextBillDueDateUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get next bill due date using g e t o k response has a 3xx status code
func (o *GetNextBillDueDateUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get next bill due date using g e t o k response has a 4xx status code
func (o *GetNextBillDueDateUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get next bill due date using g e t o k response has a 5xx status code
func (o *GetNextBillDueDateUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get next bill due date using g e t o k response a status code equal to that given
func (o *GetNextBillDueDateUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get next bill due date using g e t o k response
func (o *GetNextBillDueDateUsingGETOK) Code() int {
	return 200
}

func (o *GetNextBillDueDateUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETOK %s", 200, payload)
}

func (o *GetNextBillDueDateUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETOK %s", 200, payload)
}

func (o *GetNextBillDueDateUsingGETOK) GetPayload() *models.ResponseWrapperString {
	return o.Payload
}

func (o *GetNextBillDueDateUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperString)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNextBillDueDateUsingGETBadRequest creates a GetNextBillDueDateUsingGETBadRequest with default headers values
func NewGetNextBillDueDateUsingGETBadRequest() *GetNextBillDueDateUsingGETBadRequest {
	return &GetNextBillDueDateUsingGETBadRequest{}
}

/*
GetNextBillDueDateUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetNextBillDueDateUsingGETBadRequest struct {
}

// IsSuccess returns true when this get next bill due date using g e t bad request response has a 2xx status code
func (o *GetNextBillDueDateUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get next bill due date using g e t bad request response has a 3xx status code
func (o *GetNextBillDueDateUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get next bill due date using g e t bad request response has a 4xx status code
func (o *GetNextBillDueDateUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get next bill due date using g e t bad request response has a 5xx status code
func (o *GetNextBillDueDateUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get next bill due date using g e t bad request response a status code equal to that given
func (o *GetNextBillDueDateUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the get next bill due date using g e t bad request response
func (o *GetNextBillDueDateUsingGETBadRequest) Code() int {
	return 400
}

func (o *GetNextBillDueDateUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETBadRequest", 400)
}

func (o *GetNextBillDueDateUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETBadRequest", 400)
}

func (o *GetNextBillDueDateUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNextBillDueDateUsingGETUnauthorized creates a GetNextBillDueDateUsingGETUnauthorized with default headers values
func NewGetNextBillDueDateUsingGETUnauthorized() *GetNextBillDueDateUsingGETUnauthorized {
	return &GetNextBillDueDateUsingGETUnauthorized{}
}

/*
GetNextBillDueDateUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetNextBillDueDateUsingGETUnauthorized struct {
}

// IsSuccess returns true when this get next bill due date using g e t unauthorized response has a 2xx status code
func (o *GetNextBillDueDateUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get next bill due date using g e t unauthorized response has a 3xx status code
func (o *GetNextBillDueDateUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get next bill due date using g e t unauthorized response has a 4xx status code
func (o *GetNextBillDueDateUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get next bill due date using g e t unauthorized response has a 5xx status code
func (o *GetNextBillDueDateUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get next bill due date using g e t unauthorized response a status code equal to that given
func (o *GetNextBillDueDateUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get next bill due date using g e t unauthorized response
func (o *GetNextBillDueDateUsingGETUnauthorized) Code() int {
	return 401
}

func (o *GetNextBillDueDateUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETUnauthorized", 401)
}

func (o *GetNextBillDueDateUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETUnauthorized", 401)
}

func (o *GetNextBillDueDateUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNextBillDueDateUsingGETForbidden creates a GetNextBillDueDateUsingGETForbidden with default headers values
func NewGetNextBillDueDateUsingGETForbidden() *GetNextBillDueDateUsingGETForbidden {
	return &GetNextBillDueDateUsingGETForbidden{}
}

/*
GetNextBillDueDateUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetNextBillDueDateUsingGETForbidden struct {
}

// IsSuccess returns true when this get next bill due date using g e t forbidden response has a 2xx status code
func (o *GetNextBillDueDateUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get next bill due date using g e t forbidden response has a 3xx status code
func (o *GetNextBillDueDateUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get next bill due date using g e t forbidden response has a 4xx status code
func (o *GetNextBillDueDateUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get next bill due date using g e t forbidden response has a 5xx status code
func (o *GetNextBillDueDateUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get next bill due date using g e t forbidden response a status code equal to that given
func (o *GetNextBillDueDateUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get next bill due date using g e t forbidden response
func (o *GetNextBillDueDateUsingGETForbidden) Code() int {
	return 403
}

func (o *GetNextBillDueDateUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETForbidden", 403)
}

func (o *GetNextBillDueDateUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETForbidden", 403)
}

func (o *GetNextBillDueDateUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNextBillDueDateUsingGETNotFound creates a GetNextBillDueDateUsingGETNotFound with default headers values
func NewGetNextBillDueDateUsingGETNotFound() *GetNextBillDueDateUsingGETNotFound {
	return &GetNextBillDueDateUsingGETNotFound{}
}

/*
GetNextBillDueDateUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetNextBillDueDateUsingGETNotFound struct {
}

// IsSuccess returns true when this get next bill due date using g e t not found response has a 2xx status code
func (o *GetNextBillDueDateUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get next bill due date using g e t not found response has a 3xx status code
func (o *GetNextBillDueDateUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get next bill due date using g e t not found response has a 4xx status code
func (o *GetNextBillDueDateUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get next bill due date using g e t not found response has a 5xx status code
func (o *GetNextBillDueDateUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get next bill due date using g e t not found response a status code equal to that given
func (o *GetNextBillDueDateUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get next bill due date using g e t not found response
func (o *GetNextBillDueDateUsingGETNotFound) Code() int {
	return 404
}

func (o *GetNextBillDueDateUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETNotFound", 404)
}

func (o *GetNextBillDueDateUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETNotFound", 404)
}

func (o *GetNextBillDueDateUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetNextBillDueDateUsingGETInternalServerError creates a GetNextBillDueDateUsingGETInternalServerError with default headers values
func NewGetNextBillDueDateUsingGETInternalServerError() *GetNextBillDueDateUsingGETInternalServerError {
	return &GetNextBillDueDateUsingGETInternalServerError{}
}

/*
GetNextBillDueDateUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetNextBillDueDateUsingGETInternalServerError struct {
}

// IsSuccess returns true when this get next bill due date using g e t internal server error response has a 2xx status code
func (o *GetNextBillDueDateUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get next bill due date using g e t internal server error response has a 3xx status code
func (o *GetNextBillDueDateUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get next bill due date using g e t internal server error response has a 4xx status code
func (o *GetNextBillDueDateUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get next bill due date using g e t internal server error response has a 5xx status code
func (o *GetNextBillDueDateUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get next bill due date using g e t internal server error response a status code equal to that given
func (o *GetNextBillDueDateUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get next bill due date using g e t internal server error response
func (o *GetNextBillDueDateUsingGETInternalServerError) Code() int {
	return 500
}

func (o *GetNextBillDueDateUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETInternalServerError", 500)
}

func (o *GetNextBillDueDateUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/nextBillDueDt][%d] getNextBillDueDateUsingGETInternalServerError", 500)
}

func (o *GetNextBillDueDateUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
