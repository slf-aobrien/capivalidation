// Code generated by go-swagger; DO NOT EDIT.

package benefit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdateBenefitDateUsingPUTReader is a Reader for the UpdateBenefitDateUsingPUT structure.
type UpdateBenefitDateUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBenefitDateUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateBenefitDateUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdateBenefitDateUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateBenefitDateUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateBenefitDateUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateBenefitDateUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateBenefitDateUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateBenefitDateUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/benefit/benefitDate] updateBenefitDateUsingPUT", response, response.Code())
	}
}

// NewUpdateBenefitDateUsingPUTOK creates a UpdateBenefitDateUsingPUTOK with default headers values
func NewUpdateBenefitDateUsingPUTOK() *UpdateBenefitDateUsingPUTOK {
	return &UpdateBenefitDateUsingPUTOK{}
}

/*
UpdateBenefitDateUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdateBenefitDateUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update benefit date using p u t o k response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update benefit date using p u t o k response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t o k response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update benefit date using p u t o k response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit date using p u t o k response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update benefit date using p u t o k response
func (o *UpdateBenefitDateUsingPUTOK) Code() int {
	return 200
}

func (o *UpdateBenefitDateUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTOK %s", 200, payload)
}

func (o *UpdateBenefitDateUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTOK %s", 200, payload)
}

func (o *UpdateBenefitDateUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdateBenefitDateUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBenefitDateUsingPUTCreated creates a UpdateBenefitDateUsingPUTCreated with default headers values
func NewUpdateBenefitDateUsingPUTCreated() *UpdateBenefitDateUsingPUTCreated {
	return &UpdateBenefitDateUsingPUTCreated{}
}

/*
UpdateBenefitDateUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdateBenefitDateUsingPUTCreated struct {
}

// IsSuccess returns true when this update benefit date using p u t created response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update benefit date using p u t created response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t created response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update benefit date using p u t created response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit date using p u t created response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update benefit date using p u t created response
func (o *UpdateBenefitDateUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdateBenefitDateUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTCreated", 201)
}

func (o *UpdateBenefitDateUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTCreated", 201)
}

func (o *UpdateBenefitDateUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitDateUsingPUTBadRequest creates a UpdateBenefitDateUsingPUTBadRequest with default headers values
func NewUpdateBenefitDateUsingPUTBadRequest() *UpdateBenefitDateUsingPUTBadRequest {
	return &UpdateBenefitDateUsingPUTBadRequest{}
}

/*
UpdateBenefitDateUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdateBenefitDateUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update benefit date using p u t bad request response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit date using p u t bad request response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t bad request response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit date using p u t bad request response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit date using p u t bad request response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update benefit date using p u t bad request response
func (o *UpdateBenefitDateUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdateBenefitDateUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTBadRequest", 400)
}

func (o *UpdateBenefitDateUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTBadRequest", 400)
}

func (o *UpdateBenefitDateUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitDateUsingPUTUnauthorized creates a UpdateBenefitDateUsingPUTUnauthorized with default headers values
func NewUpdateBenefitDateUsingPUTUnauthorized() *UpdateBenefitDateUsingPUTUnauthorized {
	return &UpdateBenefitDateUsingPUTUnauthorized{}
}

/*
UpdateBenefitDateUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateBenefitDateUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update benefit date using p u t unauthorized response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit date using p u t unauthorized response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t unauthorized response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit date using p u t unauthorized response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit date using p u t unauthorized response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update benefit date using p u t unauthorized response
func (o *UpdateBenefitDateUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdateBenefitDateUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTUnauthorized", 401)
}

func (o *UpdateBenefitDateUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTUnauthorized", 401)
}

func (o *UpdateBenefitDateUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitDateUsingPUTForbidden creates a UpdateBenefitDateUsingPUTForbidden with default headers values
func NewUpdateBenefitDateUsingPUTForbidden() *UpdateBenefitDateUsingPUTForbidden {
	return &UpdateBenefitDateUsingPUTForbidden{}
}

/*
UpdateBenefitDateUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateBenefitDateUsingPUTForbidden struct {
}

// IsSuccess returns true when this update benefit date using p u t forbidden response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit date using p u t forbidden response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t forbidden response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit date using p u t forbidden response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit date using p u t forbidden response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update benefit date using p u t forbidden response
func (o *UpdateBenefitDateUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdateBenefitDateUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTForbidden", 403)
}

func (o *UpdateBenefitDateUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTForbidden", 403)
}

func (o *UpdateBenefitDateUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitDateUsingPUTNotFound creates a UpdateBenefitDateUsingPUTNotFound with default headers values
func NewUpdateBenefitDateUsingPUTNotFound() *UpdateBenefitDateUsingPUTNotFound {
	return &UpdateBenefitDateUsingPUTNotFound{}
}

/*
UpdateBenefitDateUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateBenefitDateUsingPUTNotFound struct {
}

// IsSuccess returns true when this update benefit date using p u t not found response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit date using p u t not found response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t not found response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update benefit date using p u t not found response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update benefit date using p u t not found response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update benefit date using p u t not found response
func (o *UpdateBenefitDateUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdateBenefitDateUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTNotFound", 404)
}

func (o *UpdateBenefitDateUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTNotFound", 404)
}

func (o *UpdateBenefitDateUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateBenefitDateUsingPUTInternalServerError creates a UpdateBenefitDateUsingPUTInternalServerError with default headers values
func NewUpdateBenefitDateUsingPUTInternalServerError() *UpdateBenefitDateUsingPUTInternalServerError {
	return &UpdateBenefitDateUsingPUTInternalServerError{}
}

/*
UpdateBenefitDateUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdateBenefitDateUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update benefit date using p u t internal server error response has a 2xx status code
func (o *UpdateBenefitDateUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update benefit date using p u t internal server error response has a 3xx status code
func (o *UpdateBenefitDateUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update benefit date using p u t internal server error response has a 4xx status code
func (o *UpdateBenefitDateUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update benefit date using p u t internal server error response has a 5xx status code
func (o *UpdateBenefitDateUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update benefit date using p u t internal server error response a status code equal to that given
func (o *UpdateBenefitDateUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update benefit date using p u t internal server error response
func (o *UpdateBenefitDateUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdateBenefitDateUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTInternalServerError", 500)
}

func (o *UpdateBenefitDateUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/benefit/benefitDate][%d] updateBenefitDateUsingPUTInternalServerError", 500)
}

func (o *UpdateBenefitDateUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
