// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// CancelPayrollAliasUsingGETReader is a Reader for the CancelPayrollAliasUsingGET structure.
type CancelPayrollAliasUsingGETReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelPayrollAliasUsingGETReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelPayrollAliasUsingGETOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelPayrollAliasUsingGETBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelPayrollAliasUsingGETUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelPayrollAliasUsingGETForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelPayrollAliasUsingGETNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelPayrollAliasUsingGETInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /compassintegrationapp/policy/cancelPayrollAlias] cancelPayrollAliasUsingGET", response, response.Code())
	}
}

// NewCancelPayrollAliasUsingGETOK creates a CancelPayrollAliasUsingGETOK with default headers values
func NewCancelPayrollAliasUsingGETOK() *CancelPayrollAliasUsingGETOK {
	return &CancelPayrollAliasUsingGETOK{}
}

/*
CancelPayrollAliasUsingGETOK describes a response with status code 200, with default header values.

Success
*/
type CancelPayrollAliasUsingGETOK struct {
	Payload *models.ResponseWrapperVoid
}

// IsSuccess returns true when this cancel payroll alias using g e t o k response has a 2xx status code
func (o *CancelPayrollAliasUsingGETOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel payroll alias using g e t o k response has a 3xx status code
func (o *CancelPayrollAliasUsingGETOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel payroll alias using g e t o k response has a 4xx status code
func (o *CancelPayrollAliasUsingGETOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel payroll alias using g e t o k response has a 5xx status code
func (o *CancelPayrollAliasUsingGETOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel payroll alias using g e t o k response a status code equal to that given
func (o *CancelPayrollAliasUsingGETOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cancel payroll alias using g e t o k response
func (o *CancelPayrollAliasUsingGETOK) Code() int {
	return 200
}

func (o *CancelPayrollAliasUsingGETOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETOK %s", 200, payload)
}

func (o *CancelPayrollAliasUsingGETOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETOK %s", 200, payload)
}

func (o *CancelPayrollAliasUsingGETOK) GetPayload() *models.ResponseWrapperVoid {
	return o.Payload
}

func (o *CancelPayrollAliasUsingGETOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperVoid)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelPayrollAliasUsingGETBadRequest creates a CancelPayrollAliasUsingGETBadRequest with default headers values
func NewCancelPayrollAliasUsingGETBadRequest() *CancelPayrollAliasUsingGETBadRequest {
	return &CancelPayrollAliasUsingGETBadRequest{}
}

/*
CancelPayrollAliasUsingGETBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CancelPayrollAliasUsingGETBadRequest struct {
}

// IsSuccess returns true when this cancel payroll alias using g e t bad request response has a 2xx status code
func (o *CancelPayrollAliasUsingGETBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel payroll alias using g e t bad request response has a 3xx status code
func (o *CancelPayrollAliasUsingGETBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel payroll alias using g e t bad request response has a 4xx status code
func (o *CancelPayrollAliasUsingGETBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel payroll alias using g e t bad request response has a 5xx status code
func (o *CancelPayrollAliasUsingGETBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel payroll alias using g e t bad request response a status code equal to that given
func (o *CancelPayrollAliasUsingGETBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cancel payroll alias using g e t bad request response
func (o *CancelPayrollAliasUsingGETBadRequest) Code() int {
	return 400
}

func (o *CancelPayrollAliasUsingGETBadRequest) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETBadRequest", 400)
}

func (o *CancelPayrollAliasUsingGETBadRequest) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETBadRequest", 400)
}

func (o *CancelPayrollAliasUsingGETBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelPayrollAliasUsingGETUnauthorized creates a CancelPayrollAliasUsingGETUnauthorized with default headers values
func NewCancelPayrollAliasUsingGETUnauthorized() *CancelPayrollAliasUsingGETUnauthorized {
	return &CancelPayrollAliasUsingGETUnauthorized{}
}

/*
CancelPayrollAliasUsingGETUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CancelPayrollAliasUsingGETUnauthorized struct {
}

// IsSuccess returns true when this cancel payroll alias using g e t unauthorized response has a 2xx status code
func (o *CancelPayrollAliasUsingGETUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel payroll alias using g e t unauthorized response has a 3xx status code
func (o *CancelPayrollAliasUsingGETUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel payroll alias using g e t unauthorized response has a 4xx status code
func (o *CancelPayrollAliasUsingGETUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel payroll alias using g e t unauthorized response has a 5xx status code
func (o *CancelPayrollAliasUsingGETUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel payroll alias using g e t unauthorized response a status code equal to that given
func (o *CancelPayrollAliasUsingGETUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cancel payroll alias using g e t unauthorized response
func (o *CancelPayrollAliasUsingGETUnauthorized) Code() int {
	return 401
}

func (o *CancelPayrollAliasUsingGETUnauthorized) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETUnauthorized", 401)
}

func (o *CancelPayrollAliasUsingGETUnauthorized) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETUnauthorized", 401)
}

func (o *CancelPayrollAliasUsingGETUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelPayrollAliasUsingGETForbidden creates a CancelPayrollAliasUsingGETForbidden with default headers values
func NewCancelPayrollAliasUsingGETForbidden() *CancelPayrollAliasUsingGETForbidden {
	return &CancelPayrollAliasUsingGETForbidden{}
}

/*
CancelPayrollAliasUsingGETForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type CancelPayrollAliasUsingGETForbidden struct {
}

// IsSuccess returns true when this cancel payroll alias using g e t forbidden response has a 2xx status code
func (o *CancelPayrollAliasUsingGETForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel payroll alias using g e t forbidden response has a 3xx status code
func (o *CancelPayrollAliasUsingGETForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel payroll alias using g e t forbidden response has a 4xx status code
func (o *CancelPayrollAliasUsingGETForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel payroll alias using g e t forbidden response has a 5xx status code
func (o *CancelPayrollAliasUsingGETForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel payroll alias using g e t forbidden response a status code equal to that given
func (o *CancelPayrollAliasUsingGETForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cancel payroll alias using g e t forbidden response
func (o *CancelPayrollAliasUsingGETForbidden) Code() int {
	return 403
}

func (o *CancelPayrollAliasUsingGETForbidden) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETForbidden", 403)
}

func (o *CancelPayrollAliasUsingGETForbidden) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETForbidden", 403)
}

func (o *CancelPayrollAliasUsingGETForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelPayrollAliasUsingGETNotFound creates a CancelPayrollAliasUsingGETNotFound with default headers values
func NewCancelPayrollAliasUsingGETNotFound() *CancelPayrollAliasUsingGETNotFound {
	return &CancelPayrollAliasUsingGETNotFound{}
}

/*
CancelPayrollAliasUsingGETNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CancelPayrollAliasUsingGETNotFound struct {
}

// IsSuccess returns true when this cancel payroll alias using g e t not found response has a 2xx status code
func (o *CancelPayrollAliasUsingGETNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel payroll alias using g e t not found response has a 3xx status code
func (o *CancelPayrollAliasUsingGETNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel payroll alias using g e t not found response has a 4xx status code
func (o *CancelPayrollAliasUsingGETNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel payroll alias using g e t not found response has a 5xx status code
func (o *CancelPayrollAliasUsingGETNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel payroll alias using g e t not found response a status code equal to that given
func (o *CancelPayrollAliasUsingGETNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cancel payroll alias using g e t not found response
func (o *CancelPayrollAliasUsingGETNotFound) Code() int {
	return 404
}

func (o *CancelPayrollAliasUsingGETNotFound) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETNotFound", 404)
}

func (o *CancelPayrollAliasUsingGETNotFound) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETNotFound", 404)
}

func (o *CancelPayrollAliasUsingGETNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCancelPayrollAliasUsingGETInternalServerError creates a CancelPayrollAliasUsingGETInternalServerError with default headers values
func NewCancelPayrollAliasUsingGETInternalServerError() *CancelPayrollAliasUsingGETInternalServerError {
	return &CancelPayrollAliasUsingGETInternalServerError{}
}

/*
CancelPayrollAliasUsingGETInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type CancelPayrollAliasUsingGETInternalServerError struct {
}

// IsSuccess returns true when this cancel payroll alias using g e t internal server error response has a 2xx status code
func (o *CancelPayrollAliasUsingGETInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel payroll alias using g e t internal server error response has a 3xx status code
func (o *CancelPayrollAliasUsingGETInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel payroll alias using g e t internal server error response has a 4xx status code
func (o *CancelPayrollAliasUsingGETInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel payroll alias using g e t internal server error response has a 5xx status code
func (o *CancelPayrollAliasUsingGETInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel payroll alias using g e t internal server error response a status code equal to that given
func (o *CancelPayrollAliasUsingGETInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cancel payroll alias using g e t internal server error response
func (o *CancelPayrollAliasUsingGETInternalServerError) Code() int {
	return 500
}

func (o *CancelPayrollAliasUsingGETInternalServerError) Error() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETInternalServerError", 500)
}

func (o *CancelPayrollAliasUsingGETInternalServerError) String() string {
	return fmt.Sprintf("[GET /compassintegrationapp/policy/cancelPayrollAlias][%d] cancelPayrollAliasUsingGETInternalServerError", 500)
}

func (o *CancelPayrollAliasUsingGETInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
