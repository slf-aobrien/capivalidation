// Code generated by go-swagger; DO NOT EDIT.

package member

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new member API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new member API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new member API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for member API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationAebCasMemberAddBenefitV1XML sets the Content-Type header to "application/aeb.cas.member.add.benefit.v1+xml".
func WithContentTypeApplicationAebCasMemberAddBenefitV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.add.benefit.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberEnrollCobraV1XML sets the Content-Type header to "application/aeb.cas.member.enroll.cobra.v1+xml".
func WithContentTypeApplicationAebCasMemberEnrollCobraV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.enroll.cobra.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberEnrollV1XML sets the Content-Type header to "application/aeb.cas.member.enroll.v1+xml".
func WithContentTypeApplicationAebCasMemberEnrollV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.enroll.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberMemberbenefitoptionswithpolmaintPutV1XML sets the Content-Type header to "application/aeb.cas.member.memberbenefitoptionswithpolmaint.put.v1+xml".
func WithContentTypeApplicationAebCasMemberMemberbenefitoptionswithpolmaintPutV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.memberbenefitoptionswithpolmaint.put.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateAddressV1XML sets the Content-Type header to "application/aeb.cas.member.update.address.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateAddressV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.address.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateBenefitTermianteV1XML sets the Content-Type header to "application/aeb.cas.member.update.benefit.termiante.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateBenefitTermianteV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.benefit.termiante.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateBenefitTerminateV1XML sets the Content-Type header to "application/aeb.cas.member.update.benefit.terminate.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateBenefitTerminateV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.benefit.terminate.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateBenefitV1XML sets the Content-Type header to "application/aeb.cas.member.update.benefit.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateBenefitV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.benefit.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateFirstnameV1XML sets the Content-Type header to "application/aeb.cas.member.update.firstname.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateFirstnameV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.firstname.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateInsertorreinstatebenefitV1XML sets the Content-Type header to "application/aeb.cas.member.update.insertorreinstatebenefit.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateInsertorreinstatebenefitV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.insertorreinstatebenefit.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateLastnameV1XML sets the Content-Type header to "application/aeb.cas.member.update.lastname.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateLastnameV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.lastname.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateMembergroupV1XML sets the Content-Type header to "application/aeb.cas.member.update.membergroup.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateMembergroupV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.membergroup.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateMidnameV1XML sets the Content-Type header to "application/aeb.cas.member.update.midname.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateMidnameV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.midname.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateSalaryV1XML sets the Content-Type header to "application/aeb.cas.member.update.salary.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateSalaryV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.salary.v1+xml"}
}

// WithContentTypeApplicationAebCasMemberUpdateV1XML sets the Content-Type header to "application/aeb.cas.member.update.v1+xml".
func WithContentTypeApplicationAebCasMemberUpdateV1XML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.member.update.v1+xml"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithContentTypeTextPlain sets the Content-Type header to "text/plain".
func WithContentTypeTextPlain(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"text/plain"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationAebCasMemberAddBenefitV1XML sets the Accept header to "application/aeb.cas.member.add.benefit.v1+xml".
func WithAcceptApplicationAebCasMemberAddBenefitV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.add.benefit.v1+xml"}
}

// WithAcceptApplicationAebCasMemberDoreallocationV1XML sets the Accept header to "application/aeb.cas.member.doreallocation.v1+xml".
func WithAcceptApplicationAebCasMemberDoreallocationV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.doreallocation.v1+xml"}
}

// WithAcceptApplicationAebCasMemberEnrollCobraV1XML sets the Accept header to "application/aeb.cas.member.enroll.cobra.v1+xml".
func WithAcceptApplicationAebCasMemberEnrollCobraV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.enroll.cobra.v1+xml"}
}

// WithAcceptApplicationAebCasMemberEnrollV1XML sets the Accept header to "application/aeb.cas.member.enroll.v1+xml".
func WithAcceptApplicationAebCasMemberEnrollV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.enroll.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindBenefithistoryV1XML sets the Accept header to "application/aeb.cas.member.find.benefithistory.v1+xml".
func WithAcceptApplicationAebCasMemberFindBenefithistoryV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.benefithistory.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindCasememberkeyV1XML sets the Accept header to "application/aeb.cas.member.find.casememberkey.v1+xml".
func WithAcceptApplicationAebCasMemberFindCasememberkeyV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.casememberkey.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindEdxdependentinfoV1XML sets the Accept header to "application/aeb.cas.member.find.edxdependentinfo.v1+xml".
func WithAcceptApplicationAebCasMemberFindEdxdependentinfoV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.edxdependentinfo.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindEdxmemberinfoV1XML sets the Accept header to "application/aeb.cas.member.find.edxmemberinfo.v1+xml".
func WithAcceptApplicationAebCasMemberFindEdxmemberinfoV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.edxmemberinfo.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindEdxmembermatchlistV1XML sets the Accept header to "application/aeb.cas.member.find.edxmembermatchlist.v1+xml".
func WithAcceptApplicationAebCasMemberFindEdxmembermatchlistV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.edxmembermatchlist.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindEdxpersoninfoV1XML sets the Accept header to "application/aeb.cas.member.find.edxpersoninfo.v1+xml".
func WithAcceptApplicationAebCasMemberFindEdxpersoninfoV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.edxpersoninfo.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindIssueStateV1XML sets the Accept header to "application/aeb.cas.member.find.issue.state.v1+xml".
func WithAcceptApplicationAebCasMemberFindIssueStateV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.issue.state.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberCoveragestatementV1XML sets the Accept header to "application/aeb.cas.member.find.member.coveragestatement.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberCoveragestatementV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.member.coveragestatement.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberCoveragestatementmbrnoV1XML sets the Accept header to "application/aeb.cas.member.find.member.coveragestatementmbrno.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberCoveragestatementmbrnoV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.member.coveragestatementmbrno.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistBasicV1XML sets the Accept header to "application/aeb.cas.member.find.memberlist.basic.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistBasicV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.basic.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistCensusV2XML sets the Accept header to "application/aeb.cas.member.find.memberlist.census.v2+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistCensusV2XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.census.v2+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistDetailV1XML sets the Accept header to "application/aeb.cas.member.find.memberlist.detail.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistDetailV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.detail.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistFastV1XML sets the Accept header to "application/aeb.cas.member.find.memberlist.fast.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistFastV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.fast.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistPremiumEffectiveV1XML sets the Accept header to "application/aeb.cas.member.find.memberlist.premium.effective.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistPremiumEffectiveV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.premium.effective.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistPremiumTransactionV1XML sets the Accept header to "application/aeb.cas.member.find.memberlist.premium.transaction.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistPremiumTransactionV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.premium.transaction.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindMemberlistPremiumV1XML sets the Accept header to "application/aeb.cas.member.find.memberlist.premium.v1+xml".
func WithAcceptApplicationAebCasMemberFindMemberlistPremiumV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.memberlist.premium.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindPersonV1XML sets the Accept header to "application/aeb.cas.member.find.person.v1+xml".
func WithAcceptApplicationAebCasMemberFindPersonV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.person.v1+xml"}
}

// WithAcceptApplicationAebCasMemberFindV1XML sets the Accept header to "application/aeb.cas.member.find.v1+xml".
func WithAcceptApplicationAebCasMemberFindV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.find.v1+xml"}
}

// WithAcceptApplicationAebCasMemberListV1JSON sets the Accept header to "application/aeb.cas.member.list.v1+json".
func WithAcceptApplicationAebCasMemberListV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.list.v1+json"}
}

// WithAcceptApplicationAebCasMemberMemberbenefitoptionsGetV1XML sets the Accept header to "application/aeb.cas.member.memberbenefitoptions.get.v1+xml".
func WithAcceptApplicationAebCasMemberMemberbenefitoptionsGetV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.memberbenefitoptions.get.v1+xml"}
}

// WithAcceptApplicationAebCasMemberMemberbenefitoptionsPostV1XML sets the Accept header to "application/aeb.cas.member.memberbenefitoptions.post.v1+xml".
func WithAcceptApplicationAebCasMemberMemberbenefitoptionsPostV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.memberbenefitoptions.post.v1+xml"}
}

// WithAcceptApplicationAebCasMemberMemberbenefitoptionswithpolmaintPutV1XML sets the Accept header to "application/aeb.cas.member.memberbenefitoptionswithpolmaint.put.v1+xml".
func WithAcceptApplicationAebCasMemberMemberbenefitoptionswithpolmaintPutV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.memberbenefitoptionswithpolmaint.put.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateAddressV1XML sets the Accept header to "application/aeb.cas.member.update.address.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateAddressV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.address.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateBenefitTerminateV1XML sets the Accept header to "application/aeb.cas.member.update.benefit.terminate.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateBenefitTerminateV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.benefit.terminate.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateBenefitV1XML sets the Accept header to "application/aeb.cas.member.update.benefit.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateBenefitV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.benefit.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateBillgroupV1XML sets the Accept header to "application/aeb.cas.member.update.billgroup.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateBillgroupV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.billgroup.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateBillgroupV2XML sets the Accept header to "application/aeb.cas.member.update.billgroup.v2+xml".
func WithAcceptApplicationAebCasMemberUpdateBillgroupV2XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.billgroup.v2+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateDateofbirthV1XML sets the Accept header to "application/aeb.cas.member.update.dateofbirth.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateDateofbirthV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.dateofbirth.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateDepartmentV1XML sets the Accept header to "application/aeb.cas.member.update.department.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateDepartmentV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.department.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateEmplstatusV1XML sets the Accept header to "application/aeb.cas.member.update.emplstatus.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateEmplstatusV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.emplstatus.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateFacilityV1XML sets the Accept header to "application/aeb.cas.member.update.facility.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateFacilityV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.facility.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateFirstnameV1XML sets the Accept header to "application/aeb.cas.member.update.firstname.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateFirstnameV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.firstname.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateGenderV1XML sets the Accept header to "application/aeb.cas.member.update.gender.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateGenderV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.gender.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateInsertorreinstatebenefitV1XML sets the Accept header to "application/aeb.cas.member.update.insertorreinstatebenefit.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateInsertorreinstatebenefitV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.insertorreinstatebenefit.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateLanguageV1XML sets the Accept header to "application/aeb.cas.member.update.language.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateLanguageV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.language.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateLastnameV1XML sets the Accept header to "application/aeb.cas.member.update.lastname.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateLastnameV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.lastname.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateMembergroupV1XML sets the Accept header to "application/aeb.cas.member.update.membergroup.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateMembergroupV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.membergroup.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateMidnameV1XML sets the Accept header to "application/aeb.cas.member.update.midname.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateMidnameV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.midname.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateNamesuffixV1XML sets the Accept header to "application/aeb.cas.member.update.namesuffix.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateNamesuffixV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.namesuffix.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdatePayrollnumberV1XML sets the Accept header to "application/aeb.cas.member.update.payrollnumber.v1+xml".
func WithAcceptApplicationAebCasMemberUpdatePayrollnumberV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.payrollnumber.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdatePhoneV1XML sets the Accept header to "application/aeb.cas.member.update.phone.v1+xml".
func WithAcceptApplicationAebCasMemberUpdatePhoneV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.phone.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateReinstateV1XML sets the Accept header to "application/aeb.cas.member.update.reinstate.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateReinstateV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.reinstate.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateSalaryV1XML sets the Accept header to "application/aeb.cas.member.update.salary.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateSalaryV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.salary.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateSmokerflagV1XML sets the Accept header to "application/aeb.cas.member.update.smokerflag.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateSmokerflagV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.smokerflag.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateSocialsecuritynumberV1XML sets the Accept header to "application/aeb.cas.member.update.socialsecuritynumber.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateSocialsecuritynumberV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.socialsecuritynumber.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateTerminateV1XML sets the Accept header to "application/aeb.cas.member.update.terminate.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateTerminateV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.terminate.v1+xml"}
}

// WithAcceptApplicationAebCasMemberUpdateV1XML sets the Accept header to "application/aeb.cas.member.update.v1+xml".
func WithAcceptApplicationAebCasMemberUpdateV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.member.update.v1+xml"}
}

// WithAcceptApplicationAebCiaJsn sets the Accept header to "application/aeb.cia.jsn".
func WithAcceptApplicationAebCiaJsn(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cia.jsn"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddBenefitUsingPOST(params *AddBenefitUsingPOSTParams, opts ...ClientOption) (*AddBenefitUsingPOSTOK, *AddBenefitUsingPOSTCreated, error)

	EnrollCobraUsingPOST(params *EnrollCobraUsingPOSTParams, opts ...ClientOption) (*EnrollCobraUsingPOSTOK, *EnrollCobraUsingPOSTCreated, error)

	EnrollMemberUsingPOST(params *EnrollMemberUsingPOSTParams, opts ...ClientOption) (*EnrollMemberUsingPOSTOK, *EnrollMemberUsingPOSTCreated, error)

	FindPersonUsingGET(params *FindPersonUsingGETParams, opts ...ClientOption) (*FindPersonUsingGETOK, error)

	GetAllDependentsUsingGET(params *GetAllDependentsUsingGETParams, opts ...ClientOption) (*GetAllDependentsUsingGETOK, error)

	GetCaseMemberKeyUsingGET(params *GetCaseMemberKeyUsingGETParams, opts ...ClientOption) (*GetCaseMemberKeyUsingGETOK, error)

	GetEDXDependentInfoUsingGET(params *GetEDXDependentInfoUsingGETParams, opts ...ClientOption) (*GetEDXDependentInfoUsingGETOK, error)

	GetEDXMemberInfoUsingGET(params *GetEDXMemberInfoUsingGETParams, opts ...ClientOption) (*GetEDXMemberInfoUsingGETOK, error)

	GetEDXMembersUsingGET(params *GetEDXMembersUsingGETParams, opts ...ClientOption) (*GetEDXMembersUsingGETOK, error)

	GetEDXMembersWithPagingUsingGET(params *GetEDXMembersWithPagingUsingGETParams, opts ...ClientOption) (*GetEDXMembersWithPagingUsingGETOK, error)

	GetEDXPersonInfoUsingGET1(params *GetEDXPersonInfoUsingGET1Params, opts ...ClientOption) (*GetEDXPersonInfoUsingGET1OK, error)

	GetMemberBenefitHistoryUsingGET(params *GetMemberBenefitHistoryUsingGETParams, opts ...ClientOption) (*GetMemberBenefitHistoryUsingGETOK, error)

	GetMemberBenefitOptionUsingGET(params *GetMemberBenefitOptionUsingGETParams, opts ...ClientOption) (*GetMemberBenefitOptionUsingGETOK, error)

	GetMemberCoverageStatementMbrNoUsingGET(params *GetMemberCoverageStatementMbrNoUsingGETParams, opts ...ClientOption) (*GetMemberCoverageStatementMbrNoUsingGETOK, error)

	GetMemberCoverageStatementUsingGET(params *GetMemberCoverageStatementUsingGETParams, opts ...ClientOption) (*GetMemberCoverageStatementUsingGETOK, error)

	GetMemberIssueStateUsingGET(params *GetMemberIssueStateUsingGETParams, opts ...ClientOption) (*GetMemberIssueStateUsingGETOK, error)

	GetMemberListBasicUsingGET(params *GetMemberListBasicUsingGETParams, opts ...ClientOption) (*GetMemberListBasicUsingGETOK, error)

	GetMemberListCensusV2UsingGET(params *GetMemberListCensusV2UsingGETParams, opts ...ClientOption) (*GetMemberListCensusV2UsingGETOK, error)

	GetMemberListDetailUsingGET(params *GetMemberListDetailUsingGETParams, opts ...ClientOption) (*GetMemberListDetailUsingGETOK, error)

	GetMemberListFastUsingGET(params *GetMemberListFastUsingGETParams, opts ...ClientOption) (*GetMemberListFastUsingGETOK, error)

	GetMemberListPremiumEffectiveUsingGET(params *GetMemberListPremiumEffectiveUsingGETParams, opts ...ClientOption) (*GetMemberListPremiumEffectiveUsingGETOK, error)

	GetMemberListPremiumTransactionUsingGET(params *GetMemberListPremiumTransactionUsingGETParams, opts ...ClientOption) (*GetMemberListPremiumTransactionUsingGETOK, error)

	GetMemberListPremiumUsingGET(params *GetMemberListPremiumUsingGETParams, opts ...ClientOption) (*GetMemberListPremiumUsingGETOK, error)

	GetMemberListUsingGET(params *GetMemberListUsingGETParams, opts ...ClientOption) (*GetMemberListUsingGETOK, error)

	GetMemberUsingGET(params *GetMemberUsingGETParams, opts ...ClientOption) (*GetMemberUsingGETOK, error)

	GetMemberUsingGET1(params *GetMemberUsingGET1Params, opts ...ClientOption) (*GetMemberUsingGET1OK, error)

	MemberReallocationUsingGET(params *MemberReallocationUsingGETParams, opts ...ClientOption) (*MemberReallocationUsingGETOK, error)

	UpdateBenefitTerminateUsingPUT(params *UpdateBenefitTerminateUsingPUTParams, opts ...ClientOption) (*UpdateBenefitTerminateUsingPUTOK, *UpdateBenefitTerminateUsingPUTCreated, error)

	UpdateBenefitUsingPUT(params *UpdateBenefitUsingPUTParams, opts ...ClientOption) (*UpdateBenefitUsingPUTOK, *UpdateBenefitUsingPUTCreated, error)

	UpdateEmploymentStatusUsingPUT(params *UpdateEmploymentStatusUsingPUTParams, opts ...ClientOption) (*UpdateEmploymentStatusUsingPUTOK, *UpdateEmploymentStatusUsingPUTCreated, error)

	UpdateMemberAddressUsingPUT(params *UpdateMemberAddressUsingPUTParams, opts ...ClientOption) (*UpdateMemberAddressUsingPUTOK, *UpdateMemberAddressUsingPUTCreated, error)

	UpdateMemberBenefitOptionUsingPOST(params *UpdateMemberBenefitOptionUsingPOSTParams, opts ...ClientOption) (*UpdateMemberBenefitOptionUsingPOSTOK, *UpdateMemberBenefitOptionUsingPOSTCreated, error)

	UpdateMemberBenefitOptionWithPolMaintUsingPUT(params *UpdateMemberBenefitOptionWithPolMaintUsingPUTParams, opts ...ClientOption) (*UpdateMemberBenefitOptionWithPolMaintUsingPUTOK, *UpdateMemberBenefitOptionWithPolMaintUsingPUTCreated, error)

	UpdateMemberBillGroupUsingPUT(params *UpdateMemberBillGroupUsingPUTParams, opts ...ClientOption) (*UpdateMemberBillGroupUsingPUTOK, *UpdateMemberBillGroupUsingPUTCreated, error)

	UpdateMemberBillGroupWithPolMaintUsingPUT(params *UpdateMemberBillGroupWithPolMaintUsingPUTParams, opts ...ClientOption) (*UpdateMemberBillGroupWithPolMaintUsingPUTOK, *UpdateMemberBillGroupWithPolMaintUsingPUTCreated, error)

	UpdateMemberDateOfBirthUsingPUT(params *UpdateMemberDateOfBirthUsingPUTParams, opts ...ClientOption) (*UpdateMemberDateOfBirthUsingPUTOK, *UpdateMemberDateOfBirthUsingPUTCreated, error)

	UpdateMemberDepartmentUsingPUT(params *UpdateMemberDepartmentUsingPUTParams, opts ...ClientOption) (*UpdateMemberDepartmentUsingPUTOK, *UpdateMemberDepartmentUsingPUTCreated, error)

	UpdateMemberFacilityUsingPUT(params *UpdateMemberFacilityUsingPUTParams, opts ...ClientOption) (*UpdateMemberFacilityUsingPUTOK, *UpdateMemberFacilityUsingPUTCreated, error)

	UpdateMemberFirstNameUsingPUT(params *UpdateMemberFirstNameUsingPUTParams, opts ...ClientOption) (*UpdateMemberFirstNameUsingPUTOK, *UpdateMemberFirstNameUsingPUTCreated, error)

	UpdateMemberGenderUsingPUT(params *UpdateMemberGenderUsingPUTParams, opts ...ClientOption) (*UpdateMemberGenderUsingPUTOK, *UpdateMemberGenderUsingPUTCreated, error)

	UpdateMemberGroupUsingPUT(params *UpdateMemberGroupUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupUsingPUTOK, *UpdateMemberGroupUsingPUTCreated, error)

	UpdateMemberInsertOrReinstateBenefitUsingPUT(params *UpdateMemberInsertOrReinstateBenefitUsingPUTParams, opts ...ClientOption) (*UpdateMemberInsertOrReinstateBenefitUsingPUTOK, *UpdateMemberInsertOrReinstateBenefitUsingPUTCreated, error)

	UpdateMemberLanguageUsingPUT(params *UpdateMemberLanguageUsingPUTParams, opts ...ClientOption) (*UpdateMemberLanguageUsingPUTOK, *UpdateMemberLanguageUsingPUTCreated, error)

	UpdateMemberLastNameUsingPUT(params *UpdateMemberLastNameUsingPUTParams, opts ...ClientOption) (*UpdateMemberLastNameUsingPUTOK, *UpdateMemberLastNameUsingPUTCreated, error)

	UpdateMemberMiddleNameUsingPUT(params *UpdateMemberMiddleNameUsingPUTParams, opts ...ClientOption) (*UpdateMemberMiddleNameUsingPUTOK, *UpdateMemberMiddleNameUsingPUTCreated, error)

	UpdateMemberNameSuffixUsingPUT(params *UpdateMemberNameSuffixUsingPUTParams, opts ...ClientOption) (*UpdateMemberNameSuffixUsingPUTOK, *UpdateMemberNameSuffixUsingPUTCreated, error)

	UpdateMemberPayrollNumberUsingPUT(params *UpdateMemberPayrollNumberUsingPUTParams, opts ...ClientOption) (*UpdateMemberPayrollNumberUsingPUTOK, *UpdateMemberPayrollNumberUsingPUTCreated, error)

	UpdateMemberPhoneUsingPUT(params *UpdateMemberPhoneUsingPUTParams, opts ...ClientOption) (*UpdateMemberPhoneUsingPUTOK, *UpdateMemberPhoneUsingPUTCreated, error)

	UpdateMemberReinstateUsingPUT(params *UpdateMemberReinstateUsingPUTParams, opts ...ClientOption) (*UpdateMemberReinstateUsingPUTOK, *UpdateMemberReinstateUsingPUTCreated, error)

	UpdateMemberSalaryUsingPUT(params *UpdateMemberSalaryUsingPUTParams, opts ...ClientOption) (*UpdateMemberSalaryUsingPUTOK, *UpdateMemberSalaryUsingPUTCreated, error)

	UpdateMemberSmokerFlagUsingPUT(params *UpdateMemberSmokerFlagUsingPUTParams, opts ...ClientOption) (*UpdateMemberSmokerFlagUsingPUTOK, *UpdateMemberSmokerFlagUsingPUTCreated, error)

	UpdateMemberTerminateUsingPUT(params *UpdateMemberTerminateUsingPUTParams, opts ...ClientOption) (*UpdateMemberTerminateUsingPUTOK, *UpdateMemberTerminateUsingPUTCreated, error)

	UpdateMemberUsingPUT(params *UpdateMemberUsingPUTParams, opts ...ClientOption) (*UpdateMemberUsingPUTOK, *UpdateMemberUsingPUTCreated, error)

	UpdateSocialSecurityNumberUsingPUT(params *UpdateSocialSecurityNumberUsingPUTParams, opts ...ClientOption) (*UpdateSocialSecurityNumberUsingPUTOK, *UpdateSocialSecurityNumberUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddBenefitUsingPOST sunlives us dc compassintegrationapplication service member add sunlife us dc compassintegrationapplication service benefit method

None
*/
func (a *Client) AddBenefitUsingPOST(params *AddBenefitUsingPOSTParams, opts ...ClientOption) (*AddBenefitUsingPOSTOK, *AddBenefitUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddBenefitUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addBenefitUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/member/add/benefit",
		ProducesMediaTypes: []string{"application/aeb.cas.member.add.benefit.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/aeb.cas.member.add.benefit.v1+xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddBenefitUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddBenefitUsingPOSTOK:
		return value, nil, nil
	case *AddBenefitUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EnrollCobraUsingPOST members enroll cobra

	All date fields should be in MM/DD/YYYY format. Enum restricted data should sent as decode.

**Mandatory fields in EnrollCobraDTO:**
- `portabilityDescription`
- `reasonCode` Enum MBSTREASCD COMPASS domain 'MBST REAS CD'
- Either cobraMemberGroupKey or cobraMemberGroupInterfaceId is required. Preferred is cobraMemberGroupInterfaceId
- `cobraMemberGroupKey `
- `cobraMemberGroupInterfaceId`

----------------------------------------------------------------------------------------
**Optional fields used in EnrollCobraDTO:**
- `departmentName` the department for  cobra member group, required if we need to change the department name

- **benefitsToAdd can have none or multiple mandatory fields from below**
- `benefitsToAdd[].memberBenefitOptionList[]`   Benefit Option List. Only first one is used if needed for benefit, Optional
- `benefitsToAdd[].memberBenefitOptionList[0].labelAliasName`  Optional, if not provided then defaulted to CMPS_CHOICE_COV_LEVEL
- `benefitsToAdd[].memberBenefitOptionList[0].code`  If benefit option required then code must be set Optional
- `benefitsToAdd[].key`  ( Either key or shortName should be Required )
- `benefitsToAdd[].shortName`  if shortName is not provided then it will fetch short name using benefit key
- `benefitsToAdd[].effectiveDate` Optional, if not provided then it will take the effective date from query parameter
- `benefitsToAdd[].signatureDate` Signature Date Optional
- `benefitsToAdd[].eventDate` Event Date Optional
- `benefitsToAdd[].transferDate` Transfer Date Optional
- `benefitsToAdd[]..eventReasonsCode` Enum CUSTOMEVENTREASONS. Compass Domain 'CUSTOM EVENT REASONS' Optional

- **benefitsToRemove can have none or multiple mandatory fields from below**
- `benefitsToRemove[].key`  ( Either key or shortName should be required )
- `benefitsToRemove[].shortName`  if shortName is not provided then it will fetch short name using benefit key  ( if overridden then uses parent key )
- `benefitsToRemove[].effectiveDate` Optional, if not provided then it will take the effective date from query parameter

- **if dependentsToAdd is present then the following fields are mandatory:**
  - `dependentsToAdd[].person.firstName` Required
  - `dependentsToAdd[].person.clientId`  Required
  - `dependentsToAdd[].person.middleName` Optional
  - `dependentsToAdd[].person.lastName` Required
  - `dependentsToAdd[].person.gender` Enum PERNSEXCD COMPASS domain 'PERNSEXCD' Required
  - `dependentsToAdd[].person.birthDate` Required
  - `dependentsToAdd[].person.socialSecurityNumber` Optional
  - `dependentsToAdd[].person.nameSuffix`  Optional
  - `dependentsToAdd[].person.namePrefix`  Enum PERSNAMEPREFIX Compass Domain 'PERS NAMEPREFIX' Optional
  - `dependentsToAdd[].effectiveDate` Optional
  - `dependentsToAdd[].relationship` Enum NMRSRELTYPCD. COMPASS 'NMRS REL TYP CD' domain. Required
  - `dependentsToAdd[].smokerStatus` Enum RTSTSMOKERCD. COMPASS 'RTST SMOKER CD' domain. Optional

- **if dependentsToUpdate is present then the following fields are mandatory:**
- facilityId, relationship, smokerStatus, expireDate cannot be null at the same time
  - `dependentsToUpdate[].person` Required
  - `dependentsToAdd[].expireDate` Optional
  - `dependentsToUpdate[].person.facilityId` Optional - if we need to change the facility for the dependent then only we require it
  - `dependentsToUpdate[].relationship` Enum NMRSRELTYPCD. COMPASS 'NMRS REL TYP CD' domain. Optional
  - `dependentsToUpdate[].person.clientId`  Required
  - `dependentsToAdd[].smokerStatus` Enum RTSTSMOKERCD. COMPASS 'RTST SMOKER CD' domain. Optional
*/
func (a *Client) EnrollCobraUsingPOST(params *EnrollCobraUsingPOSTParams, opts ...ClientOption) (*EnrollCobraUsingPOSTOK, *EnrollCobraUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnrollCobraUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enrollCobraUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/member/enroll/cobra",
		ProducesMediaTypes: []string{"application/aeb.cas.member.enroll.cobra.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.enroll.cobra.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnrollCobraUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EnrollCobraUsingPOSTOK:
		return value, nil, nil
	case *EnrollCobraUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EnrollMemberUsingPOST members enroll

	All date fields should be in MM/DD/YYYY format. Enum restricted data should sent as decode.

**Mandatory fields in MemberDTO:**
- `person.firstName`
- `person.lastName`
- `person.birthDate`
- `person.gender` Enum PERNSEXCD. Compass Domain PERNSEXCD.
- `person.socialSecurityNumber` (if provided)
- `memberPolicyList` (must not be null or empty, only 1st one is used)

  - `memberPolicyList[0].employmentStatus` Enum MBREMPLSTATCD

  - `memberPolicyList[0].joinPolicyDate`

  - `memberPolicyList[0].hireDate`

  - `memberPolicyList[0].policy.policyNumber`

  - `memberPolicyList[0].memberGroup.key`

  - `memberPolicyList[0].billGroup.key`

  - `memberPolicyList[0].benefitList[]` (must not be null or empty)

  - `memberPolicyList[0].benefitList[].key` or `memberPolicyList[0].benefitList[].shortName` Either one to identify benefit. Benefit shortname is recommended.

  - **Benefit can have none or multiple mandatory fields from below, it depends upon policy-memberGroup-benefit setup in Compass**

  - `memberPolicyList[0].benefitList[].signatureDate` Signature Date

  - `memberPolicyList[0].benefitList[].electedAmount` Elected Amount

  - `memberPolicyList[0].benefitList[].eventReasonsCode` Enum CUSTOMEVENTREASONS. Compass Domain 'CUSTOM EVENT REASONS'

  - `memberPolicyList[0].benefitList[].eventDate` Event Date'

  - `memberPolicyList[0].benefitList[].memberBenefitOptionList[]` Benefit Option List. Only first one is used if needed for benefit

  - `memberPolicyList[0].benefitList[].memberBenefitOptionList[0].labelAliasName` Optional, if not provided then defaulted to CMPS_CHOICE_COV_LEVEL

  - `memberPolicyList[0].benefitList[].memberBenefitOptionList[0].code` If benefit option required then code must be set

----------------------------------------------------------------------------------------
**Optional fields used in MemberDTO:**
- Optional fields in Person
  - `person.nameSuffix` Name Suffix
  - `person.namePrefix` Name Prefix. Enum PERSNAMEPREFIX. Compass 'PERS NAMEPREFIX' domain.
  - `person.middleName` Middle Name
  - `person.preferredLanguage` Preferred Language. Enum ZZLANGPREFCD. COMPASS 'ZZLANG PREF CD' domain.
  - `person.height` Height of person.
  - `person.weight` Weight of person.
  - `person.maritalStatus` Enum PERCMARSTATCD. COMPASS 'PERC MAR STAT CD' domain.
  - `person.clientId` Presence of this clientId will ignores
  - all person data sent in request
  - address of person
  - email of person
  - phone of person.

- `memberNumber` Prior Member Number
- `memberPolicyList[0].smokerStatus` Smoker status. Enum RTSTSMOKERCD. COMPASS 'RTST SMOKER CD' domain.
- `memberPolicyList[0].payrollNumber` Payroll Number.
- `memberPolicyList[0].department` or `memberPolicyList[0].billSortKey` To setup Department
- `memberPolicyList[0].salary` To setup Salary.
  - `memberPolicyList[0].salary.payPeriod` To setup Salary Pay Period. Enum SALDFREQCD. COMPASS 'SALD FREQ CD' domain.
  - `memberPolicyList[0].salary.amount` To setup Salary Amount.
  - `memberPolicyList[0].salary.hours` To setup Salary Hours.

- `addressList[]` To setup Address, one or multiple. Multiple must have different type.
  - `addressList[].type` Enum ADDRADDRTYPE. COMPASS 'ADDR ADDRTYPE' domain.
  - `addressList[].country` This should be passed as code (not decode) from Domain ZZCOUNTRY.
  - `addressList[].line1`
  - `addressList[].line2`
  - `addressList[].line3`
  - `addressList[].city`
  - `addressList[].zip`
  - `addressList[].state` This should be passed as code (not decode) from Domain ZZSTCD. COMPASS 'ZZSTCD' domain.

- `phoneList[]` To setup Phone, one or multiple. Multiple must have different type.
  - `phoneList[].type` Enum ADRPPHONETYPE. COMPASS 'ADRP PHONETYPE' domain.
  - `phoneList[].phoneNumber`

- `emailList[]` To setup Email, one or multiple. Multiple must have different type.
  - `emailList[].type` Enum ADROEMAILTYPE. COMPASS 'ADRO EMAILTYPE' domain.
  - `emailList[].emailAddress`

- `memberPolicyList[0].facilityId` To setup facility
- `memberPolicyList[0].dependentList[]` To setup Dependents
  - `memberPolicyList[0].dependentList[].person.firstName` Required
  - `memberPolicyList[0].dependentList[].person.lastName` Required
  - `memberPolicyList[0].dependentList[].person.gender` Required
  - `memberPolicyList[0].dependentList[].person.birthDate`
  - `memberPolicyList[0].dependentList[].person.socialSecurityNumber`
  - `memberPolicyList[0].dependentList[].person.nameSuffix`
  - `memberPolicyList[0].dependentList[].relationship` Enum NMRSRELTYPCD. COMPASS 'NMRS REL TYP CD' domain.
  - `memberPolicyList[0].dependentList[].smokerStatus` Enum RTSTSMOKERCD. COMPASS 'RTST SMOKER CD' domain.
  - `memberPolicyList[0].dependentList[].facilityId` To setup dependent facility
  - `memberPolicyList[0].dependentList[].benefitExclusionList[]` To setup benefit exclusion list for a dependent
  - `memberPolicyList[0].dependentList[].benefitExclusionList[].shortName` benefit short name.
*/
func (a *Client) EnrollMemberUsingPOST(params *EnrollMemberUsingPOSTParams, opts ...ClientOption) (*EnrollMemberUsingPOSTOK, *EnrollMemberUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnrollMemberUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "enrollMemberUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/member/enrollMember",
		ProducesMediaTypes: []string{"application/aeb.cas.member.enroll.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/aeb.cas.member.enroll.v1+xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnrollMemberUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *EnrollMemberUsingPOSTOK:
		return value, nil, nil
	case *EnrollMemberUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FindPersonUsingGET sunlives us dc compassintegrationapplication service person find method

None
*/
func (a *Client) FindPersonUsingGET(params *FindPersonUsingGETParams, opts ...ClientOption) (*FindPersonUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFindPersonUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "findPersonUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/personFind",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.person.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FindPersonUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FindPersonUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for findPersonUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDependentsUsingGET gets all dependents of a member

Get all Dependents of a member including expired.
*/
func (a *Client) GetAllDependentsUsingGET(params *GetAllDependentsUsingGETParams, opts ...ClientOption) (*GetAllDependentsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDependentsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllDependentsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/allDependents",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDependentsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDependentsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllDependentsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCaseMemberKeyUsingGET searches for member by case sunlife us dc compassintegrationapplication service member key method

None
*/
func (a *Client) GetCaseMemberKeyUsingGET(params *GetCaseMemberKeyUsingGETParams, opts ...ClientOption) (*GetCaseMemberKeyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCaseMemberKeyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCaseMemberKeyUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/caseMemberKey",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.casememberkey.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCaseMemberKeyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCaseMemberKeyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCaseMemberKeyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXDependentInfoUsingGET es d x sunlife us dc compassintegrationapplication service dependent info method

None
*/
func (a *Client) GetEDXDependentInfoUsingGET(params *GetEDXDependentInfoUsingGETParams, opts ...ClientOption) (*GetEDXDependentInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXDependentInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXDependentInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/edxDependentInfo",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.edxdependentinfo.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXDependentInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXDependentInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXDependentInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXMemberInfoUsingGET es d x sunlife us dc compassintegrationapplication service member info method

None
*/
func (a *Client) GetEDXMemberInfoUsingGET(params *GetEDXMemberInfoUsingGETParams, opts ...ClientOption) (*GetEDXMemberInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXMemberInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXMemberInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/edxMemberInfo",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.edxmemberinfo.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXMemberInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXMemberInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXMemberInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXMembersUsingGET es d x sunlife us dc compassintegrationapplication service member list method

None
*/
func (a *Client) GetEDXMembersUsingGET(params *GetEDXMembersUsingGETParams, opts ...ClientOption) (*GetEDXMembersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXMembersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXMembersUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/edxMemberMatchList",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.edxmembermatchlist.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXMembersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXMembersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXMembersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXMembersWithPagingUsingGET es d x sunlife us dc compassintegrationapplication service member list with pagination

None
*/
func (a *Client) GetEDXMembersWithPagingUsingGET(params *GetEDXMembersWithPagingUsingGETParams, opts ...ClientOption) (*GetEDXMembersWithPagingUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXMembersWithPagingUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXMembersWithPagingUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/edxMemberMatchListWithPaging",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.edxmembermatchlist.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXMembersWithPagingUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXMembersWithPagingUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXMembersWithPagingUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXPersonInfoUsingGET1 es d x sunlife us dc compassintegrationapplication service person info method

None
*/
func (a *Client) GetEDXPersonInfoUsingGET1(params *GetEDXPersonInfoUsingGET1Params, opts ...ClientOption) (*GetEDXPersonInfoUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXPersonInfoUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXPersonInfoUsingGET_1",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/edxPersonInfo",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.edxpersoninfo.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXPersonInfoUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXPersonInfoUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXPersonInfoUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberBenefitHistoryUsingGET sunlives us dc compassintegrationapplication service member sunlife us dc compassintegrationapplication service benefit history method

None
*/
func (a *Client) GetMemberBenefitHistoryUsingGET(params *GetMemberBenefitHistoryUsingGETParams, opts ...ClientOption) (*GetMemberBenefitHistoryUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberBenefitHistoryUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberBenefitHistoryUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/benefitHistory",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.benefithistory.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberBenefitHistoryUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberBenefitHistoryUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberBenefitHistoryUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberBenefitOptionUsingGET gets sunlife us dc compassintegrationapplication service member s sunlife us dc compassintegrationapplication service benefit option method

None
*/
func (a *Client) GetMemberBenefitOptionUsingGET(params *GetMemberBenefitOptionUsingGETParams, opts ...ClientOption) (*GetMemberBenefitOptionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberBenefitOptionUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberBenefitOptionUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/memberBenefitOptions",
		ProducesMediaTypes: []string{"application/aeb.cas.member.memberbenefitoptions.get.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberBenefitOptionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberBenefitOptionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberBenefitOptionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberCoverageStatementMbrNoUsingGET sunlives us dc compassintegrationapplication service member coverage statement aka m c s search by sunlife us dc compassintegrationapplication service member number method

None
*/
func (a *Client) GetMemberCoverageStatementMbrNoUsingGET(params *GetMemberCoverageStatementMbrNoUsingGETParams, opts ...ClientOption) (*GetMemberCoverageStatementMbrNoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberCoverageStatementMbrNoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberCoverageStatementMbrNoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/coverageStatementMbrNo",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.member.coveragestatementmbrno.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberCoverageStatementMbrNoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberCoverageStatementMbrNoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberCoverageStatementMbrNoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberCoverageStatementUsingGET sunlives us dc compassintegrationapplication service member coverage statement aka m c s search method

None
*/
func (a *Client) GetMemberCoverageStatementUsingGET(params *GetMemberCoverageStatementUsingGETParams, opts ...ClientOption) (*GetMemberCoverageStatementUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberCoverageStatementUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberCoverageStatementUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/coverageStatement",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.member.coveragestatement.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberCoverageStatementUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberCoverageStatementUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberCoverageStatementUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberIssueStateUsingGET issues state for a sunlife us dc compassintegrationapplication service member method

None
*/
func (a *Client) GetMemberIssueStateUsingGET(params *GetMemberIssueStateUsingGETParams, opts ...ClientOption) (*GetMemberIssueStateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberIssueStateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberIssueStateUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/issueState",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.issue.state.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberIssueStateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberIssueStateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberIssueStateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListBasicUsingGET basics sunlife us dc compassintegrationapplication service member search method

None
*/
func (a *Client) GetMemberListBasicUsingGET(params *GetMemberListBasicUsingGETParams, opts ...ClientOption) (*GetMemberListBasicUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListBasicUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListBasicUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/basicSearch",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.basic.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListBasicUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListBasicUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListBasicUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListCensusV2UsingGET census sunlife us dc compassintegrationapplication service member search method version 2

This version of census member search is a little more lightweight than version 1
*/
func (a *Client) GetMemberListCensusV2UsingGET(params *GetMemberListCensusV2UsingGETParams, opts ...ClientOption) (*GetMemberListCensusV2UsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListCensusV2UsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListCensusV2UsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/censusSearch",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.census.v2+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListCensusV2UsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListCensusV2UsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListCensusV2UsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListDetailUsingGET details sunlife us dc compassintegrationapplication service member search method

None
*/
func (a *Client) GetMemberListDetailUsingGET(params *GetMemberListDetailUsingGETParams, opts ...ClientOption) (*GetMemberListDetailUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListDetailUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListDetailUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/detailSearch",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.detail.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListDetailUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListDetailUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListDetailUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListFastUsingGET fasts sunlife us dc compassintegrationapplication service member search method

None
*/
func (a *Client) GetMemberListFastUsingGET(params *GetMemberListFastUsingGETParams, opts ...ClientOption) (*GetMemberListFastUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListFastUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListFastUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/fastSearch",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.fast.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListFastUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListFastUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListFastUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListPremiumEffectiveUsingGET sunlives us dc compassintegrationapplication service member premium effective sunlife us dc compassintegrationapplication service member deduction report changes effective month date aka c e m search method

None
*/
func (a *Client) GetMemberListPremiumEffectiveUsingGET(params *GetMemberListPremiumEffectiveUsingGETParams, opts ...ClientOption) (*GetMemberListPremiumEffectiveUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListPremiumEffectiveUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListPremiumEffectiveUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/premium/effective",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.premium.effective.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListPremiumEffectiveUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListPremiumEffectiveUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListPremiumEffectiveUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListPremiumTransactionUsingGET sunlives us dc compassintegrationapplication service member premium transaction sunlife us dc compassintegrationapplication service member deduction report changes submitted since aka CSS search method

None
*/
func (a *Client) GetMemberListPremiumTransactionUsingGET(params *GetMemberListPremiumTransactionUsingGETParams, opts ...ClientOption) (*GetMemberListPremiumTransactionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListPremiumTransactionUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListPremiumTransactionUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/premium/transaction",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.premium.transaction.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListPremiumTransactionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListPremiumTransactionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListPremiumTransactionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListPremiumUsingGET sunlives us dc compassintegrationapplication service member premium sunlife us dc compassintegrationapplication service member deduction report aka m d r search method

None
*/
func (a *Client) GetMemberListPremiumUsingGET(params *GetMemberListPremiumUsingGETParams, opts ...ClientOption) (*GetMemberListPremiumUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListPremiumUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListPremiumUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/premium",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.memberlist.premium.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListPremiumUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListPremiumUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListPremiumUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberListUsingGET gets member list method

None
*/
func (a *Client) GetMemberListUsingGET(params *GetMemberListUsingGETParams, opts ...ClientOption) (*GetMemberListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberListUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/list",
		ProducesMediaTypes: []string{"application/aeb.cas.member.list.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetMemberUsingGET returns member information

	<ul><li>Please provide at least one of the following parameters: caseMemberKey, memberNumber, or clientId.</li><li>Ensure the effectiveDate is in MM/dd/YYYY format.</li><li>Use the flag parameter to specify optional data to include.</li></ul>Please see below flag table, if need more than one type of data then please sum its value and enter in flag parameter.

<table border='1' style='border-collapse: collapse;'><tr><th><b>Flag</b></th><th><b>Value</b></th></tr><tr><td>NONE</td><td>0</td></tr><tr><td>ADDRESS</td><td>1</td></tr><tr><td>STATUS</td><td>2</td></tr><tr><td>SALARY</td><td>4</td></tr><tr><td>MEMBER_GROUP</td><td>8</td></tr><tr><td>DATES</td><td>16</td></tr><tr><td>FACILITY</td><td>32</td></tr><tr><td>POLICY_DETAIL</td><td>64</td></tr><tr><td>POLICY_HOLDER</td><td>128</td></tr><tr><td>POLICY_OPTION</td><td>256</td></tr><tr><td>BENEFIT</td><td>512</td></tr><tr><td>BENEFIT_FUNDING_TYPE</td><td>1024</td></tr><tr><td>DEPENDENT</td><td>2048</td></tr><tr><td>DEPENDENT_FACILITY</td><td>4096</td></tr><tr><td>ADMINISTRATION_TYPE</td><td>8192</td></tr><tr><td>PREMIUM</td><td>16384</td></tr><tr><td>PREMIUM_DETAILS</td><td>32768</td></tr><tr><td>ACCOUNT_NUMBER</td><td>65536</td></tr><tr><td>CARE_COVERAGES</td><td>131072</td></tr><tr><td>BENEFIT_BEN_OPTS</td><td>262144</td></tr><tr><td>DEPARTMENT_DETAILS</td><td>524288</td></tr></table>
*/
func (a *Client) GetMemberUsingGET(params *GetMemberUsingGETParams, opts ...ClientOption) (*GetMemberUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/memberInfo",
		ProducesMediaTypes: []string{"application/aeb.cas.member.find.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberUsingGET1 sunlives us dc compassintegrationapplication service member info search method

None
*/
func (a *Client) GetMemberUsingGET1(params *GetMemberUsingGET1Params, opts ...ClientOption) (*GetMemberUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberUsingGET_1",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/memberInfoLite",
		ProducesMediaTypes: []string{"application/aeb.cia.jsn", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
MemberReallocationUsingGET sunlives us dc compassintegrationapplication service member reallocation method

None
*/
func (a *Client) MemberReallocationUsingGET(params *MemberReallocationUsingGETParams, opts ...ClientOption) (*MemberReallocationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMemberReallocationUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "memberReallocationUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/member/doReallocation",
		ProducesMediaTypes: []string{"application/aeb.cas.member.doreallocation.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &MemberReallocationUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MemberReallocationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for memberReallocationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBenefitTerminateUsingPUT sunlives us dc compassintegrationapplication service member terminate sunlife us dc compassintegrationapplication service benefit method

None
*/
func (a *Client) UpdateBenefitTerminateUsingPUT(params *UpdateBenefitTerminateUsingPUTParams, opts ...ClientOption) (*UpdateBenefitTerminateUsingPUTOK, *UpdateBenefitTerminateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBenefitTerminateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBenefitTerminateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/benefit/terminate",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.benefit.terminate.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.benefit.termiante.v1+xml", "application/aeb.cas.member.update.benefit.terminate.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBenefitTerminateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBenefitTerminateUsingPUTOK:
		return value, nil, nil
	case *UpdateBenefitTerminateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBenefitUsingPUT sunlives us dc compassintegrationapplication service member update sunlife us dc compassintegrationapplication service benefit method

None
*/
func (a *Client) UpdateBenefitUsingPUT(params *UpdateBenefitUsingPUTParams, opts ...ClientOption) (*UpdateBenefitUsingPUTOK, *UpdateBenefitUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBenefitUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBenefitUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/benefit",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.benefit.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.benefit.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBenefitUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBenefitUsingPUTOK:
		return value, nil, nil
	case *UpdateBenefitUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEmploymentStatusUsingPUT sunlives us dc compassintegrationapplication service member update employment status method

None
*/
func (a *Client) UpdateEmploymentStatusUsingPUT(params *UpdateEmploymentStatusUsingPUTParams, opts ...ClientOption) (*UpdateEmploymentStatusUsingPUTOK, *UpdateEmploymentStatusUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmploymentStatusUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEmploymentStatusUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/employmentStatus",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.emplstatus.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEmploymentStatusUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEmploymentStatusUsingPUTOK:
		return value, nil, nil
	case *UpdateEmploymentStatusUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberAddressUsingPUT sunlives us dc compassintegrationapplication service member update address method

None
*/
func (a *Client) UpdateMemberAddressUsingPUT(params *UpdateMemberAddressUsingPUTParams, opts ...ClientOption) (*UpdateMemberAddressUsingPUTOK, *UpdateMemberAddressUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberAddressUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberAddressUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/address",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.address.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/aeb.cas.member.update.address.v1+xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberAddressUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberAddressUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberAddressUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberBenefitOptionUsingPOST sunlives us dc compassintegrationapplication service member sunlife us dc compassintegrationapplication service benefit option update method

None
*/
func (a *Client) UpdateMemberBenefitOptionUsingPOST(params *UpdateMemberBenefitOptionUsingPOSTParams, opts ...ClientOption) (*UpdateMemberBenefitOptionUsingPOSTOK, *UpdateMemberBenefitOptionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberBenefitOptionUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberBenefitOptionUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/member/memberBenefitOptions",
		ProducesMediaTypes: []string{"application/aeb.cas.member.memberbenefitoptions.post.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberBenefitOptionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberBenefitOptionUsingPOSTOK:
		return value, nil, nil
	case *UpdateMemberBenefitOptionUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberBenefitOptionWithPolMaintUsingPUT updates sunlife us dc compassintegrationapplication service member sunlife us dc compassintegrationapplication service benefit option through sunlife us dc compassintegrationapplication service policy maintenance

None
*/
func (a *Client) UpdateMemberBenefitOptionWithPolMaintUsingPUT(params *UpdateMemberBenefitOptionWithPolMaintUsingPUTParams, opts ...ClientOption) (*UpdateMemberBenefitOptionWithPolMaintUsingPUTOK, *UpdateMemberBenefitOptionWithPolMaintUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberBenefitOptionWithPolMaintUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberBenefitOptionWithPolMaintUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/memberBenefitOptionsWithPolMaint",
		ProducesMediaTypes: []string{"application/aeb.cas.member.memberbenefitoptionswithpolmaint.put.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/aeb.cas.member.memberbenefitoptionswithpolmaint.put.v1+xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberBenefitOptionWithPolMaintUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberBenefitOptionWithPolMaintUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberBenefitOptionWithPolMaintUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberBillGroupUsingPUT sunlives us dc compassintegrationapplication service member update sunlife us dc compassintegrationapplication service bill group method

None
*/
func (a *Client) UpdateMemberBillGroupUsingPUT(params *UpdateMemberBillGroupUsingPUTParams, opts ...ClientOption) (*UpdateMemberBillGroupUsingPUTOK, *UpdateMemberBillGroupUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberBillGroupUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberBillGroupUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/billGroup",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.billgroup.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberBillGroupUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberBillGroupUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberBillGroupUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberBillGroupWithPolMaintUsingPUT sunlives us dc compassintegrationapplication service member update sunlife us dc compassintegrationapplication service bill group method

None
*/
func (a *Client) UpdateMemberBillGroupWithPolMaintUsingPUT(params *UpdateMemberBillGroupWithPolMaintUsingPUTParams, opts ...ClientOption) (*UpdateMemberBillGroupWithPolMaintUsingPUTOK, *UpdateMemberBillGroupWithPolMaintUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberBillGroupWithPolMaintUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberBillGroupWithPolMaintUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/billGroup/v2",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.billgroup.v2+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberBillGroupWithPolMaintUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberBillGroupWithPolMaintUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberBillGroupWithPolMaintUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberDateOfBirthUsingPUT sunlives us dc compassintegrationapplication service member update date of birth method

None
*/
func (a *Client) UpdateMemberDateOfBirthUsingPUT(params *UpdateMemberDateOfBirthUsingPUTParams, opts ...ClientOption) (*UpdateMemberDateOfBirthUsingPUTOK, *UpdateMemberDateOfBirthUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberDateOfBirthUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberDateOfBirthUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/dateOfBirth",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.dateofbirth.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberDateOfBirthUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberDateOfBirthUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberDateOfBirthUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberDepartmentUsingPUT sunlives us dc compassintegrationapplication service member update department name method

None
*/
func (a *Client) UpdateMemberDepartmentUsingPUT(params *UpdateMemberDepartmentUsingPUTParams, opts ...ClientOption) (*UpdateMemberDepartmentUsingPUTOK, *UpdateMemberDepartmentUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberDepartmentUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberDepartmentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/department",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.department.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberDepartmentUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberDepartmentUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberDepartmentUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberFacilityUsingPUT sunlives us dc compassintegrationapplication service member update facility method

None
*/
func (a *Client) UpdateMemberFacilityUsingPUT(params *UpdateMemberFacilityUsingPUTParams, opts ...ClientOption) (*UpdateMemberFacilityUsingPUTOK, *UpdateMemberFacilityUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberFacilityUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberFacilityUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/facility",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.facility.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberFacilityUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberFacilityUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberFacilityUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberFirstNameUsingPUT sunlives us dc compassintegrationapplication service member update first name method

None
*/
func (a *Client) UpdateMemberFirstNameUsingPUT(params *UpdateMemberFirstNameUsingPUTParams, opts ...ClientOption) (*UpdateMemberFirstNameUsingPUTOK, *UpdateMemberFirstNameUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberFirstNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberFirstNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/firstName",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.firstname.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.firstname.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberFirstNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberFirstNameUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberFirstNameUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGenderUsingPUT sunlives us dc compassintegrationapplication service member update gender method

None
*/
func (a *Client) UpdateMemberGenderUsingPUT(params *UpdateMemberGenderUsingPUTParams, opts ...ClientOption) (*UpdateMemberGenderUsingPUTOK, *UpdateMemberGenderUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGenderUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGenderUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/gender",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.gender.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGenderUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGenderUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGenderUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupUsingPUT sunlives us dc compassintegrationapplication service member update sunlife us dc compassintegrationapplication service member group method

None
*/
func (a *Client) UpdateMemberGroupUsingPUT(params *UpdateMemberGroupUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupUsingPUTOK, *UpdateMemberGroupUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/memberGroup",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.membergroup.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.membergroup.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGroupUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberInsertOrReinstateBenefitUsingPUT sunlives us dc compassintegrationapplication service member insert or reinstate sunlife us dc compassintegrationapplication service benefit method

None
*/
func (a *Client) UpdateMemberInsertOrReinstateBenefitUsingPUT(params *UpdateMemberInsertOrReinstateBenefitUsingPUTParams, opts ...ClientOption) (*UpdateMemberInsertOrReinstateBenefitUsingPUTOK, *UpdateMemberInsertOrReinstateBenefitUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberInsertOrReinstateBenefitUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberInsertOrReinstateBenefitUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/insertOrReinstateBenefit",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.insertorreinstatebenefit.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/aeb.cas.member.update.insertorreinstatebenefit.v1+xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberInsertOrReinstateBenefitUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberInsertOrReinstateBenefitUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberInsertOrReinstateBenefitUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberLanguageUsingPUT sunlives us dc compassintegrationapplication service member update language method

None
*/
func (a *Client) UpdateMemberLanguageUsingPUT(params *UpdateMemberLanguageUsingPUTParams, opts ...ClientOption) (*UpdateMemberLanguageUsingPUTOK, *UpdateMemberLanguageUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberLanguageUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberLanguageUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/language",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.language.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberLanguageUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberLanguageUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberLanguageUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberLastNameUsingPUT sunlives us dc compassintegrationapplication service member update last name method

None
*/
func (a *Client) UpdateMemberLastNameUsingPUT(params *UpdateMemberLastNameUsingPUTParams, opts ...ClientOption) (*UpdateMemberLastNameUsingPUTOK, *UpdateMemberLastNameUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberLastNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberLastNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/lastName",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.lastname.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.lastname.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberLastNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberLastNameUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberLastNameUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberMiddleNameUsingPUT sunlives us dc compassintegrationapplication service member update mid name method

None
*/
func (a *Client) UpdateMemberMiddleNameUsingPUT(params *UpdateMemberMiddleNameUsingPUTParams, opts ...ClientOption) (*UpdateMemberMiddleNameUsingPUTOK, *UpdateMemberMiddleNameUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberMiddleNameUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberMiddleNameUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/midName",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.midname.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/aeb.cas.member.update.midname.v1+xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberMiddleNameUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberMiddleNameUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberMiddleNameUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberNameSuffixUsingPUT sunlives us dc compassintegrationapplication service member update name suffix method

None
*/
func (a *Client) UpdateMemberNameSuffixUsingPUT(params *UpdateMemberNameSuffixUsingPUTParams, opts ...ClientOption) (*UpdateMemberNameSuffixUsingPUTOK, *UpdateMemberNameSuffixUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberNameSuffixUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberNameSuffixUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/nameSuffix",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.namesuffix.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberNameSuffixUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberNameSuffixUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberNameSuffixUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberPayrollNumberUsingPUT sunlives us dc compassintegrationapplication service member update payroll number method

None
*/
func (a *Client) UpdateMemberPayrollNumberUsingPUT(params *UpdateMemberPayrollNumberUsingPUTParams, opts ...ClientOption) (*UpdateMemberPayrollNumberUsingPUTOK, *UpdateMemberPayrollNumberUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberPayrollNumberUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberPayrollNumberUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/payrollNumber",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.payrollnumber.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberPayrollNumberUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberPayrollNumberUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberPayrollNumberUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberPhoneUsingPUT sunlives us dc compassintegrationapplication service member update phone method

None
*/
func (a *Client) UpdateMemberPhoneUsingPUT(params *UpdateMemberPhoneUsingPUTParams, opts ...ClientOption) (*UpdateMemberPhoneUsingPUTOK, *UpdateMemberPhoneUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberPhoneUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberPhoneUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/phone",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.phone.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberPhoneUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberPhoneUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberPhoneUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberReinstateUsingPUT sunlives us dc compassintegrationapplication service member reinstate method

None
*/
func (a *Client) UpdateMemberReinstateUsingPUT(params *UpdateMemberReinstateUsingPUTParams, opts ...ClientOption) (*UpdateMemberReinstateUsingPUTOK, *UpdateMemberReinstateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberReinstateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberReinstateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/reinstate",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.reinstate.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberReinstateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberReinstateUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberReinstateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberSalaryUsingPUT sunlives us dc compassintegrationapplication service member update salary method

None
*/
func (a *Client) UpdateMemberSalaryUsingPUT(params *UpdateMemberSalaryUsingPUTParams, opts ...ClientOption) (*UpdateMemberSalaryUsingPUTOK, *UpdateMemberSalaryUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberSalaryUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberSalaryUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/salary",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.salary.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.salary.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberSalaryUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberSalaryUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberSalaryUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberSmokerFlagUsingPUT sunlives us dc compassintegrationapplication service member update smoker flag method

None
*/
func (a *Client) UpdateMemberSmokerFlagUsingPUT(params *UpdateMemberSmokerFlagUsingPUTParams, opts ...ClientOption) (*UpdateMemberSmokerFlagUsingPUTOK, *UpdateMemberSmokerFlagUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberSmokerFlagUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberSmokerFlagUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/member/smokerFlag",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.smokerflag.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberSmokerFlagUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberSmokerFlagUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberSmokerFlagUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberTerminateUsingPUT members terminate API

This API calls Policy Maintenance 'Terminate Mbr w/ Date Edits'
*/
func (a *Client) UpdateMemberTerminateUsingPUT(params *UpdateMemberTerminateUsingPUTParams, opts ...ClientOption) (*UpdateMemberTerminateUsingPUTOK, *UpdateMemberTerminateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberTerminateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberTerminateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/terminate",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.terminate.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberTerminateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberTerminateUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberTerminateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberUsingPUT sunlives us dc compassintegrationapplication service member update method

None
*/
func (a *Client) UpdateMemberUsingPUT(params *UpdateMemberUsingPUTParams, opts ...ClientOption) (*UpdateMemberUsingPUTOK, *UpdateMemberUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.member.update.v1+xml"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSocialSecurityNumberUsingPUT sunlives us dc compassintegrationapplication service member update s s n method

None
*/
func (a *Client) UpdateSocialSecurityNumberUsingPUT(params *UpdateSocialSecurityNumberUsingPUTParams, opts ...ClientOption) (*UpdateSocialSecurityNumberUsingPUTOK, *UpdateSocialSecurityNumberUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSocialSecurityNumberUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSocialSecurityNumberUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/member/update/socialSecurityNumber",
		ProducesMediaTypes: []string{"application/aeb.cas.member.update.socialsecuritynumber.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSocialSecurityNumberUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSocialSecurityNumberUsingPUTOK:
		return value, nil, nil
	case *UpdateSocialSecurityNumberUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for member: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
