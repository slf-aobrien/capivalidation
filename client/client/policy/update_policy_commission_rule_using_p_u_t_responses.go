// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// UpdatePolicyCommissionRuleUsingPUTReader is a Reader for the UpdatePolicyCommissionRuleUsingPUT structure.
type UpdatePolicyCommissionRuleUsingPUTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePolicyCommissionRuleUsingPUTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePolicyCommissionRuleUsingPUTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewUpdatePolicyCommissionRuleUsingPUTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdatePolicyCommissionRuleUsingPUTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdatePolicyCommissionRuleUsingPUTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdatePolicyCommissionRuleUsingPUTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePolicyCommissionRuleUsingPUTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdatePolicyCommissionRuleUsingPUTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule] updatePolicyCommissionRuleUsingPUT", response, response.Code())
	}
}

// NewUpdatePolicyCommissionRuleUsingPUTOK creates a UpdatePolicyCommissionRuleUsingPUTOK with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTOK() *UpdatePolicyCommissionRuleUsingPUTOK {
	return &UpdatePolicyCommissionRuleUsingPUTOK{}
}

/*
UpdatePolicyCommissionRuleUsingPUTOK describes a response with status code 200, with default header values.

Success
*/
type UpdatePolicyCommissionRuleUsingPUTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this update policy commission rule using p u t o k response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update policy commission rule using p u t o k response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t o k response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy commission rule using p u t o k response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy commission rule using p u t o k response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update policy commission rule using p u t o k response
func (o *UpdatePolicyCommissionRuleUsingPUTOK) Code() int {
	return 200
}

func (o *UpdatePolicyCommissionRuleUsingPUTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdatePolicyCommissionRuleUsingPUTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTOK %s", 200, payload)
}

func (o *UpdatePolicyCommissionRuleUsingPUTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *UpdatePolicyCommissionRuleUsingPUTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePolicyCommissionRuleUsingPUTCreated creates a UpdatePolicyCommissionRuleUsingPUTCreated with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTCreated() *UpdatePolicyCommissionRuleUsingPUTCreated {
	return &UpdatePolicyCommissionRuleUsingPUTCreated{}
}

/*
UpdatePolicyCommissionRuleUsingPUTCreated describes a response with status code 201, with default header values.

Created
*/
type UpdatePolicyCommissionRuleUsingPUTCreated struct {
}

// IsSuccess returns true when this update policy commission rule using p u t created response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update policy commission rule using p u t created response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t created response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy commission rule using p u t created response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy commission rule using p u t created response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the update policy commission rule using p u t created response
func (o *UpdatePolicyCommissionRuleUsingPUTCreated) Code() int {
	return 201
}

func (o *UpdatePolicyCommissionRuleUsingPUTCreated) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTCreated", 201)
}

func (o *UpdatePolicyCommissionRuleUsingPUTCreated) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTCreated", 201)
}

func (o *UpdatePolicyCommissionRuleUsingPUTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyCommissionRuleUsingPUTBadRequest creates a UpdatePolicyCommissionRuleUsingPUTBadRequest with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTBadRequest() *UpdatePolicyCommissionRuleUsingPUTBadRequest {
	return &UpdatePolicyCommissionRuleUsingPUTBadRequest{}
}

/*
UpdatePolicyCommissionRuleUsingPUTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UpdatePolicyCommissionRuleUsingPUTBadRequest struct {
}

// IsSuccess returns true when this update policy commission rule using p u t bad request response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy commission rule using p u t bad request response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t bad request response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy commission rule using p u t bad request response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy commission rule using p u t bad request response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update policy commission rule using p u t bad request response
func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) Code() int {
	return 400
}

func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTBadRequest", 400)
}

func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTBadRequest", 400)
}

func (o *UpdatePolicyCommissionRuleUsingPUTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyCommissionRuleUsingPUTUnauthorized creates a UpdatePolicyCommissionRuleUsingPUTUnauthorized with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTUnauthorized() *UpdatePolicyCommissionRuleUsingPUTUnauthorized {
	return &UpdatePolicyCommissionRuleUsingPUTUnauthorized{}
}

/*
UpdatePolicyCommissionRuleUsingPUTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdatePolicyCommissionRuleUsingPUTUnauthorized struct {
}

// IsSuccess returns true when this update policy commission rule using p u t unauthorized response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy commission rule using p u t unauthorized response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t unauthorized response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy commission rule using p u t unauthorized response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy commission rule using p u t unauthorized response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the update policy commission rule using p u t unauthorized response
func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) Code() int {
	return 401
}

func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTUnauthorized", 401)
}

func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTUnauthorized", 401)
}

func (o *UpdatePolicyCommissionRuleUsingPUTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyCommissionRuleUsingPUTForbidden creates a UpdatePolicyCommissionRuleUsingPUTForbidden with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTForbidden() *UpdatePolicyCommissionRuleUsingPUTForbidden {
	return &UpdatePolicyCommissionRuleUsingPUTForbidden{}
}

/*
UpdatePolicyCommissionRuleUsingPUTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdatePolicyCommissionRuleUsingPUTForbidden struct {
}

// IsSuccess returns true when this update policy commission rule using p u t forbidden response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy commission rule using p u t forbidden response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t forbidden response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy commission rule using p u t forbidden response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy commission rule using p u t forbidden response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update policy commission rule using p u t forbidden response
func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) Code() int {
	return 403
}

func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTForbidden", 403)
}

func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTForbidden", 403)
}

func (o *UpdatePolicyCommissionRuleUsingPUTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyCommissionRuleUsingPUTNotFound creates a UpdatePolicyCommissionRuleUsingPUTNotFound with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTNotFound() *UpdatePolicyCommissionRuleUsingPUTNotFound {
	return &UpdatePolicyCommissionRuleUsingPUTNotFound{}
}

/*
UpdatePolicyCommissionRuleUsingPUTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdatePolicyCommissionRuleUsingPUTNotFound struct {
}

// IsSuccess returns true when this update policy commission rule using p u t not found response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy commission rule using p u t not found response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t not found response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update policy commission rule using p u t not found response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update policy commission rule using p u t not found response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update policy commission rule using p u t not found response
func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) Code() int {
	return 404
}

func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTNotFound", 404)
}

func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTNotFound", 404)
}

func (o *UpdatePolicyCommissionRuleUsingPUTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePolicyCommissionRuleUsingPUTInternalServerError creates a UpdatePolicyCommissionRuleUsingPUTInternalServerError with default headers values
func NewUpdatePolicyCommissionRuleUsingPUTInternalServerError() *UpdatePolicyCommissionRuleUsingPUTInternalServerError {
	return &UpdatePolicyCommissionRuleUsingPUTInternalServerError{}
}

/*
UpdatePolicyCommissionRuleUsingPUTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type UpdatePolicyCommissionRuleUsingPUTInternalServerError struct {
}

// IsSuccess returns true when this update policy commission rule using p u t internal server error response has a 2xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update policy commission rule using p u t internal server error response has a 3xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update policy commission rule using p u t internal server error response has a 4xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update policy commission rule using p u t internal server error response has a 5xx status code
func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update policy commission rule using p u t internal server error response a status code equal to that given
func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the update policy commission rule using p u t internal server error response
func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) Code() int {
	return 500
}

func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTInternalServerError", 500)
}

func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) String() string {
	return fmt.Sprintf("[PUT /compassintegrationapp/policy/updatePolicyCommissionRule][%d] updatePolicyCommissionRuleUsingPUTInternalServerError", 500)
}

func (o *UpdatePolicyCommissionRuleUsingPUTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
