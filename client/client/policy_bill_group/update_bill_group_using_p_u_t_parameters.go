// Code generated by go-swagger; DO NOT EDIT.

package policy_bill_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// NewUpdateBillGroupUsingPUTParams creates a new UpdateBillGroupUsingPUTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateBillGroupUsingPUTParams() *UpdateBillGroupUsingPUTParams {
	return &UpdateBillGroupUsingPUTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateBillGroupUsingPUTParamsWithTimeout creates a new UpdateBillGroupUsingPUTParams object
// with the ability to set a timeout on a request.
func NewUpdateBillGroupUsingPUTParamsWithTimeout(timeout time.Duration) *UpdateBillGroupUsingPUTParams {
	return &UpdateBillGroupUsingPUTParams{
		timeout: timeout,
	}
}

// NewUpdateBillGroupUsingPUTParamsWithContext creates a new UpdateBillGroupUsingPUTParams object
// with the ability to set a context for a request.
func NewUpdateBillGroupUsingPUTParamsWithContext(ctx context.Context) *UpdateBillGroupUsingPUTParams {
	return &UpdateBillGroupUsingPUTParams{
		Context: ctx,
	}
}

// NewUpdateBillGroupUsingPUTParamsWithHTTPClient creates a new UpdateBillGroupUsingPUTParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateBillGroupUsingPUTParamsWithHTTPClient(client *http.Client) *UpdateBillGroupUsingPUTParams {
	return &UpdateBillGroupUsingPUTParams{
		HTTPClient: client,
	}
}

/*
UpdateBillGroupUsingPUTParams contains all the parameters to send to the API endpoint

	for the update bill group using p u t operation.

	Typically these are written to a http.Request.
*/
type UpdateBillGroupUsingPUTParams struct {

	/* BillGroupDTO.

	   billGroupDTO
	*/
	BillGroupDTO *models.BillGroupDTOReq

	/* BillGroupDescription.

	   Existing Bill Group Description for which change needs to be done.

	   Default: "ENTER BILL GROUP NAME"
	*/
	BillGroupDescription *string

	/* EffectiveDate.

	   Date should be in MM/DD/YYYY format.
	*/
	EffectiveDate string

	/* PolicyNumber.

	   policyNumber
	*/
	PolicyNumber string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update bill group using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateBillGroupUsingPUTParams) WithDefaults() *UpdateBillGroupUsingPUTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update bill group using p u t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateBillGroupUsingPUTParams) SetDefaults() {
	var (
		billGroupDescriptionDefault = string("ENTER BILL GROUP NAME")
	)

	val := UpdateBillGroupUsingPUTParams{
		BillGroupDescription: &billGroupDescriptionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithTimeout(timeout time.Duration) *UpdateBillGroupUsingPUTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithContext(ctx context.Context) *UpdateBillGroupUsingPUTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithHTTPClient(client *http.Client) *UpdateBillGroupUsingPUTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBillGroupDTO adds the billGroupDTO to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithBillGroupDTO(billGroupDTO *models.BillGroupDTOReq) *UpdateBillGroupUsingPUTParams {
	o.SetBillGroupDTO(billGroupDTO)
	return o
}

// SetBillGroupDTO adds the billGroupDTO to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetBillGroupDTO(billGroupDTO *models.BillGroupDTOReq) {
	o.BillGroupDTO = billGroupDTO
}

// WithBillGroupDescription adds the billGroupDescription to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithBillGroupDescription(billGroupDescription *string) *UpdateBillGroupUsingPUTParams {
	o.SetBillGroupDescription(billGroupDescription)
	return o
}

// SetBillGroupDescription adds the billGroupDescription to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetBillGroupDescription(billGroupDescription *string) {
	o.BillGroupDescription = billGroupDescription
}

// WithEffectiveDate adds the effectiveDate to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithEffectiveDate(effectiveDate string) *UpdateBillGroupUsingPUTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithPolicyNumber adds the policyNumber to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithPolicyNumber(policyNumber string) *UpdateBillGroupUsingPUTParams {
	o.SetPolicyNumber(policyNumber)
	return o
}

// SetPolicyNumber adds the policyNumber to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetPolicyNumber(policyNumber string) {
	o.PolicyNumber = policyNumber
}

// WithRequestApplication adds the requestApplication to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithRequestApplication(requestApplication string) *UpdateBillGroupUsingPUTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) WithRequestUser(requestUser string) *UpdateBillGroupUsingPUTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the update bill group using p u t params
func (o *UpdateBillGroupUsingPUTParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateBillGroupUsingPUTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.BillGroupDTO != nil {
		if err := r.SetBodyParam(o.BillGroupDTO); err != nil {
			return err
		}
	}

	if o.BillGroupDescription != nil {

		// query param billGroupDescription
		var qrBillGroupDescription string

		if o.BillGroupDescription != nil {
			qrBillGroupDescription = *o.BillGroupDescription
		}
		qBillGroupDescription := qrBillGroupDescription
		if qBillGroupDescription != "" {

			if err := r.SetQueryParam("billGroupDescription", qBillGroupDescription); err != nil {
				return err
			}
		}
	}

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	// query param policyNumber
	qrPolicyNumber := o.PolicyNumber
	qPolicyNumber := qrPolicyNumber
	if qPolicyNumber != "" {

		if err := r.SetQueryParam("policyNumber", qPolicyNumber); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
