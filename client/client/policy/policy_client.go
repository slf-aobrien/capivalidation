// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new policy API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new policy API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptStarStar sets the Accept header to "*/*".
func WithAcceptStarStar(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"*/*"}
}

// WithAcceptApplicationAebCasPolicyGetBillgroupdescriptionV1XML sets the Accept header to "application/aeb.cas.policy.get.billgroupdescription.v1+xml".
func WithAcceptApplicationAebCasPolicyGetBillgroupdescriptionV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.get.billgroupdescription.v1+xml"}
}

// WithAcceptApplicationAebCasPolicyGetDepartmentmembercountV1XML sets the Accept header to "application/aeb.cas.policy.get.departmentmembercount.v1+xml".
func WithAcceptApplicationAebCasPolicyGetDepartmentmembercountV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.get.departmentmembercount.v1+xml"}
}

// WithAcceptApplicationAebCasPolicyGetEdxpolicyrepV1XML sets the Accept header to "application/aeb.cas.policy.get.edxpolicyrep.v1+xml".
func WithAcceptApplicationAebCasPolicyGetEdxpolicyrepV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.get.edxpolicyrep.v1+xml"}
}

// WithAcceptApplicationAebCasPolicyGetPaidtodateV1XML sets the Accept header to "application/aeb.cas.policy.get.paidtodate.v1+xml".
func WithAcceptApplicationAebCasPolicyGetPaidtodateV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.get.paidtodate.v1+xml"}
}

// WithAcceptApplicationAebCasPolicyGetPortabilityrulesV1XML sets the Accept header to "application/aeb.cas.policy.get.portabilityrules.v1+xml".
func WithAcceptApplicationAebCasPolicyGetPortabilityrulesV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.get.portabilityrules.v1+xml"}
}

// WithAcceptApplicationAebCasPolicyGetServicersV1XML sets the Accept header to "application/aeb.cas.policy.get.servicers.v1+xml".
func WithAcceptApplicationAebCasPolicyGetServicersV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.get.servicers.v1+xml"}
}

// WithAcceptApplicationAebCasPolicySearchV1XML sets the Accept header to "application/aeb.cas.policy.search.v1+xml".
func WithAcceptApplicationAebCasPolicySearchV1XML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.policy.search.v1+xml"}
}

// WithAcceptApplicationAebCiaJsn sets the Accept header to "application/aeb.cia.jsn".
func WithAcceptApplicationAebCiaJsn(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cia.jsn"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddMemberGroupOverrideUsingPOST(params *AddMemberGroupOverrideUsingPOSTParams, opts ...ClientOption) (*AddMemberGroupOverrideUsingPOSTOK, *AddMemberGroupOverrideUsingPOSTCreated, error)

	AddMemberGroupPackageSelectUsingPOST(params *AddMemberGroupPackageSelectUsingPOSTParams, opts ...ClientOption) (*AddMemberGroupPackageSelectUsingPOSTOK, *AddMemberGroupPackageSelectUsingPOSTCreated, error)

	AddMemberGroupUsingPOST(params *AddMemberGroupUsingPOSTParams, opts ...ClientOption) (*AddMemberGroupUsingPOSTOK, *AddMemberGroupUsingPOSTCreated, error)

	AddPolicyBenefitStopLossUsingPOST(params *AddPolicyBenefitStopLossUsingPOSTParams, opts ...ClientOption) (*AddPolicyBenefitStopLossUsingPOSTOK, *AddPolicyBenefitStopLossUsingPOSTCreated, error)

	AddPolicyBenefitUsingPOST(params *AddPolicyBenefitUsingPOSTParams, opts ...ClientOption) (*AddPolicyBenefitUsingPOSTOK, *AddPolicyBenefitUsingPOSTCreated, error)

	AddProcessingRuleUsingPOST(params *AddProcessingRuleUsingPOSTParams, opts ...ClientOption) (*AddProcessingRuleUsingPOSTOK, *AddProcessingRuleUsingPOSTCreated, error)

	AddServicersUsingPOST(params *AddServicersUsingPOSTParams, opts ...ClientOption) (*AddServicersUsingPOSTOK, *AddServicersUsingPOSTCreated, error)

	AddTpaPackageUsingPOST(params *AddTpaPackageUsingPOSTParams, opts ...ClientOption) (*AddTpaPackageUsingPOSTOK, *AddTpaPackageUsingPOSTCreated, error)

	BillGroupDescriptionUsingGET(params *BillGroupDescriptionUsingGETParams, opts ...ClientOption) (*BillGroupDescriptionUsingGETOK, error)

	CancelBenefitOptionOverrideListUsingPOST(params *CancelBenefitOptionOverrideListUsingPOSTParams, opts ...ClientOption) (*CancelBenefitOptionOverrideListUsingPOSTOK, *CancelBenefitOptionOverrideListUsingPOSTCreated, error)

	CancelPayrollAliasUsingGET(params *CancelPayrollAliasUsingGETParams, opts ...ClientOption) (*CancelPayrollAliasUsingGETOK, error)

	CopyMemberGroupOverrideUsingPOST(params *CopyMemberGroupOverrideUsingPOSTParams, opts ...ClientOption) (*CopyMemberGroupOverrideUsingPOSTOK, *CopyMemberGroupOverrideUsingPOSTCreated, error)

	DepartmentInsertUsingPOST(params *DepartmentInsertUsingPOSTParams, opts ...ClientOption) (*DepartmentInsertUsingPOSTOK, *DepartmentInsertUsingPOSTCreated, error)

	DepartmentMemberCountUsingGET(params *DepartmentMemberCountUsingGETParams, opts ...ClientOption) (*DepartmentMemberCountUsingGETOK, error)

	ExpireAssociatedCompensationEntitiesUsingPUT(params *ExpireAssociatedCompensationEntitiesUsingPUTParams, opts ...ClientOption) (*ExpireAssociatedCompensationEntitiesUsingPUTOK, *ExpireAssociatedCompensationEntitiesUsingPUTCreated, error)

	ExpireDepartmentUsingPUT(params *ExpireDepartmentUsingPUTParams, opts ...ClientOption) (*ExpireDepartmentUsingPUTOK, *ExpireDepartmentUsingPUTCreated, error)

	ExpirePolicyContactUsingPUT(params *ExpirePolicyContactUsingPUTParams, opts ...ClientOption) (*ExpirePolicyContactUsingPUTOK, *ExpirePolicyContactUsingPUTCreated, error)

	ExpireServicersUsingPUT(params *ExpireServicersUsingPUTParams, opts ...ClientOption) (*ExpireServicersUsingPUTOK, *ExpireServicersUsingPUTCreated, error)

	GetBenefitOptionListAtMbgpUsingGET(params *GetBenefitOptionListAtMbgpUsingGETParams, opts ...ClientOption) (*GetBenefitOptionListAtMbgpUsingGETOK, error)

	GetBenefitOptionListAtPolicyUsingGET(params *GetBenefitOptionListAtPolicyUsingGETParams, opts ...ClientOption) (*GetBenefitOptionListAtPolicyUsingGETOK, error)

	GetBenefitOptionListUsingGET(params *GetBenefitOptionListUsingGETParams, opts ...ClientOption) (*GetBenefitOptionListUsingGETOK, error)

	GetBenefitOptionListUsingGET1(params *GetBenefitOptionListUsingGET1Params, opts ...ClientOption) (*GetBenefitOptionListUsingGET1OK, error)

	GetBenefitOptionListUsingGET2(params *GetBenefitOptionListUsingGET2Params, opts ...ClientOption) (*GetBenefitOptionListUsingGET2OK, error)

	GetBenefitPackagesUsingGET(params *GetBenefitPackagesUsingGETParams, opts ...ClientOption) (*GetBenefitPackagesUsingGETOK, error)

	GetBillDetailUsingGET(params *GetBillDetailUsingGETParams, opts ...ClientOption) (*GetBillDetailUsingGETOK, error)

	GetBillGroupRuleUsingGET(params *GetBillGroupRuleUsingGETParams, opts ...ClientOption) (*GetBillGroupRuleUsingGETOK, error)

	GetBillGroupUsingGET(params *GetBillGroupUsingGETParams, opts ...ClientOption) (*GetBillGroupUsingGETOK, error)

	GetBillsListUsingGET(params *GetBillsListUsingGETParams, opts ...ClientOption) (*GetBillsListUsingGETOK, error)

	GetEDXPolicyAgentInfoUsingGET(params *GetEDXPolicyAgentInfoUsingGETParams, opts ...ClientOption) (*GetEDXPolicyAgentInfoUsingGETOK, error)

	GetFineosBeneInfoUsingGET(params *GetFineosBeneInfoUsingGETParams, opts ...ClientOption) (*GetFineosBeneInfoUsingGETOK, error)

	GetLapseStatusUsingGET(params *GetLapseStatusUsingGETParams, opts ...ClientOption) (*GetLapseStatusUsingGETOK, error)

	GetMemberGroupBenefitOptionsUsingGET(params *GetMemberGroupBenefitOptionsUsingGETParams, opts ...ClientOption) (*GetMemberGroupBenefitOptionsUsingGETOK, error)

	GetNextBillDueDateUsingGET(params *GetNextBillDueDateUsingGETParams, opts ...ClientOption) (*GetNextBillDueDateUsingGETOK, error)

	GetPaidToDateUsingGET(params *GetPaidToDateUsingGETParams, opts ...ClientOption) (*GetPaidToDateUsingGETOK, error)

	GetPolicyEffectiveDateUsingGET(params *GetPolicyEffectiveDateUsingGETParams, opts ...ClientOption) (*GetPolicyEffectiveDateUsingGETOK, error)

	GetPolicyForAmendmentUsingGET(params *GetPolicyForAmendmentUsingGETParams, opts ...ClientOption) (*GetPolicyForAmendmentUsingGETOK, error)

	GetPolicyForInstallUsingGET(params *GetPolicyForInstallUsingGETParams, opts ...ClientOption) (*GetPolicyForInstallUsingGETOK, error)

	GetPolicyUsingGET(params *GetPolicyUsingGETParams, opts ...ClientOption) (*GetPolicyUsingGETOK, error)

	GetPortabilityRulesUsingGET(params *GetPortabilityRulesUsingGETParams, opts ...ClientOption) (*GetPortabilityRulesUsingGETOK, error)

	GetPremiumLivesRptUsingGET(params *GetPremiumLivesRptUsingGETParams, opts ...ClientOption) (*GetPremiumLivesRptUsingGETOK, error)

	GetProcessingRuleUsingGET(params *GetProcessingRuleUsingGETParams, opts ...ClientOption) (*GetProcessingRuleUsingGETOK, error)

	GetServicersUsingGET(params *GetServicersUsingGETParams, opts ...ClientOption) (*GetServicersUsingGETOK, error)

	InsertAssociatedCompensationEntitiesUsingPOST(params *InsertAssociatedCompensationEntitiesUsingPOSTParams, opts ...ClientOption) (*InsertAssociatedCompensationEntitiesUsingPOSTOK, *InsertAssociatedCompensationEntitiesUsingPOSTCreated, error)

	InsertBenefitOptionListUsingPUT(params *InsertBenefitOptionListUsingPUTParams, opts ...ClientOption) (*InsertBenefitOptionListUsingPUTOK, *InsertBenefitOptionListUsingPUTCreated, error)

	InsertBenefitOptionOverrideListUsingPUT(params *InsertBenefitOptionOverrideListUsingPUTParams, opts ...ClientOption) (*InsertBenefitOptionOverrideListUsingPUTOK, *InsertBenefitOptionOverrideListUsingPUTCreated, error)

	InsertMemberGroupTransferRuleUsingPOST(params *InsertMemberGroupTransferRuleUsingPOSTParams, opts ...ClientOption) (*InsertMemberGroupTransferRuleUsingPOSTOK, *InsertMemberGroupTransferRuleUsingPOSTCreated, error)

	InsertPayrollAliasUsingGET(params *InsertPayrollAliasUsingGETParams, opts ...ClientOption) (*InsertPayrollAliasUsingGETOK, error)

	InsertPolicyContactUsingPOST(params *InsertPolicyContactUsingPOSTParams, opts ...ClientOption) (*InsertPolicyContactUsingPOSTOK, *InsertPolicyContactUsingPOSTCreated, error)

	InsertPolicyDateUsingPOST(params *InsertPolicyDateUsingPOSTParams, opts ...ClientOption) (*InsertPolicyDateUsingPOSTOK, *InsertPolicyDateUsingPOSTCreated, error)

	InstallBenefitUsingPOST(params *InstallBenefitUsingPOSTParams, opts ...ClientOption) (*InstallBenefitUsingPOSTOK, *InstallBenefitUsingPOSTCreated, error)

	InstallMemberGroupRulesUsingPUT(params *InstallMemberGroupRulesUsingPUTParams, opts ...ClientOption) (*InstallMemberGroupRulesUsingPUTOK, *InstallMemberGroupRulesUsingPUTCreated, error)

	InstallPolicyUsingPOST(params *InstallPolicyUsingPOSTParams, opts ...ClientOption) (*InstallPolicyUsingPOSTOK, *InstallPolicyUsingPOSTCreated, error)

	PayrollAliasUsingGET(params *PayrollAliasUsingGETParams, opts ...ClientOption) (*PayrollAliasUsingGETOK, error)

	PolicyBenefitOptionsUsingGET(params *PolicyBenefitOptionsUsingGETParams, opts ...ClientOption) (*PolicyBenefitOptionsUsingGETOK, error)

	PolicyLevelOptionsUsingGET(params *PolicyLevelOptionsUsingGETParams, opts ...ClientOption) (*PolicyLevelOptionsUsingGETOK, error)

	ProcessMemberGroupPolicyMaintenanceUsingPUT(params *ProcessMemberGroupPolicyMaintenanceUsingPUTParams, opts ...ClientOption) (*ProcessMemberGroupPolicyMaintenanceUsingPUTOK, *ProcessMemberGroupPolicyMaintenanceUsingPUTCreated, error)

	ProcessRenewalPeriodUsingPUT(params *ProcessRenewalPeriodUsingPUTParams, opts ...ClientOption) (*ProcessRenewalPeriodUsingPUTOK, *ProcessRenewalPeriodUsingPUTCreated, error)

	ProcessSchemePolicyMaintenanceUsingPUT(params *ProcessSchemePolicyMaintenanceUsingPUTParams, opts ...ClientOption) (*ProcessSchemePolicyMaintenanceUsingPUTOK, *ProcessSchemePolicyMaintenanceUsingPUTCreated, error)

	RequestReallocationUsingPOST(params *RequestReallocationUsingPOSTParams, opts ...ClientOption) (*RequestReallocationUsingPOSTOK, *RequestReallocationUsingPOSTCreated, error)

	SearchPolicyInfoUsingGET(params *SearchPolicyInfoUsingGETParams, opts ...ClientOption) (*SearchPolicyInfoUsingGETOK, error)

	SearchPolicyUsingGET(params *SearchPolicyUsingGETParams, opts ...ClientOption) (*SearchPolicyUsingGETOK, error)

	UpdateAmendmentHoldUsingPUT(params *UpdateAmendmentHoldUsingPUTParams, opts ...ClientOption) (*UpdateAmendmentHoldUsingPUTOK, *UpdateAmendmentHoldUsingPUTCreated, error)

	UpdateBasicPolicyDetailsUsingPUT(params *UpdateBasicPolicyDetailsUsingPUTParams, opts ...ClientOption) (*UpdateBasicPolicyDetailsUsingPUTOK, *UpdateBasicPolicyDetailsUsingPUTCreated, error)

	UpdateBenefitOptionListDescriptionUsingPOST(params *UpdateBenefitOptionListDescriptionUsingPOSTParams, opts ...ClientOption) (*UpdateBenefitOptionListDescriptionUsingPOSTOK, *UpdateBenefitOptionListDescriptionUsingPOSTCreated, error)

	UpdateBenefitOptionListUsingPOST(params *UpdateBenefitOptionListUsingPOSTParams, opts ...ClientOption) (*UpdateBenefitOptionListUsingPOSTOK, *UpdateBenefitOptionListUsingPOSTCreated, error)

	UpdateDeleteBenefitRuleUsingPUT(params *UpdateDeleteBenefitRuleUsingPUTParams, opts ...ClientOption) (*UpdateDeleteBenefitRuleUsingPUTOK, *UpdateDeleteBenefitRuleUsingPUTCreated, error)

	UpdateEligibilityRuleUsingPUT(params *UpdateEligibilityRuleUsingPUTParams, opts ...ClientOption) (*UpdateEligibilityRuleUsingPUTOK, *UpdateEligibilityRuleUsingPUTCreated, error)

	UpdateEmployerUsingPUT(params *UpdateEmployerUsingPUTParams, opts ...ClientOption) (*UpdateEmployerUsingPUTOK, *UpdateEmployerUsingPUTCreated, error)

	UpdateEnhancedScalesAndPremiumSentencesUsingPUT(params *UpdateEnhancedScalesAndPremiumSentencesUsingPUTParams, opts ...ClientOption) (*UpdateEnhancedScalesAndPremiumSentencesUsingPUTOK, *UpdateEnhancedScalesAndPremiumSentencesUsingPUTCreated, error)

	UpdateExpenseRuleUsingPUT(params *UpdateExpenseRuleUsingPUTParams, opts ...ClientOption) (*UpdateExpenseRuleUsingPUTOK, *UpdateExpenseRuleUsingPUTCreated, error)

	UpdateMemberGroupBenefitOptionsUsingPUT(params *UpdateMemberGroupBenefitOptionsUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupBenefitOptionsUsingPUTOK, *UpdateMemberGroupBenefitOptionsUsingPUTCreated, error)

	UpdateMemberGroupInterfaceIDUsingPUT(params *UpdateMemberGroupInterfaceIDUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupInterfaceIDUsingPUTOK, *UpdateMemberGroupInterfaceIDUsingPUTCreated, error)

	UpdateMemberGroupOverrideUsingPUT(params *UpdateMemberGroupOverrideUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupOverrideUsingPUTOK, *UpdateMemberGroupOverrideUsingPUTCreated, error)

	UpdateMemberGroupStatusUsingPUT(params *UpdateMemberGroupStatusUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupStatusUsingPUTOK, *UpdateMemberGroupStatusUsingPUTCreated, error)

	UpdateMemberGroupTransferRuleUsingPUT(params *UpdateMemberGroupTransferRuleUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupTransferRuleUsingPUTOK, *UpdateMemberGroupTransferRuleUsingPUTCreated, error)

	UpdateMemberGroupUsingPUT1(params *UpdateMemberGroupUsingPUT1Params, opts ...ClientOption) (*UpdateMemberGroupUsingPUT1OK, *UpdateMemberGroupUsingPUT1Created, error)

	UpdatePolicyAssociatesUsingPUT(params *UpdatePolicyAssociatesUsingPUTParams, opts ...ClientOption) (*UpdatePolicyAssociatesUsingPUTOK, *UpdatePolicyAssociatesUsingPUTCreated, error)

	UpdatePolicyBenefitOptionsUsingPUT(params *UpdatePolicyBenefitOptionsUsingPUTParams, opts ...ClientOption) (*UpdatePolicyBenefitOptionsUsingPUTOK, *UpdatePolicyBenefitOptionsUsingPUTCreated, error)

	UpdatePolicyCommissionRuleUsingPUT(params *UpdatePolicyCommissionRuleUsingPUTParams, opts ...ClientOption) (*UpdatePolicyCommissionRuleUsingPUTOK, *UpdatePolicyCommissionRuleUsingPUTCreated, error)

	UpdatePolicyContactUsingPUT(params *UpdatePolicyContactUsingPUTParams, opts ...ClientOption) (*UpdatePolicyContactUsingPUTOK, *UpdatePolicyContactUsingPUTCreated, error)

	UpdatePolicyDateUsingPUT(params *UpdatePolicyDateUsingPUTParams, opts ...ClientOption) (*UpdatePolicyDateUsingPUTOK, *UpdatePolicyDateUsingPUTCreated, error)

	UpdatePolicyMemberGroupUsingPUT(params *UpdatePolicyMemberGroupUsingPUTParams, opts ...ClientOption) (*UpdatePolicyMemberGroupUsingPUTOK, *UpdatePolicyMemberGroupUsingPUTCreated, error)

	UpdatePolicyOptionsUsingPUT(params *UpdatePolicyOptionsUsingPUTParams, opts ...ClientOption) (*UpdatePolicyOptionsUsingPUTOK, *UpdatePolicyOptionsUsingPUTCreated, error)

	UpdatePolicyRatesUsingPUT(params *UpdatePolicyRatesUsingPUTParams, opts ...ClientOption) (*UpdatePolicyRatesUsingPUTOK, *UpdatePolicyRatesUsingPUTCreated, error)

	UpdatePolicyServiceRuleUsingPUT(params *UpdatePolicyServiceRuleUsingPUTParams, opts ...ClientOption) (*UpdatePolicyServiceRuleUsingPUTOK, *UpdatePolicyServiceRuleUsingPUTCreated, error)

	UpdateProcessingRuleUsingPUT(params *UpdateProcessingRuleUsingPUTParams, opts ...ClientOption) (*UpdateProcessingRuleUsingPUTOK, *UpdateProcessingRuleUsingPUTCreated, error)

	UpdateRiskBenefitTranchUsingPUT(params *UpdateRiskBenefitTranchUsingPUTParams, opts ...ClientOption) (*UpdateRiskBenefitTranchUsingPUTOK, *UpdateRiskBenefitTranchUsingPUTCreated, error)

	UpdateRiskRuleDetailUsingPUT(params *UpdateRiskRuleDetailUsingPUTParams, opts ...ClientOption) (*UpdateRiskRuleDetailUsingPUTOK, *UpdateRiskRuleDetailUsingPUTCreated, error)

	UpdateSalaryMaintenanceRuleUsingPUT(params *UpdateSalaryMaintenanceRuleUsingPUTParams, opts ...ClientOption) (*UpdateSalaryMaintenanceRuleUsingPUTOK, *UpdateSalaryMaintenanceRuleUsingPUTCreated, error)

	UpdateUnderwritingDataCodeUsingPUT(params *UpdateUnderwritingDataCodeUsingPUTParams, opts ...ClientOption) (*UpdateUnderwritingDataCodeUsingPUTOK, *UpdateUnderwritingDataCodeUsingPUTCreated, error)

	UpdateUnderwritingRulesUsingPUT(params *UpdateUnderwritingRulesUsingPUTParams, opts ...ClientOption) (*UpdateUnderwritingRulesUsingPUTOK, *UpdateUnderwritingRulesUsingPUTCreated, error)

	UpdpateAmountSelectionRuleUsingPUT(params *UpdpateAmountSelectionRuleUsingPUTParams, opts ...ClientOption) (*UpdpateAmountSelectionRuleUsingPUTOK, *UpdpateAmountSelectionRuleUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddMemberGroupOverrideUsingPOST adds sunlife us dc compassintegrationapplication service member group override

None
*/
func (a *Client) AddMemberGroupOverrideUsingPOST(params *AddMemberGroupOverrideUsingPOSTParams, opts ...ClientOption) (*AddMemberGroupOverrideUsingPOSTOK, *AddMemberGroupOverrideUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMemberGroupOverrideUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addMemberGroupOverrideUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/memberGroupOverride",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMemberGroupOverrideUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddMemberGroupOverrideUsingPOSTOK:
		return value, nil, nil
	case *AddMemberGroupOverrideUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddMemberGroupPackageSelectUsingPOST adds sunlife us dc compassintegrationapplication service member group package select

None
*/
func (a *Client) AddMemberGroupPackageSelectUsingPOST(params *AddMemberGroupPackageSelectUsingPOSTParams, opts ...ClientOption) (*AddMemberGroupPackageSelectUsingPOSTOK, *AddMemberGroupPackageSelectUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMemberGroupPackageSelectUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addMemberGroupPackageSelectUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/memberGroupPackageSelect",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMemberGroupPackageSelectUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddMemberGroupPackageSelectUsingPOSTOK:
		return value, nil, nil
	case *AddMemberGroupPackageSelectUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddMemberGroupUsingPOST adds sunlife us dc compassintegrationapplication service member group

None
*/
func (a *Client) AddMemberGroupUsingPOST(params *AddMemberGroupUsingPOSTParams, opts ...ClientOption) (*AddMemberGroupUsingPOSTOK, *AddMemberGroupUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddMemberGroupUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addMemberGroupUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/memberGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddMemberGroupUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddMemberGroupUsingPOSTOK:
		return value, nil, nil
	case *AddMemberGroupUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddPolicyBenefitStopLossUsingPOST sunlives us dc compassintegrationapplication service policy add a stop loss benefit method

None
*/
func (a *Client) AddPolicyBenefitStopLossUsingPOST(params *AddPolicyBenefitStopLossUsingPOSTParams, opts ...ClientOption) (*AddPolicyBenefitStopLossUsingPOSTOK, *AddPolicyBenefitStopLossUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPolicyBenefitStopLossUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPolicyBenefitStopLossUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/policyBenefit_StopLoss",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPolicyBenefitStopLossUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddPolicyBenefitStopLossUsingPOSTOK:
		return value, nil, nil
	case *AddPolicyBenefitStopLossUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddPolicyBenefitUsingPOST sunlives us dc compassintegrationapplication service policy add a benefit method

None
*/
func (a *Client) AddPolicyBenefitUsingPOST(params *AddPolicyBenefitUsingPOSTParams, opts ...ClientOption) (*AddPolicyBenefitUsingPOSTOK, *AddPolicyBenefitUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPolicyBenefitUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPolicyBenefitUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/policyBenefit",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPolicyBenefitUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddPolicyBenefitUsingPOSTOK:
		return value, nil, nil
	case *AddPolicyBenefitUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddProcessingRuleUsingPOST updates processing rule for a policy

None
*/
func (a *Client) AddProcessingRuleUsingPOST(params *AddProcessingRuleUsingPOSTParams, opts ...ClientOption) (*AddProcessingRuleUsingPOSTOK, *AddProcessingRuleUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProcessingRuleUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProcessingRuleUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/processingRules",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddProcessingRuleUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddProcessingRuleUsingPOSTOK:
		return value, nil, nil
	case *AddProcessingRuleUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddServicersUsingPOST adds servicer to sunlife us dc compassintegrationapplication service policy

None
*/
func (a *Client) AddServicersUsingPOST(params *AddServicersUsingPOSTParams, opts ...ClientOption) (*AddServicersUsingPOSTOK, *AddServicersUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddServicersUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addServicersUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/servicer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddServicersUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddServicersUsingPOSTOK:
		return value, nil, nil
	case *AddServicersUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddTpaPackageUsingPOST adds tpa package

None
*/
func (a *Client) AddTpaPackageUsingPOST(params *AddTpaPackageUsingPOSTParams, opts ...ClientOption) (*AddTpaPackageUsingPOSTOK, *AddTpaPackageUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTpaPackageUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTpaPackageUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/tpaPackage",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTpaPackageUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AddTpaPackageUsingPOSTOK:
		return value, nil, nil
	case *AddTpaPackageUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BillGroupDescriptionUsingGET gets a list of bill group descriptions given a bill group key set

None
*/
func (a *Client) BillGroupDescriptionUsingGET(params *BillGroupDescriptionUsingGETParams, opts ...ClientOption) (*BillGroupDescriptionUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBillGroupDescriptionUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "billGroupDescriptionUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/billGroupDescription",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.billgroupdescription.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BillGroupDescriptionUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BillGroupDescriptionUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for billGroupDescriptionUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancelBenefitOptionOverrideListUsingPOST cancels sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) CancelBenefitOptionOverrideListUsingPOST(params *CancelBenefitOptionOverrideListUsingPOSTParams, opts ...ClientOption) (*CancelBenefitOptionOverrideListUsingPOSTOK, *CancelBenefitOptionOverrideListUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelBenefitOptionOverrideListUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelBenefitOptionOverrideListUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionOverrideList/cancel",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelBenefitOptionOverrideListUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CancelBenefitOptionOverrideListUsingPOSTOK:
		return value, nil, nil
	case *CancelBenefitOptionOverrideListUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CancelPayrollAliasUsingGET cancels payroll alias method

None
*/
func (a *Client) CancelPayrollAliasUsingGET(params *CancelPayrollAliasUsingGETParams, opts ...ClientOption) (*CancelPayrollAliasUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelPayrollAliasUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelPayrollAliasUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/cancelPayrollAlias",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelPayrollAliasUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelPayrollAliasUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelPayrollAliasUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CopyMemberGroupOverrideUsingPOST copies sunlife us dc compassintegrationapplication service member group override

None
*/
func (a *Client) CopyMemberGroupOverrideUsingPOST(params *CopyMemberGroupOverrideUsingPOSTParams, opts ...ClientOption) (*CopyMemberGroupOverrideUsingPOSTOK, *CopyMemberGroupOverrideUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCopyMemberGroupOverrideUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "copyMemberGroupOverrideUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/memberGroupOverride/copy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CopyMemberGroupOverrideUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CopyMemberGroupOverrideUsingPOSTOK:
		return value, nil, nil
	case *CopyMemberGroupOverrideUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DepartmentInsertUsingPOST departments insert method

None
*/
func (a *Client) DepartmentInsertUsingPOST(params *DepartmentInsertUsingPOSTParams, opts ...ClientOption) (*DepartmentInsertUsingPOSTOK, *DepartmentInsertUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentInsertUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "departmentInsertUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/departmentInsert",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentInsertUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DepartmentInsertUsingPOSTOK:
		return value, nil, nil
	case *DepartmentInsertUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DepartmentMemberCountUsingGET gets a count of all members in a department

None
*/
func (a *Client) DepartmentMemberCountUsingGET(params *DepartmentMemberCountUsingGETParams, opts ...ClientOption) (*DepartmentMemberCountUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDepartmentMemberCountUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "departmentMemberCountUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/departmentMemberCount",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.departmentmembercount.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DepartmentMemberCountUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DepartmentMemberCountUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for departmentMemberCountUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExpireAssociatedCompensationEntitiesUsingPUT expires associated compensation entities
*/
func (a *Client) ExpireAssociatedCompensationEntitiesUsingPUT(params *ExpireAssociatedCompensationEntitiesUsingPUTParams, opts ...ClientOption) (*ExpireAssociatedCompensationEntitiesUsingPUTOK, *ExpireAssociatedCompensationEntitiesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpireAssociatedCompensationEntitiesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "expireAssociatedCompensationEntitiesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/expireAssociatedCompensationEntities",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExpireAssociatedCompensationEntitiesUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpireAssociatedCompensationEntitiesUsingPUTOK:
		return value, nil, nil
	case *ExpireAssociatedCompensationEntitiesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExpireDepartmentUsingPUT departments expire method

None
*/
func (a *Client) ExpireDepartmentUsingPUT(params *ExpireDepartmentUsingPUTParams, opts ...ClientOption) (*ExpireDepartmentUsingPUTOK, *ExpireDepartmentUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpireDepartmentUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "expireDepartmentUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/departmentExpire",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExpireDepartmentUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpireDepartmentUsingPUTOK:
		return value, nil, nil
	case *ExpireDepartmentUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExpirePolicyContactUsingPUT expires sunlife us dc compassintegrationapplication service policy contact

None
*/
func (a *Client) ExpirePolicyContactUsingPUT(params *ExpirePolicyContactUsingPUTParams, opts ...ClientOption) (*ExpirePolicyContactUsingPUTOK, *ExpirePolicyContactUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpirePolicyContactUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "expirePolicyContactUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyContact/expire",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExpirePolicyContactUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpirePolicyContactUsingPUTOK:
		return value, nil, nil
	case *ExpirePolicyContactUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExpireServicersUsingPUT updates servicer to sunlife us dc compassintegrationapplication service policy contact

None
*/
func (a *Client) ExpireServicersUsingPUT(params *ExpireServicersUsingPUTParams, opts ...ClientOption) (*ExpireServicersUsingPUTOK, *ExpireServicersUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExpireServicersUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "expireServicersUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/servicer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExpireServicersUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ExpireServicersUsingPUTOK:
		return value, nil, nil
	case *ExpireServicersUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBenefitOptionListAtMbgpUsingGET gets sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) GetBenefitOptionListAtMbgpUsingGET(params *GetBenefitOptionListAtMbgpUsingGETParams, opts ...ClientOption) (*GetBenefitOptionListAtMbgpUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBenefitOptionListAtMbgpUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBenefitOptionListAtMbgpUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionListAtMbgp",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBenefitOptionListAtMbgpUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBenefitOptionListAtMbgpUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBenefitOptionListAtMbgpUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBenefitOptionListAtPolicyUsingGET gets sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) GetBenefitOptionListAtPolicyUsingGET(params *GetBenefitOptionListAtPolicyUsingGETParams, opts ...ClientOption) (*GetBenefitOptionListAtPolicyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBenefitOptionListAtPolicyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBenefitOptionListAtPolicyUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionListAtPolicy",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBenefitOptionListAtPolicyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBenefitOptionListAtPolicyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBenefitOptionListAtPolicyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBenefitOptionListUsingGET gets sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) GetBenefitOptionListUsingGET(params *GetBenefitOptionListUsingGETParams, opts ...ClientOption) (*GetBenefitOptionListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBenefitOptionListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBenefitOptionListUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionList/{policyNumber}/{memberGroupDescription}/{benefitParentDescription}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBenefitOptionListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBenefitOptionListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBenefitOptionListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBenefitOptionListUsingGET1 gets sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) GetBenefitOptionListUsingGET1(params *GetBenefitOptionListUsingGET1Params, opts ...ClientOption) (*GetBenefitOptionListUsingGET1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBenefitOptionListUsingGET1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBenefitOptionListUsingGET_1",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionList/{policyNumber}/{memberGroupDescription}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBenefitOptionListUsingGET1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBenefitOptionListUsingGET1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBenefitOptionListUsingGET_1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBenefitOptionListUsingGET2 gets sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) GetBenefitOptionListUsingGET2(params *GetBenefitOptionListUsingGET2Params, opts ...ClientOption) (*GetBenefitOptionListUsingGET2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBenefitOptionListUsingGET2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBenefitOptionListUsingGET_2",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionList/{policyNumber}",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBenefitOptionListUsingGET2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBenefitOptionListUsingGET2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBenefitOptionListUsingGET_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBenefitPackagesUsingGET sunlives us dc compassintegrationapplication service policy sunlife us dc compassintegrationapplication service benefit packages method

None
*/
func (a *Client) GetBenefitPackagesUsingGET(params *GetBenefitPackagesUsingGETParams, opts ...ClientOption) (*GetBenefitPackagesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBenefitPackagesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBenefitPackagesUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/benefitpackages",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBenefitPackagesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBenefitPackagesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBenefitPackagesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillDetailUsingGET gets bills detail method

None
*/
func (a *Client) GetBillDetailUsingGET(params *GetBillDetailUsingGETParams, opts ...ClientOption) (*GetBillDetailUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillDetailUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillDetailUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/billDetail",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillDetailUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillDetailUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillDetailUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillGroupRuleUsingGET gets sunlife us dc compassintegrationapplication service bill group rule method

None
*/
func (a *Client) GetBillGroupRuleUsingGET(params *GetBillGroupRuleUsingGETParams, opts ...ClientOption) (*GetBillGroupRuleUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillGroupRuleUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillGroupRuleUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/billGroupRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillGroupRuleUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillGroupRuleUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillGroupRuleUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillGroupUsingGET gets sunlife us dc compassintegrationapplication service bill group method

None
*/
func (a *Client) GetBillGroupUsingGET(params *GetBillGroupUsingGETParams, opts ...ClientOption) (*GetBillGroupUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillGroupUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillGroupUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/billGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillGroupUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillGroupUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillGroupUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBillsListUsingGET gets bills list method

None
*/
func (a *Client) GetBillsListUsingGET(params *GetBillsListUsingGETParams, opts ...ClientOption) (*GetBillsListUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillsListUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillsListUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/billsList",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBillsListUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillsListUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillsListUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEDXPolicyAgentInfoUsingGET gets e d x sunlife us dc compassintegrationapplication service policy sunlife us dc compassintegrationapplication service agent method

None
*/
func (a *Client) GetEDXPolicyAgentInfoUsingGET(params *GetEDXPolicyAgentInfoUsingGETParams, opts ...ClientOption) (*GetEDXPolicyAgentInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEDXPolicyAgentInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEDXPolicyAgentInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/edxPolicyAgent",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.edxpolicyrep.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEDXPolicyAgentInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEDXPolicyAgentInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEDXPolicyAgentInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFineosBeneInfoUsingGET fineos bene info method

None
*/
func (a *Client) GetFineosBeneInfoUsingGET(params *GetFineosBeneInfoUsingGETParams, opts ...ClientOption) (*GetFineosBeneInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFineosBeneInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFineosBeneInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/fineosBeneInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFineosBeneInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFineosBeneInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFineosBeneInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetLapseStatusUsingGET sunlives us dc compassintegrationapplication service policy lapse status method

None
*/
func (a *Client) GetLapseStatusUsingGET(params *GetLapseStatusUsingGETParams, opts ...ClientOption) (*GetLapseStatusUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLapseStatusUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLapseStatusUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/lapseStatus",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLapseStatusUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLapseStatusUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLapseStatusUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMemberGroupBenefitOptionsUsingGET gets the sunlife us dc compassintegrationapplication service member group sunlife us dc compassintegrationapplication service benefit level options for the given policy number member group description and benefit parent description

None
*/
func (a *Client) GetMemberGroupBenefitOptionsUsingGET(params *GetMemberGroupBenefitOptionsUsingGETParams, opts ...ClientOption) (*GetMemberGroupBenefitOptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMemberGroupBenefitOptionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMemberGroupBenefitOptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/memberGroupBenefitOptions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMemberGroupBenefitOptionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMemberGroupBenefitOptionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMemberGroupBenefitOptionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNextBillDueDateUsingGET gets next sunlife us dc compassintegrationapplication service bill due date method

None
*/
func (a *Client) GetNextBillDueDateUsingGET(params *GetNextBillDueDateUsingGETParams, opts ...ClientOption) (*GetNextBillDueDateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNextBillDueDateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNextBillDueDateUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/nextBillDueDt",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNextBillDueDateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNextBillDueDateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNextBillDueDateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPaidToDateUsingGET gets paid to date method

None
*/
func (a *Client) GetPaidToDateUsingGET(params *GetPaidToDateUsingGETParams, opts ...ClientOption) (*GetPaidToDateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPaidToDateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPaidToDateUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/paidToDate",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.paidtodate.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPaidToDateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPaidToDateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPaidToDateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyEffectiveDateUsingGET sunlives us dc compassintegrationapplication service policy effective date method

None
*/
func (a *Client) GetPolicyEffectiveDateUsingGET(params *GetPolicyEffectiveDateUsingGETParams, opts ...ClientOption) (*GetPolicyEffectiveDateUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyEffectiveDateUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyEffectiveDateUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/policyEffectiveDate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyEffectiveDateUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyEffectiveDateUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyEffectiveDateUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyForAmendmentUsingGET sunlives us dc compassintegrationapplication service policy info method

None
*/
func (a *Client) GetPolicyForAmendmentUsingGET(params *GetPolicyForAmendmentUsingGETParams, opts ...ClientOption) (*GetPolicyForAmendmentUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyForAmendmentUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyForAmendmentUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/policyInfoForAmendment",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyForAmendmentUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyForAmendmentUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyForAmendmentUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPolicyForInstallUsingGET sunlives us dc compassintegrationapplication service policy info method

None
*/
func (a *Client) GetPolicyForInstallUsingGET(params *GetPolicyForInstallUsingGETParams, opts ...ClientOption) (*GetPolicyForInstallUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyForInstallUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyForInstallUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/policyForInstallInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyForInstallUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyForInstallUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyForInstallUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPolicyUsingGET returns policy information for a date

	Please see below flag table, if need more than one type of data then please sum its value and enter in flag parameter.

<table border='1' style='border-collapse: collapse;'><tr><th>Flag</th><th>Value</th></tr><tr><td>NONE</td><td>0</td></tr><tr><td>DATES</td><td>1</td></tr><tr><td>POLICY_HOLDER</td><td>2</td></tr><tr><td>BEN_OPTS</td><td>4</td></tr><tr><td>MEMBER_GROUPS</td><td>8</td></tr><tr><td>BILL_GROUPS</td><td>16</td></tr><tr><td>MEMBER_GROUP_BENEFITS</td><td>32</td></tr><tr><td>ENHANCED_RATES</td><td>64</td></tr><tr><td>INSTALL_STATUS</td><td>128</td></tr><tr><td>FUTURE_CONVERSION_DATE</td><td>256</td></tr><tr><td>ADMIN_CONTACTS</td><td>512</td></tr><tr><td>BENEFIT_TYPE_GROUP</td><td>1024</td></tr><tr><td>PRODUCT_TYPE_GROUP</td><td>2048</td></tr><tr><td>DENTAL_TYPE</td><td>4096</td></tr><tr><td>NOTES</td><td>8192</td></tr><tr><td>GROUP_ALIASES</td><td>16384</td></tr><tr><td>FUNDING_TYPE</td><td>32768</td></tr><tr><td>PAID_TO_DATE</td><td>65536</td></tr><tr><td>AGENT_INFO</td><td>131072</td></tr><tr><td>CARE_COVERAGES</td><td>262144</td></tr><tr><td>BENEFIT_BEN_OPTS</td><td>524288</td></tr><tr><td>BENEFIT_DETERMINATION_TYPE</td><td>1048576</td></tr></table>
*/
func (a *Client) GetPolicyUsingGET(params *GetPolicyUsingGETParams, opts ...ClientOption) (*GetPolicyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPolicyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPolicyUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/policyInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPolicyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPolicyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPolicyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPortabilityRulesUsingGET gets portability rules for a given policy

None
*/
func (a *Client) GetPortabilityRulesUsingGET(params *GetPortabilityRulesUsingGETParams, opts ...ClientOption) (*GetPortabilityRulesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPortabilityRulesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPortabilityRulesUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/portabilityRules",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.portabilityrules.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPortabilityRulesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPortabilityRulesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPortabilityRulesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPremiumLivesRptUsingGET gets premium lives report for a policy and duration

None
*/
func (a *Client) GetPremiumLivesRptUsingGET(params *GetPremiumLivesRptUsingGETParams, opts ...ClientOption) (*GetPremiumLivesRptUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPremiumLivesRptUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPremiumLivesRptUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/premiumLivesRpt",
		ProducesMediaTypes: []string{"application/aeb.cia.jsn", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPremiumLivesRptUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPremiumLivesRptUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPremiumLivesRptUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProcessingRuleUsingGET gets processing rule for a policy

None
*/
func (a *Client) GetProcessingRuleUsingGET(params *GetProcessingRuleUsingGETParams, opts ...ClientOption) (*GetProcessingRuleUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProcessingRuleUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProcessingRuleUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/processingRules",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetProcessingRuleUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProcessingRuleUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProcessingRuleUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServicersUsingGET gets servicer method

None
*/
func (a *Client) GetServicersUsingGET(params *GetServicersUsingGETParams, opts ...ClientOption) (*GetServicersUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicersUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServicersUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/servicer",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.servicers.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicersUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicersUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServicersUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAssociatedCompensationEntitiesUsingPOST inserts associated compensation entities
*/
func (a *Client) InsertAssociatedCompensationEntitiesUsingPOST(params *InsertAssociatedCompensationEntitiesUsingPOSTParams, opts ...ClientOption) (*InsertAssociatedCompensationEntitiesUsingPOSTOK, *InsertAssociatedCompensationEntitiesUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAssociatedCompensationEntitiesUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAssociatedCompensationEntitiesUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/insertAssociatedCompensationEntities",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAssociatedCompensationEntitiesUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAssociatedCompensationEntitiesUsingPOSTOK:
		return value, nil, nil
	case *InsertAssociatedCompensationEntitiesUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertBenefitOptionListUsingPUT inserts scheme level benefit options

None
*/
func (a *Client) InsertBenefitOptionListUsingPUT(params *InsertBenefitOptionListUsingPUTParams, opts ...ClientOption) (*InsertBenefitOptionListUsingPUTOK, *InsertBenefitOptionListUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertBenefitOptionListUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertBenefitOptionListUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionList",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertBenefitOptionListUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertBenefitOptionListUsingPUTOK:
		return value, nil, nil
	case *InsertBenefitOptionListUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertBenefitOptionOverrideListUsingPUT inserts scheme level benefit options

None
*/
func (a *Client) InsertBenefitOptionOverrideListUsingPUT(params *InsertBenefitOptionOverrideListUsingPUTParams, opts ...ClientOption) (*InsertBenefitOptionOverrideListUsingPUTOK, *InsertBenefitOptionOverrideListUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertBenefitOptionOverrideListUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertBenefitOptionOverrideListUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionOverrideList",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertBenefitOptionOverrideListUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertBenefitOptionOverrideListUsingPUTOK:
		return value, nil, nil
	case *InsertBenefitOptionOverrideListUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertMemberGroupTransferRuleUsingPOST inserts member group transfer rule
*/
func (a *Client) InsertMemberGroupTransferRuleUsingPOST(params *InsertMemberGroupTransferRuleUsingPOSTParams, opts ...ClientOption) (*InsertMemberGroupTransferRuleUsingPOSTOK, *InsertMemberGroupTransferRuleUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertMemberGroupTransferRuleUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertMemberGroupTransferRuleUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/memberGroupTransferRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertMemberGroupTransferRuleUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertMemberGroupTransferRuleUsingPOSTOK:
		return value, nil, nil
	case *InsertMemberGroupTransferRuleUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPayrollAliasUsingGET inserts payroll alias method

None
*/
func (a *Client) InsertPayrollAliasUsingGET(params *InsertPayrollAliasUsingGETParams, opts ...ClientOption) (*InsertPayrollAliasUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPayrollAliasUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPayrollAliasUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/insertPayrollAlias",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertPayrollAliasUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InsertPayrollAliasUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for insertPayrollAliasUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPolicyContactUsingPOST adds sunlife us dc compassintegrationapplication service policy contact

None
*/
func (a *Client) InsertPolicyContactUsingPOST(params *InsertPolicyContactUsingPOSTParams, opts ...ClientOption) (*InsertPolicyContactUsingPOSTOK, *InsertPolicyContactUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPolicyContactUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPolicyContactUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/policyContact",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertPolicyContactUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPolicyContactUsingPOSTOK:
		return value, nil, nil
	case *InsertPolicyContactUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertPolicyDateUsingPOST inserts sunlife us dc compassintegrationapplication service policy associated c a s e d a t e records

None
*/
func (a *Client) InsertPolicyDateUsingPOST(params *InsertPolicyDateUsingPOSTParams, opts ...ClientOption) (*InsertPolicyDateUsingPOSTOK, *InsertPolicyDateUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertPolicyDateUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertPolicyDateUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/policyDate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertPolicyDateUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertPolicyDateUsingPOSTOK:
		return value, nil, nil
	case *InsertPolicyDateUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstallBenefitUsingPOST installs benefit of the policy as a new scheme in c o m p a s s

None
*/
func (a *Client) InstallBenefitUsingPOST(params *InstallBenefitUsingPOSTParams, opts ...ClientOption) (*InstallBenefitUsingPOSTOK, *InstallBenefitUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallBenefitUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installBenefitUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/installBenefit",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallBenefitUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InstallBenefitUsingPOSTOK:
		return value, nil, nil
	case *InstallBenefitUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstallMemberGroupRulesUsingPUT installs sunlife us dc compassintegrationapplication service member group rules

None
*/
func (a *Client) InstallMemberGroupRulesUsingPUT(params *InstallMemberGroupRulesUsingPUTParams, opts ...ClientOption) (*InstallMemberGroupRulesUsingPUTOK, *InstallMemberGroupRulesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallMemberGroupRulesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installMemberGroupRulesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/installMemberGroupRules",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallMemberGroupRulesUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InstallMemberGroupRulesUsingPUTOK:
		return value, nil, nil
	case *InstallMemberGroupRulesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstallPolicyUsingPOST installs the policy as a new scheme in c o m p a s s

None
*/
func (a *Client) InstallPolicyUsingPOST(params *InstallPolicyUsingPOSTParams, opts ...ClientOption) (*InstallPolicyUsingPOSTOK, *InstallPolicyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallPolicyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installPolicyUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/installPolicy",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallPolicyUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InstallPolicyUsingPOSTOK:
		return value, nil, nil
	case *InstallPolicyUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PayrollAliasUsingGET payrolls alias method

None
*/
func (a *Client) PayrollAliasUsingGET(params *PayrollAliasUsingGETParams, opts ...ClientOption) (*PayrollAliasUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPayrollAliasUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "payrollAliasUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/payrollAlias",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PayrollAliasUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PayrollAliasUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for payrollAliasUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PolicyBenefitOptionsUsingGET gets a list of the policy benefits options for the given label alias name set

None
*/
func (a *Client) PolicyBenefitOptionsUsingGET(params *PolicyBenefitOptionsUsingGETParams, opts ...ClientOption) (*PolicyBenefitOptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyBenefitOptionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "policyBenefitOptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/policyBenefitOptions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyBenefitOptionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyBenefitOptionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policyBenefitOptionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PolicyLevelOptionsUsingGET gets the policy level options for the given policy number

None
*/
func (a *Client) PolicyLevelOptionsUsingGET(params *PolicyLevelOptionsUsingGETParams, opts ...ClientOption) (*PolicyLevelOptionsUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPolicyLevelOptionsUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "policyLevelOptionsUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/policyOptions",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.get.billgroupdescription.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PolicyLevelOptionsUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PolicyLevelOptionsUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policyLevelOptionsUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProcessMemberGroupPolicyMaintenanceUsingPUT processes member group policy maintenance
*/
func (a *Client) ProcessMemberGroupPolicyMaintenanceUsingPUT(params *ProcessMemberGroupPolicyMaintenanceUsingPUTParams, opts ...ClientOption) (*ProcessMemberGroupPolicyMaintenanceUsingPUTOK, *ProcessMemberGroupPolicyMaintenanceUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessMemberGroupPolicyMaintenanceUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "processMemberGroupPolicyMaintenanceUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/processMemberGroupPolicyMaintenance",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessMemberGroupPolicyMaintenanceUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProcessMemberGroupPolicyMaintenanceUsingPUTOK:
		return value, nil, nil
	case *ProcessMemberGroupPolicyMaintenanceUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProcessRenewalPeriodUsingPUT updates rate gaurentee process renewal period

None
*/
func (a *Client) ProcessRenewalPeriodUsingPUT(params *ProcessRenewalPeriodUsingPUTParams, opts ...ClientOption) (*ProcessRenewalPeriodUsingPUTOK, *ProcessRenewalPeriodUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessRenewalPeriodUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "processRenewalPeriodUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/processRenewalPeriod",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessRenewalPeriodUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProcessRenewalPeriodUsingPUTOK:
		return value, nil, nil
	case *ProcessRenewalPeriodUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ProcessSchemePolicyMaintenanceUsingPUT processes scheme policy maintenance
*/
func (a *Client) ProcessSchemePolicyMaintenanceUsingPUT(params *ProcessSchemePolicyMaintenanceUsingPUTParams, opts ...ClientOption) (*ProcessSchemePolicyMaintenanceUsingPUTOK, *ProcessSchemePolicyMaintenanceUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProcessSchemePolicyMaintenanceUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "processSchemePolicyMaintenanceUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/processSchemePolicyMaintenance",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ProcessSchemePolicyMaintenanceUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProcessSchemePolicyMaintenanceUsingPUTOK:
		return value, nil, nil
	case *ProcessSchemePolicyMaintenanceUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestReallocationUsingPOST adds policy reallocation

None
*/
func (a *Client) RequestReallocationUsingPOST(params *RequestReallocationUsingPOSTParams, opts ...ClientOption) (*RequestReallocationUsingPOSTOK, *RequestReallocationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestReallocationUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestReallocationUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/reallocation",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestReallocationUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RequestReallocationUsingPOSTOK:
		return value, nil, nil
	case *RequestReallocationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPolicyInfoUsingGET searches policy info method

None
*/
func (a *Client) SearchPolicyInfoUsingGET(params *SearchPolicyInfoUsingGETParams, opts ...ClientOption) (*SearchPolicyInfoUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPolicyInfoUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchPolicyInfoUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/searchPolicyInfo",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPolicyInfoUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPolicyInfoUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchPolicyInfoUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchPolicyUsingGET sunlives us dc compassintegrationapplication service policy search method

None
*/
func (a *Client) SearchPolicyUsingGET(params *SearchPolicyUsingGETParams, opts ...ClientOption) (*SearchPolicyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchPolicyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchPolicyUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/policy/search",
		ProducesMediaTypes: []string{"application/aeb.cas.policy.search.v1+xml", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchPolicyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchPolicyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchPolicyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAmendmentHoldUsingPUT updates sunlife us dc compassintegrationapplication service policy amendment hold

None
*/
func (a *Client) UpdateAmendmentHoldUsingPUT(params *UpdateAmendmentHoldUsingPUTParams, opts ...ClientOption) (*UpdateAmendmentHoldUsingPUTOK, *UpdateAmendmentHoldUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAmendmentHoldUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAmendmentHoldUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updateAmendmentHold",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAmendmentHoldUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAmendmentHoldUsingPUTOK:
		return value, nil, nil
	case *UpdateAmendmentHoldUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBasicPolicyDetailsUsingPUT updates basic sunlife us dc compassintegrationapplication service policy details

None
*/
func (a *Client) UpdateBasicPolicyDetailsUsingPUT(params *UpdateBasicPolicyDetailsUsingPUTParams, opts ...ClientOption) (*UpdateBasicPolicyDetailsUsingPUTOK, *UpdateBasicPolicyDetailsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBasicPolicyDetailsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBasicPolicyDetailsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updateBasicPolicyDetails",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBasicPolicyDetailsUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBasicPolicyDetailsUsingPUTOK:
		return value, nil, nil
	case *UpdateBasicPolicyDetailsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBenefitOptionListDescriptionUsingPOST updates sunlife us dc compassintegrationapplication service benefit option list description method

None
*/
func (a *Client) UpdateBenefitOptionListDescriptionUsingPOST(params *UpdateBenefitOptionListDescriptionUsingPOSTParams, opts ...ClientOption) (*UpdateBenefitOptionListDescriptionUsingPOSTOK, *UpdateBenefitOptionListDescriptionUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBenefitOptionListDescriptionUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBenefitOptionListDescriptionUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionList/updateDescription",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBenefitOptionListDescriptionUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBenefitOptionListDescriptionUsingPOSTOK:
		return value, nil, nil
	case *UpdateBenefitOptionListDescriptionUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBenefitOptionListUsingPOST updates sunlife us dc compassintegrationapplication service benefit option list method

None
*/
func (a *Client) UpdateBenefitOptionListUsingPOST(params *UpdateBenefitOptionListUsingPOSTParams, opts ...ClientOption) (*UpdateBenefitOptionListUsingPOSTOK, *UpdateBenefitOptionListUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBenefitOptionListUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateBenefitOptionListUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/policy/benefitOptionList",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBenefitOptionListUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateBenefitOptionListUsingPOSTOK:
		return value, nil, nil
	case *UpdateBenefitOptionListUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDeleteBenefitRuleUsingPUT updates delete benefit rule

None
*/
func (a *Client) UpdateDeleteBenefitRuleUsingPUT(params *UpdateDeleteBenefitRuleUsingPUTParams, opts ...ClientOption) (*UpdateDeleteBenefitRuleUsingPUTOK, *UpdateDeleteBenefitRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDeleteBenefitRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDeleteBenefitRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyServiceRule/updateDeleteBenefitRule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDeleteBenefitRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateDeleteBenefitRuleUsingPUTOK:
		return value, nil, nil
	case *UpdateDeleteBenefitRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEligibilityRuleUsingPUT updates sunlife us dc compassintegrationapplication service policy eligibility rule

None
*/
func (a *Client) UpdateEligibilityRuleUsingPUT(params *UpdateEligibilityRuleUsingPUTParams, opts ...ClientOption) (*UpdateEligibilityRuleUsingPUTOK, *UpdateEligibilityRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEligibilityRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEligibilityRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/eligibilityRule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEligibilityRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEligibilityRuleUsingPUTOK:
		return value, nil, nil
	case *UpdateEligibilityRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEmployerUsingPUT updates employer

None
*/
func (a *Client) UpdateEmployerUsingPUT(params *UpdateEmployerUsingPUTParams, opts ...ClientOption) (*UpdateEmployerUsingPUTOK, *UpdateEmployerUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmployerUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEmployerUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/employer",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEmployerUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEmployerUsingPUTOK:
		return value, nil, nil
	case *UpdateEmployerUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEnhancedScalesAndPremiumSentencesUsingPUT updates enhanced scales and premium sentences

None
*/
func (a *Client) UpdateEnhancedScalesAndPremiumSentencesUsingPUT(params *UpdateEnhancedScalesAndPremiumSentencesUsingPUTParams, opts ...ClientOption) (*UpdateEnhancedScalesAndPremiumSentencesUsingPUTOK, *UpdateEnhancedScalesAndPremiumSentencesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEnhancedScalesAndPremiumSentencesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEnhancedScalesAndPremiumSentencesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/enhancedScalesAndPremiumSentences",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEnhancedScalesAndPremiumSentencesUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateEnhancedScalesAndPremiumSentencesUsingPUTOK:
		return value, nil, nil
	case *UpdateEnhancedScalesAndPremiumSentencesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateExpenseRuleUsingPUT updates expense rule
*/
func (a *Client) UpdateExpenseRuleUsingPUT(params *UpdateExpenseRuleUsingPUTParams, opts ...ClientOption) (*UpdateExpenseRuleUsingPUTOK, *UpdateExpenseRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExpenseRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateExpenseRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updateExpenseRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateExpenseRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateExpenseRuleUsingPUTOK:
		return value, nil, nil
	case *UpdateExpenseRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupBenefitOptionsUsingPUT updates sunlife us dc compassintegrationapplication service member group sunlife us dc compassintegrationapplication service benefit level option details

None
*/
func (a *Client) UpdateMemberGroupBenefitOptionsUsingPUT(params *UpdateMemberGroupBenefitOptionsUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupBenefitOptionsUsingPUTOK, *UpdateMemberGroupBenefitOptionsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupBenefitOptionsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupBenefitOptionsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/memberGroupBenefitOptions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupBenefitOptionsUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupBenefitOptionsUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGroupBenefitOptionsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupInterfaceIDUsingPUT updates sunlife us dc compassintegrationapplication service member group interface Id

None
*/
func (a *Client) UpdateMemberGroupInterfaceIDUsingPUT(params *UpdateMemberGroupInterfaceIDUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupInterfaceIDUsingPUTOK, *UpdateMemberGroupInterfaceIDUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupInterfaceIDUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupInterfaceIdUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/memberGroup/interfaceId",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupInterfaceIDUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupInterfaceIDUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGroupInterfaceIDUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupOverrideUsingPUT adds sunlife us dc compassintegrationapplication service member group override

None
*/
func (a *Client) UpdateMemberGroupOverrideUsingPUT(params *UpdateMemberGroupOverrideUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupOverrideUsingPUTOK, *UpdateMemberGroupOverrideUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupOverrideUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupOverrideUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/memberGroupOverride",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupOverrideUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupOverrideUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGroupOverrideUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupStatusUsingPUT updates sunlife us dc compassintegrationapplication service member group status

None
*/
func (a *Client) UpdateMemberGroupStatusUsingPUT(params *UpdateMemberGroupStatusUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupStatusUsingPUTOK, *UpdateMemberGroupStatusUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupStatusUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupStatusUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/memberGroup/status",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupStatusUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupStatusUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGroupStatusUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupTransferRuleUsingPUT updates member group transfer rule
*/
func (a *Client) UpdateMemberGroupTransferRuleUsingPUT(params *UpdateMemberGroupTransferRuleUsingPUTParams, opts ...ClientOption) (*UpdateMemberGroupTransferRuleUsingPUTOK, *UpdateMemberGroupTransferRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupTransferRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupTransferRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/memberGroupTransferRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupTransferRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupTransferRuleUsingPUTOK:
		return value, nil, nil
	case *UpdateMemberGroupTransferRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMemberGroupUsingPUT1 updates sunlife us dc compassintegrationapplication service member group

None
*/
func (a *Client) UpdateMemberGroupUsingPUT1(params *UpdateMemberGroupUsingPUT1Params, opts ...ClientOption) (*UpdateMemberGroupUsingPUT1OK, *UpdateMemberGroupUsingPUT1Created, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMemberGroupUsingPUT1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMemberGroupUsingPUT_1",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/memberGroup",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMemberGroupUsingPUT1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateMemberGroupUsingPUT1OK:
		return value, nil, nil
	case *UpdateMemberGroupUsingPUT1Created:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyAssociatesUsingPUT updates sunlife us dc compassintegrationapplication service policy associates method

None
*/
func (a *Client) UpdatePolicyAssociatesUsingPUT(params *UpdatePolicyAssociatesUsingPUTParams, opts ...ClientOption) (*UpdatePolicyAssociatesUsingPUTOK, *UpdatePolicyAssociatesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyAssociatesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyAssociatesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updatePolicyAssociates",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyAssociatesUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyAssociatesUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyAssociatesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyBenefitOptionsUsingPUT updates sunlife us dc compassintegrationapplication service policy benefit options

None
*/
func (a *Client) UpdatePolicyBenefitOptionsUsingPUT(params *UpdatePolicyBenefitOptionsUsingPUTParams, opts ...ClientOption) (*UpdatePolicyBenefitOptionsUsingPUTOK, *UpdatePolicyBenefitOptionsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyBenefitOptionsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyBenefitOptionsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyBenefitOptions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyBenefitOptionsUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyBenefitOptionsUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyBenefitOptionsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyCommissionRuleUsingPUT updates sunlife us dc compassintegrationapplication service policy commission rule

None
*/
func (a *Client) UpdatePolicyCommissionRuleUsingPUT(params *UpdatePolicyCommissionRuleUsingPUTParams, opts ...ClientOption) (*UpdatePolicyCommissionRuleUsingPUTOK, *UpdatePolicyCommissionRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyCommissionRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyCommissionRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updatePolicyCommissionRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyCommissionRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyCommissionRuleUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyCommissionRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyContactUsingPUT updates sunlife us dc compassintegrationapplication service policy contact

None
*/
func (a *Client) UpdatePolicyContactUsingPUT(params *UpdatePolicyContactUsingPUTParams, opts ...ClientOption) (*UpdatePolicyContactUsingPUTOK, *UpdatePolicyContactUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyContactUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyContactUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyContact/update",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyContactUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyContactUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyContactUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyDateUsingPUT updates sunlife us dc compassintegrationapplication service policy date

None
*/
func (a *Client) UpdatePolicyDateUsingPUT(params *UpdatePolicyDateUsingPUTParams, opts ...ClientOption) (*UpdatePolicyDateUsingPUTOK, *UpdatePolicyDateUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyDateUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyDateUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyDate",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyDateUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyDateUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyDateUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyMemberGroupUsingPUT updates sunlife us dc compassintegrationapplication service policy sunlife us dc compassintegrationapplication service member group

None
*/
func (a *Client) UpdatePolicyMemberGroupUsingPUT(params *UpdatePolicyMemberGroupUsingPUTParams, opts ...ClientOption) (*UpdatePolicyMemberGroupUsingPUTOK, *UpdatePolicyMemberGroupUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyMemberGroupUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyMemberGroupUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updatePolicyMemberGroup",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyMemberGroupUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyMemberGroupUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyMemberGroupUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyOptionsUsingPUT updates basic sunlife us dc compassintegrationapplication service policy details

None
*/
func (a *Client) UpdatePolicyOptionsUsingPUT(params *UpdatePolicyOptionsUsingPUTParams, opts ...ClientOption) (*UpdatePolicyOptionsUsingPUTOK, *UpdatePolicyOptionsUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyOptionsUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyOptionsUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyOptions",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyOptionsUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyOptionsUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyOptionsUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyRatesUsingPUT updates basic sunlife us dc compassintegrationapplication service policy details

None
*/
func (a *Client) UpdatePolicyRatesUsingPUT(params *UpdatePolicyRatesUsingPUTParams, opts ...ClientOption) (*UpdatePolicyRatesUsingPUTOK, *UpdatePolicyRatesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyRatesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyRatesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/updatePolicyRates",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyRatesUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyRatesUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyRatesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePolicyServiceRuleUsingPUT updates delete benefit rule or update amount selection rule

None
*/
func (a *Client) UpdatePolicyServiceRuleUsingPUT(params *UpdatePolicyServiceRuleUsingPUTParams, opts ...ClientOption) (*UpdatePolicyServiceRuleUsingPUTOK, *UpdatePolicyServiceRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePolicyServiceRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updatePolicyServiceRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyServiceRule/updatePolicyServiceRule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePolicyServiceRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdatePolicyServiceRuleUsingPUTOK:
		return value, nil, nil
	case *UpdatePolicyServiceRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProcessingRuleUsingPUT updates processing rule for a policy

None
*/
func (a *Client) UpdateProcessingRuleUsingPUT(params *UpdateProcessingRuleUsingPUTParams, opts ...ClientOption) (*UpdateProcessingRuleUsingPUTOK, *UpdateProcessingRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProcessingRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProcessingRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/processingRules",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateProcessingRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProcessingRuleUsingPUTOK:
		return value, nil, nil
	case *UpdateProcessingRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRiskBenefitTranchUsingPUT updates risk sunlife us dc compassintegrationapplication service benefit sentences for policy and member group benefits

None
*/
func (a *Client) UpdateRiskBenefitTranchUsingPUT(params *UpdateRiskBenefitTranchUsingPUTParams, opts ...ClientOption) (*UpdateRiskBenefitTranchUsingPUTOK, *UpdateRiskBenefitTranchUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRiskBenefitTranchUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRiskBenefitTranchUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/riskBenefitTranch",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRiskBenefitTranchUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateRiskBenefitTranchUsingPUTOK:
		return value, nil, nil
	case *UpdateRiskBenefitTranchUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRiskRuleDetailUsingPUT updates risk rule for policy and member group benefits

None
*/
func (a *Client) UpdateRiskRuleDetailUsingPUT(params *UpdateRiskRuleDetailUsingPUTParams, opts ...ClientOption) (*UpdateRiskRuleDetailUsingPUTOK, *UpdateRiskRuleDetailUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRiskRuleDetailUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRiskRuleDetailUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/riskRuleDetail",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateRiskRuleDetailUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateRiskRuleDetailUsingPUTOK:
		return value, nil, nil
	case *UpdateRiskRuleDetailUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSalaryMaintenanceRuleUsingPUT updates salary maintenance rule

None
*/
func (a *Client) UpdateSalaryMaintenanceRuleUsingPUT(params *UpdateSalaryMaintenanceRuleUsingPUTParams, opts ...ClientOption) (*UpdateSalaryMaintenanceRuleUsingPUTOK, *UpdateSalaryMaintenanceRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSalaryMaintenanceRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSalaryMaintenanceRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/salaryMaintenanceRule",
		ProducesMediaTypes: []string{"application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSalaryMaintenanceRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateSalaryMaintenanceRuleUsingPUTOK:
		return value, nil, nil
	case *UpdateSalaryMaintenanceRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUnderwritingDataCodeUsingPUT updates underwriting data code for policy and member group benefits

None
*/
func (a *Client) UpdateUnderwritingDataCodeUsingPUT(params *UpdateUnderwritingDataCodeUsingPUTParams, opts ...ClientOption) (*UpdateUnderwritingDataCodeUsingPUTOK, *UpdateUnderwritingDataCodeUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUnderwritingDataCodeUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUnderwritingDataCodeUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/underwritingDataCode",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUnderwritingDataCodeUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUnderwritingDataCodeUsingPUTOK:
		return value, nil, nil
	case *UpdateUnderwritingDataCodeUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUnderwritingRulesUsingPUT updates underwriting rules

None
*/
func (a *Client) UpdateUnderwritingRulesUsingPUT(params *UpdateUnderwritingRulesUsingPUTParams, opts ...ClientOption) (*UpdateUnderwritingRulesUsingPUTOK, *UpdateUnderwritingRulesUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUnderwritingRulesUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUnderwritingRulesUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/underwritingRule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUnderwritingRulesUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateUnderwritingRulesUsingPUTOK:
		return value, nil, nil
	case *UpdateUnderwritingRulesUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdpateAmountSelectionRuleUsingPUT updates amount selection rule

None
*/
func (a *Client) UpdpateAmountSelectionRuleUsingPUT(params *UpdpateAmountSelectionRuleUsingPUTParams, opts ...ClientOption) (*UpdpateAmountSelectionRuleUsingPUTOK, *UpdpateAmountSelectionRuleUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdpateAmountSelectionRuleUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updpateAmountSelectionRuleUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/policy/policyServiceRule/updateAmountSelectionRule",
		ProducesMediaTypes: []string{"*/*"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdpateAmountSelectionRuleUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdpateAmountSelectionRuleUsingPUTOK:
		return value, nil, nil
	case *UpdpateAmountSelectionRuleUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for policy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
