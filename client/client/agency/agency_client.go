// Code generated by go-swagger; DO NOT EDIT.

package agency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new agency API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new agency API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new agency API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for agency API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationAebCasAgencyAccreditationUpdateDataV1JSON sets the Content-Type header to "application/aeb.cas.agency.accreditation.update.data.v1+json".
func WithContentTypeApplicationAebCasAgencyAccreditationUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.agency.accreditation.update.data.v1+json"}
}

// WithContentTypeApplicationAebCasAgencyUpdateDataV1JSON sets the Content-Type header to "application/aeb.cas.agency.update.data.v1+json".
func WithContentTypeApplicationAebCasAgencyUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/aeb.cas.agency.update.data.v1+json"}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationXML sets the Content-Type header to "application/xml".
func WithContentTypeApplicationXML(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/xml"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationAebCasAgencyAccreditationDataV1JSON sets the Accept header to "application/aeb.cas.agency.accreditation.data.v1+json".
func WithAcceptApplicationAebCasAgencyAccreditationDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.accreditation.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyAccreditationInsertDataV1JSON sets the Accept header to "application/aeb.cas.agency.accreditation.insert.data.v1+json".
func WithAcceptApplicationAebCasAgencyAccreditationInsertDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.accreditation.insert.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyAccreditationUpdateDataV1JSON sets the Accept header to "application/aeb.cas.agency.accreditation.update.data.v1+json".
func WithAcceptApplicationAebCasAgencyAccreditationUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.accreditation.update.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyDataV1JSON sets the Accept header to "application/aeb.cas.agency.data.v1+json".
func WithAcceptApplicationAebCasAgencyDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyDetailDataV1JSON sets the Accept header to "application/aeb.cas.agency.detail.data.v1+json".
func WithAcceptApplicationAebCasAgencyDetailDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.detail.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyInsertDataV1JSON sets the Accept header to "application/aeb.cas.agency.insert.data.v1+json".
func WithAcceptApplicationAebCasAgencyInsertDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.insert.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyInsertInfoDataV1JSON sets the Accept header to "application/aeb.cas.agency.insert.info.data.v1+json".
func WithAcceptApplicationAebCasAgencyInsertInfoDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.insert.info.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyListDataV1JSON sets the Accept header to "application/aeb.cas.agency.list.data.v1+json".
func WithAcceptApplicationAebCasAgencyListDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.list.data.v1+json"}
}

// WithAcceptApplicationAebCasAgencyUpdateDataV1JSON sets the Accept header to "application/aeb.cas.agency.update.data.v1+json".
func WithAcceptApplicationAebCasAgencyUpdateDataV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/aeb.cas.agency.update.data.v1+json"}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationXML sets the Accept header to "application/xml".
func WithAcceptApplicationXML(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/xml"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetAccreditationUsingGET(params *GetAccreditationUsingGETParams, opts ...ClientOption) (*GetAccreditationUsingGETOK, error)

	GetAgenciesUsingGET(params *GetAgenciesUsingGETParams, opts ...ClientOption) (*GetAgenciesUsingGETOK, error)

	GetAgencyDetailUsingGET(params *GetAgencyDetailUsingGETParams, opts ...ClientOption) (*GetAgencyDetailUsingGETOK, error)

	GetAgencyUsingGET(params *GetAgencyUsingGETParams, opts ...ClientOption) (*GetAgencyUsingGETOK, error)

	InsertAccreditationUsingPOST(params *InsertAccreditationUsingPOSTParams, opts ...ClientOption) (*InsertAccreditationUsingPOSTOK, *InsertAccreditationUsingPOSTCreated, error)

	InsertAgencyInfoUsingPOST(params *InsertAgencyInfoUsingPOSTParams, opts ...ClientOption) (*InsertAgencyInfoUsingPOSTOK, *InsertAgencyInfoUsingPOSTCreated, error)

	InsertAgencyUsingPOST(params *InsertAgencyUsingPOSTParams, opts ...ClientOption) (*InsertAgencyUsingPOSTOK, *InsertAgencyUsingPOSTCreated, error)

	UpdateAccreditationUsingPUT(params *UpdateAccreditationUsingPUTParams, opts ...ClientOption) (*UpdateAccreditationUsingPUTOK, *UpdateAccreditationUsingPUTCreated, error)

	UpdateAgencyUsingPUT(params *UpdateAgencyUsingPUTParams, opts ...ClientOption) (*UpdateAgencyUsingPUTOK, *UpdateAgencyUsingPUTCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAccreditationUsingGET gets agency accreditation

None
*/
func (a *Client) GetAccreditationUsingGET(params *GetAccreditationUsingGETParams, opts ...ClientOption) (*GetAccreditationUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccreditationUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccreditationUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agency/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.accreditation.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccreditationUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccreditationUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccreditationUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAgenciesUsingGET gets agency list

None
*/
func (a *Client) GetAgenciesUsingGET(params *GetAgenciesUsingGETParams, opts ...ClientOption) (*GetAgenciesUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgenciesUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgenciesUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agency/list",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.list.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAgenciesUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgenciesUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgenciesUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAgencyDetailUsingGET gets agency detail

None
*/
func (a *Client) GetAgencyDetailUsingGET(params *GetAgencyDetailUsingGETParams, opts ...ClientOption) (*GetAgencyDetailUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgencyDetailUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgencyDetailUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agency/agencyDetail",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.detail.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAgencyDetailUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgencyDetailUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgencyDetailUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAgencyUsingGET gets agency

Get Agency using agencyNumber
*/
func (a *Client) GetAgencyUsingGET(params *GetAgencyUsingGETParams, opts ...ClientOption) (*GetAgencyUsingGETOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAgencyUsingGETParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAgencyUsingGET",
		Method:             "GET",
		PathPattern:        "/compassintegrationapp/agency",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAgencyUsingGETReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAgencyUsingGETOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAgencyUsingGET: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAccreditationUsingPOST updates an agent s accreditation

must include either the accreditation key, agent number or agent key
*/
func (a *Client) InsertAccreditationUsingPOST(params *InsertAccreditationUsingPOSTParams, opts ...ClientOption) (*InsertAccreditationUsingPOSTOK, *InsertAccreditationUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAccreditationUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAccreditationUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/agency/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.accreditation.insert.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAccreditationUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAccreditationUsingPOSTOK:
		return value, nil, nil
	case *InsertAccreditationUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAgencyInfoUsingPOST inserts agency info

None
*/
func (a *Client) InsertAgencyInfoUsingPOST(params *InsertAgencyInfoUsingPOSTParams, opts ...ClientOption) (*InsertAgencyInfoUsingPOSTOK, *InsertAgencyInfoUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAgencyInfoUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAgencyInfoUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/agency/info",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.insert.info.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAgencyInfoUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAgencyInfoUsingPOSTOK:
		return value, nil, nil
	case *InsertAgencyInfoUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InsertAgencyUsingPOST inserts agency

None
*/
func (a *Client) InsertAgencyUsingPOST(params *InsertAgencyUsingPOSTParams, opts ...ClientOption) (*InsertAgencyUsingPOSTOK, *InsertAgencyUsingPOSTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInsertAgencyUsingPOSTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "insertAgencyUsingPOST",
		Method:             "POST",
		PathPattern:        "/compassintegrationapp/agency",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.insert.data.v1+json", "application/aeb.cas.agency.insert.info.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InsertAgencyUsingPOSTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *InsertAgencyUsingPOSTOK:
		return value, nil, nil
	case *InsertAgencyUsingPOSTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAccreditationUsingPUT updates an agent s accreditation

must include either the accreditation key, agent number or agent key
*/
func (a *Client) UpdateAccreditationUsingPUT(params *UpdateAccreditationUsingPUTParams, opts ...ClientOption) (*UpdateAccreditationUsingPUTOK, *UpdateAccreditationUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAccreditationUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAccreditationUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/agency/accreditation",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.accreditation.update.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.agency.accreditation.update.data.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAccreditationUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAccreditationUsingPUTOK:
		return value, nil, nil
	case *UpdateAccreditationUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAgencyUsingPUT updates agency

None
*/
func (a *Client) UpdateAgencyUsingPUT(params *UpdateAgencyUsingPUTParams, opts ...ClientOption) (*UpdateAgencyUsingPUTOK, *UpdateAgencyUsingPUTCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAgencyUsingPUTParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAgencyUsingPUT",
		Method:             "PUT",
		PathPattern:        "/compassintegrationapp/agency",
		ProducesMediaTypes: []string{"application/aeb.cas.agency.update.data.v1+json", "application/json", "application/xml"},
		ConsumesMediaTypes: []string{"application/xml", "application/json", "application/aeb.cas.agency.update.data.v1+json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAgencyUsingPUTReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateAgencyUsingPUTOK:
		return value, nil, nil
	case *UpdateAgencyUsingPUTCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for agency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
