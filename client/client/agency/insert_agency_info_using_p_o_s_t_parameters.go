// Code generated by go-swagger; DO NOT EDIT.

package agency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"client/models"
)

// NewInsertAgencyInfoUsingPOSTParams creates a new InsertAgencyInfoUsingPOSTParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewInsertAgencyInfoUsingPOSTParams() *InsertAgencyInfoUsingPOSTParams {
	return &InsertAgencyInfoUsingPOSTParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewInsertAgencyInfoUsingPOSTParamsWithTimeout creates a new InsertAgencyInfoUsingPOSTParams object
// with the ability to set a timeout on a request.
func NewInsertAgencyInfoUsingPOSTParamsWithTimeout(timeout time.Duration) *InsertAgencyInfoUsingPOSTParams {
	return &InsertAgencyInfoUsingPOSTParams{
		timeout: timeout,
	}
}

// NewInsertAgencyInfoUsingPOSTParamsWithContext creates a new InsertAgencyInfoUsingPOSTParams object
// with the ability to set a context for a request.
func NewInsertAgencyInfoUsingPOSTParamsWithContext(ctx context.Context) *InsertAgencyInfoUsingPOSTParams {
	return &InsertAgencyInfoUsingPOSTParams{
		Context: ctx,
	}
}

// NewInsertAgencyInfoUsingPOSTParamsWithHTTPClient creates a new InsertAgencyInfoUsingPOSTParams object
// with the ability to set a custom HTTPClient for a request.
func NewInsertAgencyInfoUsingPOSTParamsWithHTTPClient(client *http.Client) *InsertAgencyInfoUsingPOSTParams {
	return &InsertAgencyInfoUsingPOSTParams{
		HTTPClient: client,
	}
}

/*
InsertAgencyInfoUsingPOSTParams contains all the parameters to send to the API endpoint

	for the insert agency info using p o s t operation.

	Typically these are written to a http.Request.
*/
type InsertAgencyInfoUsingPOSTParams struct {

	/* Agency.

	   agency
	*/
	Agency *models.AgencyDTOReq

	/* EffectiveDate.

	   effectiveDate
	*/
	EffectiveDate string

	/* RequestApplication.

	   requestApplication
	*/
	RequestApplication string

	/* RequestUser.

	   requestUser
	*/
	RequestUser string

	/* SpecialProcessing.

	   specialProcessing
	*/
	SpecialProcessing *bool

	/* VarianceFormat.

	   varianceFormat
	*/
	VarianceFormat string

	/* VarianceLevel.

	   varianceLevel
	*/
	VarianceLevel string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the insert agency info using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InsertAgencyInfoUsingPOSTParams) WithDefaults() *InsertAgencyInfoUsingPOSTParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the insert agency info using p o s t params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *InsertAgencyInfoUsingPOSTParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithTimeout(timeout time.Duration) *InsertAgencyInfoUsingPOSTParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithContext(ctx context.Context) *InsertAgencyInfoUsingPOSTParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithHTTPClient(client *http.Client) *InsertAgencyInfoUsingPOSTParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAgency adds the agency to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithAgency(agency *models.AgencyDTOReq) *InsertAgencyInfoUsingPOSTParams {
	o.SetAgency(agency)
	return o
}

// SetAgency adds the agency to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetAgency(agency *models.AgencyDTOReq) {
	o.Agency = agency
}

// WithEffectiveDate adds the effectiveDate to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithEffectiveDate(effectiveDate string) *InsertAgencyInfoUsingPOSTParams {
	o.SetEffectiveDate(effectiveDate)
	return o
}

// SetEffectiveDate adds the effectiveDate to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetEffectiveDate(effectiveDate string) {
	o.EffectiveDate = effectiveDate
}

// WithRequestApplication adds the requestApplication to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithRequestApplication(requestApplication string) *InsertAgencyInfoUsingPOSTParams {
	o.SetRequestApplication(requestApplication)
	return o
}

// SetRequestApplication adds the requestApplication to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetRequestApplication(requestApplication string) {
	o.RequestApplication = requestApplication
}

// WithRequestUser adds the requestUser to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithRequestUser(requestUser string) *InsertAgencyInfoUsingPOSTParams {
	o.SetRequestUser(requestUser)
	return o
}

// SetRequestUser adds the requestUser to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetRequestUser(requestUser string) {
	o.RequestUser = requestUser
}

// WithSpecialProcessing adds the specialProcessing to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithSpecialProcessing(specialProcessing *bool) *InsertAgencyInfoUsingPOSTParams {
	o.SetSpecialProcessing(specialProcessing)
	return o
}

// SetSpecialProcessing adds the specialProcessing to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetSpecialProcessing(specialProcessing *bool) {
	o.SpecialProcessing = specialProcessing
}

// WithVarianceFormat adds the varianceFormat to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithVarianceFormat(varianceFormat string) *InsertAgencyInfoUsingPOSTParams {
	o.SetVarianceFormat(varianceFormat)
	return o
}

// SetVarianceFormat adds the varianceFormat to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetVarianceFormat(varianceFormat string) {
	o.VarianceFormat = varianceFormat
}

// WithVarianceLevel adds the varianceLevel to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) WithVarianceLevel(varianceLevel string) *InsertAgencyInfoUsingPOSTParams {
	o.SetVarianceLevel(varianceLevel)
	return o
}

// SetVarianceLevel adds the varianceLevel to the insert agency info using p o s t params
func (o *InsertAgencyInfoUsingPOSTParams) SetVarianceLevel(varianceLevel string) {
	o.VarianceLevel = varianceLevel
}

// WriteToRequest writes these params to a swagger request
func (o *InsertAgencyInfoUsingPOSTParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Agency != nil {
		if err := r.SetBodyParam(o.Agency); err != nil {
			return err
		}
	}

	// query param effectiveDate
	qrEffectiveDate := o.EffectiveDate
	qEffectiveDate := qrEffectiveDate
	if qEffectiveDate != "" {

		if err := r.SetQueryParam("effectiveDate", qEffectiveDate); err != nil {
			return err
		}
	}

	// query param requestApplication
	qrRequestApplication := o.RequestApplication
	qRequestApplication := qrRequestApplication
	if qRequestApplication != "" {

		if err := r.SetQueryParam("requestApplication", qRequestApplication); err != nil {
			return err
		}
	}

	// query param requestUser
	qrRequestUser := o.RequestUser
	qRequestUser := qrRequestUser
	if qRequestUser != "" {

		if err := r.SetQueryParam("requestUser", qRequestUser); err != nil {
			return err
		}
	}

	if o.SpecialProcessing != nil {

		// query param specialProcessing
		var qrSpecialProcessing bool

		if o.SpecialProcessing != nil {
			qrSpecialProcessing = *o.SpecialProcessing
		}
		qSpecialProcessing := swag.FormatBool(qrSpecialProcessing)
		if qSpecialProcessing != "" {

			if err := r.SetQueryParam("specialProcessing", qSpecialProcessing); err != nil {
				return err
			}
		}
	}

	// query param varianceFormat
	qrVarianceFormat := o.VarianceFormat
	qVarianceFormat := qrVarianceFormat
	if qVarianceFormat != "" {

		if err := r.SetQueryParam("varianceFormat", qVarianceFormat); err != nil {
			return err
		}
	}

	// query param varianceLevel
	qrVarianceLevel := o.VarianceLevel
	qVarianceLevel := qrVarianceLevel
	if qVarianceLevel != "" {

		if err := r.SetQueryParam("varianceLevel", qVarianceLevel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
