// Code generated by go-swagger; DO NOT EDIT.

package policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"client/models"
)

// InsertPolicyDateUsingPOSTReader is a Reader for the InsertPolicyDateUsingPOST structure.
type InsertPolicyDateUsingPOSTReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InsertPolicyDateUsingPOSTReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInsertPolicyDateUsingPOSTOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 201:
		result := NewInsertPolicyDateUsingPOSTCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewInsertPolicyDateUsingPOSTBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewInsertPolicyDateUsingPOSTUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewInsertPolicyDateUsingPOSTForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewInsertPolicyDateUsingPOSTNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInsertPolicyDateUsingPOSTInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /compassintegrationapp/policy/policyDate] insertPolicyDateUsingPOST", response, response.Code())
	}
}

// NewInsertPolicyDateUsingPOSTOK creates a InsertPolicyDateUsingPOSTOK with default headers values
func NewInsertPolicyDateUsingPOSTOK() *InsertPolicyDateUsingPOSTOK {
	return &InsertPolicyDateUsingPOSTOK{}
}

/*
InsertPolicyDateUsingPOSTOK describes a response with status code 200, with default header values.

Success
*/
type InsertPolicyDateUsingPOSTOK struct {
	Payload *models.ResponseWrapperBoolean
}

// IsSuccess returns true when this insert policy date using p o s t o k response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert policy date using p o s t o k response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t o k response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert policy date using p o s t o k response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTOK) IsServerError() bool {
	return false
}

// IsCode returns true when this insert policy date using p o s t o k response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the insert policy date using p o s t o k response
func (o *InsertPolicyDateUsingPOSTOK) Code() int {
	return 200
}

func (o *InsertPolicyDateUsingPOSTOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTOK %s", 200, payload)
}

func (o *InsertPolicyDateUsingPOSTOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTOK %s", 200, payload)
}

func (o *InsertPolicyDateUsingPOSTOK) GetPayload() *models.ResponseWrapperBoolean {
	return o.Payload
}

func (o *InsertPolicyDateUsingPOSTOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseWrapperBoolean)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInsertPolicyDateUsingPOSTCreated creates a InsertPolicyDateUsingPOSTCreated with default headers values
func NewInsertPolicyDateUsingPOSTCreated() *InsertPolicyDateUsingPOSTCreated {
	return &InsertPolicyDateUsingPOSTCreated{}
}

/*
InsertPolicyDateUsingPOSTCreated describes a response with status code 201, with default header values.

Created
*/
type InsertPolicyDateUsingPOSTCreated struct {
}

// IsSuccess returns true when this insert policy date using p o s t created response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this insert policy date using p o s t created response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t created response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert policy date using p o s t created response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this insert policy date using p o s t created response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the insert policy date using p o s t created response
func (o *InsertPolicyDateUsingPOSTCreated) Code() int {
	return 201
}

func (o *InsertPolicyDateUsingPOSTCreated) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTCreated", 201)
}

func (o *InsertPolicyDateUsingPOSTCreated) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTCreated", 201)
}

func (o *InsertPolicyDateUsingPOSTCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPolicyDateUsingPOSTBadRequest creates a InsertPolicyDateUsingPOSTBadRequest with default headers values
func NewInsertPolicyDateUsingPOSTBadRequest() *InsertPolicyDateUsingPOSTBadRequest {
	return &InsertPolicyDateUsingPOSTBadRequest{}
}

/*
InsertPolicyDateUsingPOSTBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type InsertPolicyDateUsingPOSTBadRequest struct {
}

// IsSuccess returns true when this insert policy date using p o s t bad request response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert policy date using p o s t bad request response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t bad request response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert policy date using p o s t bad request response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this insert policy date using p o s t bad request response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the insert policy date using p o s t bad request response
func (o *InsertPolicyDateUsingPOSTBadRequest) Code() int {
	return 400
}

func (o *InsertPolicyDateUsingPOSTBadRequest) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTBadRequest", 400)
}

func (o *InsertPolicyDateUsingPOSTBadRequest) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTBadRequest", 400)
}

func (o *InsertPolicyDateUsingPOSTBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPolicyDateUsingPOSTUnauthorized creates a InsertPolicyDateUsingPOSTUnauthorized with default headers values
func NewInsertPolicyDateUsingPOSTUnauthorized() *InsertPolicyDateUsingPOSTUnauthorized {
	return &InsertPolicyDateUsingPOSTUnauthorized{}
}

/*
InsertPolicyDateUsingPOSTUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type InsertPolicyDateUsingPOSTUnauthorized struct {
}

// IsSuccess returns true when this insert policy date using p o s t unauthorized response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert policy date using p o s t unauthorized response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t unauthorized response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert policy date using p o s t unauthorized response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this insert policy date using p o s t unauthorized response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the insert policy date using p o s t unauthorized response
func (o *InsertPolicyDateUsingPOSTUnauthorized) Code() int {
	return 401
}

func (o *InsertPolicyDateUsingPOSTUnauthorized) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTUnauthorized", 401)
}

func (o *InsertPolicyDateUsingPOSTUnauthorized) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTUnauthorized", 401)
}

func (o *InsertPolicyDateUsingPOSTUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPolicyDateUsingPOSTForbidden creates a InsertPolicyDateUsingPOSTForbidden with default headers values
func NewInsertPolicyDateUsingPOSTForbidden() *InsertPolicyDateUsingPOSTForbidden {
	return &InsertPolicyDateUsingPOSTForbidden{}
}

/*
InsertPolicyDateUsingPOSTForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type InsertPolicyDateUsingPOSTForbidden struct {
}

// IsSuccess returns true when this insert policy date using p o s t forbidden response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert policy date using p o s t forbidden response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t forbidden response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert policy date using p o s t forbidden response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this insert policy date using p o s t forbidden response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the insert policy date using p o s t forbidden response
func (o *InsertPolicyDateUsingPOSTForbidden) Code() int {
	return 403
}

func (o *InsertPolicyDateUsingPOSTForbidden) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTForbidden", 403)
}

func (o *InsertPolicyDateUsingPOSTForbidden) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTForbidden", 403)
}

func (o *InsertPolicyDateUsingPOSTForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPolicyDateUsingPOSTNotFound creates a InsertPolicyDateUsingPOSTNotFound with default headers values
func NewInsertPolicyDateUsingPOSTNotFound() *InsertPolicyDateUsingPOSTNotFound {
	return &InsertPolicyDateUsingPOSTNotFound{}
}

/*
InsertPolicyDateUsingPOSTNotFound describes a response with status code 404, with default header values.

Not Found
*/
type InsertPolicyDateUsingPOSTNotFound struct {
}

// IsSuccess returns true when this insert policy date using p o s t not found response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert policy date using p o s t not found response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t not found response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this insert policy date using p o s t not found response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this insert policy date using p o s t not found response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the insert policy date using p o s t not found response
func (o *InsertPolicyDateUsingPOSTNotFound) Code() int {
	return 404
}

func (o *InsertPolicyDateUsingPOSTNotFound) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTNotFound", 404)
}

func (o *InsertPolicyDateUsingPOSTNotFound) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTNotFound", 404)
}

func (o *InsertPolicyDateUsingPOSTNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewInsertPolicyDateUsingPOSTInternalServerError creates a InsertPolicyDateUsingPOSTInternalServerError with default headers values
func NewInsertPolicyDateUsingPOSTInternalServerError() *InsertPolicyDateUsingPOSTInternalServerError {
	return &InsertPolicyDateUsingPOSTInternalServerError{}
}

/*
InsertPolicyDateUsingPOSTInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type InsertPolicyDateUsingPOSTInternalServerError struct {
}

// IsSuccess returns true when this insert policy date using p o s t internal server error response has a 2xx status code
func (o *InsertPolicyDateUsingPOSTInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this insert policy date using p o s t internal server error response has a 3xx status code
func (o *InsertPolicyDateUsingPOSTInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this insert policy date using p o s t internal server error response has a 4xx status code
func (o *InsertPolicyDateUsingPOSTInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this insert policy date using p o s t internal server error response has a 5xx status code
func (o *InsertPolicyDateUsingPOSTInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this insert policy date using p o s t internal server error response a status code equal to that given
func (o *InsertPolicyDateUsingPOSTInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the insert policy date using p o s t internal server error response
func (o *InsertPolicyDateUsingPOSTInternalServerError) Code() int {
	return 500
}

func (o *InsertPolicyDateUsingPOSTInternalServerError) Error() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTInternalServerError", 500)
}

func (o *InsertPolicyDateUsingPOSTInternalServerError) String() string {
	return fmt.Sprintf("[POST /compassintegrationapp/policy/policyDate][%d] insertPolicyDateUsingPOSTInternalServerError", 500)
}

func (o *InsertPolicyDateUsingPOSTInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
